<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>aviskase</title>
  <id>https://www.aviskase.com/</id>
  <updated>2024-11-28T04:30:28Z</updated>
  <link rel="self" type="application/atom+xml" href="https://www.aviskase.com/feeds/all.atom.xml" hreflang="en"/>
  <link rel="alternate" type="text/html" href="https://www.aviskase.com/" hreflang="en"/>
  <entry>
    <title>The second (and probably last this year) progress report on cyber learning</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2024/11/27/the-second-and-probably-last-this-year-progress-report-on-cyber-learning/" hreflang="en"/>
    <published>2024-11-28T04:30:28Z</published>
    <updated>2024-11-28T04:30:28Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2024-11-28:/articles/2024/11/27/the-second-and-probably-last-this-year-progress-report-on-cyber-learning/</id>
    
    <summary type="html"><![CDATA[<p>As I&rsquo;m approching my due date (literally today), here is what I&rsquo;ve done so far:</p>
<p>Done:</p>
<ul>
<li><a href="https://tryhackme-certificates.s3-eu-west-1.amazonaws.com/THM-FO0RKYGLWJ.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">TryHackMe: Jr Penetration Tester learning path</a></li>
<li><a href="https://tryhackme-certificates.s3-eu-west-1.amazonaws.com/THM-RCUOTDRZ2Y.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">TryHackMe: Web Fundamentals learning path</a></li>
</ul>
<p>In progress:</p>]]></summary>
    <content type="html"><![CDATA[<p>As I&rsquo;m approching my due date (literally today), here is what I&rsquo;ve done so far:</p>
<p>Done:</p>
<ul>
<li><a href="https://tryhackme-certificates.s3-eu-west-1.amazonaws.com/THM-FO0RKYGLWJ.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">TryHackMe: Jr Penetration Tester learning path</a></li>
<li><a href="https://tryhackme-certificates.s3-eu-west-1.amazonaws.com/THM-RCUOTDRZ2Y.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">TryHackMe: Web Fundamentals learning path</a></li>
</ul>
<p>In progress:</p>
<ul>
<li><a href="https://overthewire.org/wargames/natas/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OverTheWire wargame: Natas</a> (it was put on hold until finishing those first THM learning paths)</li>
<li>HackTheBox: Lab &amp; Academy introductory stuff</li>
<li><a href="https://cybersecurity.bsy.fel.cvut.cz/docs/about/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">CTU MOOC Introduction to security</a></li>
<li>TryHackMe: Web Application Pentesting (probably won&rsquo;t finish this year)</li>
</ul>
<p>So, I mostly worked on TryHackMe stuff. I did some HTB things, but THM courses seem to be more to the point and less buggy. Also, the pet peeve of mine: HTB requires you to click on &ldquo;Submit&rdquo; button, pressing <span><kbd>Enter</kbd></span>
 is not enough, bleh.</p>
<p>I completed two easy HTB boxes, and it was humbling. I need to stop overthinking and just go with dumb things first. Like trying to use the same password for linux user as in CMS admin panel. Or spend more time just checking/opening files.</p>
<p>But overall it&rsquo;s been fun. There are tons of tools&amp;techniques to learn, and it&rsquo;s more about checking off unknown unknowns than being a g0d-][ack3r. In the software testing community there is kinda a warlike dichotomy between exploratory and automation sides. In the pentest, it&rsquo;s &ldquo;duh? be and use both&rdquo;.</p>
]]></content>
  </entry>
  <entry>
    <title>Switching to cyber</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2024/11/07/switching-to-cyber/" hreflang="en"/>
    <published>2024-11-08T04:52:06Z</published>
    <updated>2024-11-08T04:52:06Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2024-11-08:/articles/2024/11/07/switching-to-cyber/</id>
    
    <summary type="html"><![CDATA[<p>I don&rsquo;t think pivoting to another career path less than a month before maternity leave is a normal (and smart) thing to do, but here we are.</p>
<p>Finished:</p>
<ul>
<li><a href="https://overthewire.org/wargames/bandit/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OverTheWire wargame: Bandit</a></li>
<li><a href="https://tryhackme-certificates.s3-eu-west-1.amazonaws.com/THM-AKHBGNGXH6.png" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">TryHackMe: Cyber Security 101 learning path</a></li>
</ul>
<p>In progress:</p>]]></summary>
    <content type="html"><![CDATA[<p>I don&rsquo;t think pivoting to another career path less than a month before maternity leave is a normal (and smart) thing to do, but here we are.</p>
<p>Finished:</p>
<ul>
<li><a href="https://overthewire.org/wargames/bandit/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OverTheWire wargame: Bandit</a></li>
<li><a href="https://tryhackme-certificates.s3-eu-west-1.amazonaws.com/THM-AKHBGNGXH6.png" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">TryHackMe: Cyber Security 101 learning path</a></li>
</ul>
<p>In progress:</p>
<ul>
<li><a href="https://overthewire.org/wargames/natas/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OverTheWire wargame: Natas</a></li>
<li>TryHackMe: Jr Penetration Tester learning path</li>
<li>HackTheBox: Lab &amp; Academy introductory stuff</li>
<li><a href="https://cybersecurity.bsy.fel.cvut.cz/docs/about/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">CTU MOOC Introduction to security</a></li>
</ul>
<p>&hellip; and joined <a href="https://hackfest.ca/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Hackfest</a> discord (local community).</p>
<p>Why? I was a tester once. Then, API developer/advocate/whatever. Shortly after my previous maternity leave, our company was acquired (again) and I had to do even more pure developer work. React, of all the things! Not a fan. So, that was the first time I had a thought about switching to something less developer-ish.</p>
<p>Second, since 2022 I&rsquo;ve picked up a bunch of peculiar interests, like <a href="https://www.youtube.com/watch?v=27wWRszlZWU" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Canadian defense procurement shenanigans</a>. Or knowing that CAF does cyber something under hunt-forward operations REASSURANCE (Latvia) and UNIFIER (Ukraine). Yeah, my LinkedIn sponsored job ads look weird now.</p>
<p>Third, after our office was layed off, I took a look at the job market and it wasn&rsquo;t that inspiring. Meh. I should (and could) have started way earlier though, but it hit me only now. Specifically, I was hit by CTU MOOC in <a href="https://buttondown.com/grugq/archive/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the grugq&rsquo;s newsletter</a>. Learning that the local community isn&rsquo;t one and a half anonymous sad person but very very active and huge was an additional boost.</p>
<p>At this moment I haven&rsquo;t even decided yet at what path to take: pentesting (nod to my testing time) or security engineer (nod to the developer time). For sure not SOC, even though it is probably an easier position to find. But I have time. Though, I recall being brain-dead for a year last time I had a baby, so, that&rsquo;s gonna be a really funny experience.</p>
]]></content>
  </entry>
  <entry>
    <title>Goodbye, og:image</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2024/03/16/goodbye-ogimage/" hreflang="en"/>
    <published>2024-03-16T14:35:00Z</published>
    <updated>2024-03-16T14:35:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2024-03-16:/articles/2024/03/16/goodbye-ogimage/</id>
    
    <summary type="html"><![CDATA[<p>When you see a link on almost all social platforms or messengers, you usually see a card preview with a title, an almost invisible summary, and an image. These cards are generated based on twitter and Open Graph HTML tags that look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;og:url&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;url&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;og:title&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;title&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;og:description&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;description&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;og:image&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;link&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:card&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;summary_large_image&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:url&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;url&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:title&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;title&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:description&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;description&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:image&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;link&gt;&#34;</span>&gt;
</span></span></code></pre></div><p>See those image properties? Per specifications they are <strong>required</strong>. The minimum size is 200×200 pixels; the recommended size is 1200×630 pixels.</p>]]></summary>
    <content type="html"><![CDATA[<p>When you see a link on almost all social platforms or messengers, you usually see a card preview with a title, an almost invisible summary, and an image. These cards are generated based on twitter and Open Graph HTML tags that look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;og:url&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;url&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;og:title&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;title&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;og:description&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;description&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;og:image&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;link&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:card&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;summary_large_image&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">property</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:url&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;url&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:title&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;title&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:description&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;description&gt;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">meta</span> <span style="color:#50fa7b">name</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;twitter:image&#34;</span> <span style="color:#50fa7b">content</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;&lt;link&gt;&#34;</span>&gt;
</span></span></code></pre></div><p>See those image properties? Per specifications they are <strong>required</strong>. The minimum size is 200×200 pixels; the recommended size is 1200×630 pixels.</p>
<p>The goal is to have a nice link preview. Fine. If the article already has a relevant image, why not? The problem is, not all articles have them, so people improvise:</p>
<ul>
<li>Find some semi-relevant stock image.</li>
<li>Ask somebody to create one. That&rsquo;s for fancy websites.</li>
<li>Generate image using Midjourney or whatever &ldquo;AI&rdquo; you prefer.</li>
<li>Generate image using article title (I used to do that).</li>
</ul>
<p>First three are eye candy solutions. Last one is basically duplicating already displayed information.</p>
<p>So, we are trying to conform to some arbitrary standards imposed by social media platforms. These images are there to drive engagement. To be attention grabs. And no one likes to read nowadays, right? Thus, one could argue that continuing this practice is in the best interest of content creators. However, if this is the goal&hellip;</p>
<p>Boobs. Just make an image with the boobs. You can even add some article-relevant background. If you&rsquo;re creating the image solely because &ldquo;Facebook says so&rdquo;, why limit yourself to half-measures? Drive your SEO by ░C░O░N░T░E░N░T░ ░I░N░ ░B░I░O░.</p>
<hr>
<p>Anyway, yeah, no Open Graph images here anymore.</p>
]]></content>
  </entry>
  <entry>
    <title>Two (ten) years of February</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2024/02/23/two-ten-years-of-february/" hreflang="en"/>
    <published>2024-02-24T03:18:00Z</published>
    <updated>2024-02-24T03:18:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2024-02-24:/articles/2024/02/23/two-ten-years-of-february/</id>
    
    <summary type="html"><![CDATA[<p>Today I&rsquo;d like to share <a href="http://www.zbarazh-library.com.ua/writen/history/UPA.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">this bit about my great-grand father Bagriy Ivan</a>:</p>
<blockquote>
<p>The last bunker in our region was destroyed by the NKVD in 1952 in the Lubianets forest.
Four shylyans were killed then:</p>
<ul>
<li>Antoniuk Volodymyr - born in 1923.</li>
<li>Bagriy Ivan - born in 1911.</li>
<li>Voznyi Ivan - born in 1905.</li>
<li>Hulovskyi Vasyl - born in 1918.</li>
</ul>
</blockquote>
<p>Nineteen fifty-two. By that time, Ivan&rsquo;s wife and son (my grandfather) had already been exiled to Kazakhstan.</p>]]></summary>
    <content type="html"><![CDATA[<p>Today I&rsquo;d like to share <a href="http://www.zbarazh-library.com.ua/writen/history/UPA.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">this bit about my great-grand father Bagriy Ivan</a>:</p>
<blockquote>
<p>The last bunker in our region was destroyed by the NKVD in 1952 in the Lubianets forest.
Four shylyans were killed then:</p>
<ul>
<li>Antoniuk Volodymyr - born in 1923.</li>
<li>Bagriy Ivan - born in 1911.</li>
<li>Voznyi Ivan - born in 1905.</li>
<li>Hulovskyi Vasyl - born in 1918.</li>
</ul>
</blockquote>
<p>Nineteen fifty-two. By that time, Ivan&rsquo;s wife and son (my grandfather) had already been exiled to Kazakhstan.</p>
<p>One can write a lengthy eloquent essay about never surrendering, believing in independence, and so on. I won&rsquo;t.</p>
<p>Слава Україні. Героям слава.</p>
]]></content>
  </entry>
  <entry>
    <title>Open Banking: Canada vs Kazakhstan</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2024/01/25/open-banking-canada-vs-kazakhstan/" hreflang="en"/>
    <published>2024-01-26T04:59:46Z</published>
    <updated>2024-01-26T04:59:46Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2024-01-26:/articles/2024/01/25/open-banking-canada-vs-kazakhstan/</id>
    
    <summary type="html"><![CDATA[<p>As I was skimming through <a href="https://apichangelog.substack.com/p/2024-04" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The API Changelog issue 2024.04</a>, my eye caught:</p>
<blockquote>
<p>Kazakhstan&rsquo;s National Bank and other entities <a href="https://astanatimes.com/2024/01/kazakhstan-joins-open-banking-countries-produces-initial-results/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">published</a> a report on an Open API and Open Banking pilot, aiming to modernize financial services through standardized data exchange. The successful pilot involved multiple banks and clients, setting the stage for a transparent and competitive financial sector by 2024.</p>]]></summary>
    <content type="html"><![CDATA[<p>As I was skimming through <a href="https://apichangelog.substack.com/p/2024-04" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The API Changelog issue 2024.04</a>, my eye caught:</p>
<blockquote>
<p>Kazakhstan&rsquo;s National Bank and other entities <a href="https://astanatimes.com/2024/01/kazakhstan-joins-open-banking-countries-produces-initial-results/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">published</a> a report on an Open API and Open Banking pilot, aiming to modernize financial services through standardized data exchange. The successful pilot involved multiple banks and clients, setting the stage for a transparent and competitive financial sector by 2024.</p>
</blockquote>
<p>Cool. Let&rsquo;s read the report.</p>
<blockquote>
<p>The pilot project was carried out with the participation of focus groups of 128 clients and second-tier banks, including Bank RBK, Altyn Bank, Home Credit Bank, Bank CenterCredit, and Otbasy Bank.</p>
</blockquote>
<blockquote>
<p>The country now follows the concept of development of Open API and Open Banking for 2023-2025, which was approved by the National Bank of Kazakhstan, the Agency for Regulation and Development of Financial Market, and the Agency for Protection and Development of Competition in December 2022.</p>
</blockquote>
<p>Yup, Halyk Bank isn&rsquo;t mentioned, so it&rsquo;s just a really early pilot. Even more, no Kaspi Bank. It&rsquo;s like doing something in Canada without involving <a href="https://en.wikipedia.org/wiki/Big_Five_banks_of_Canada" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Big Five</a>. Well, they have 2 more years, so, good luck.</p>
<p>Hmm. Speaking of. What about Canada?</p>
<p>Despite Canada&rsquo;s reputation for bad information disclosure approaches, I do enjoy the content available on <code>canada.ca</code>. Including <a href="https://www.canada.ca/en/financial-consumer-agency/services/banking/open-banking.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">what&rsquo;s up with open banking</a>. It&rsquo;s a long page, but all you need is the first sentence:</p>
<blockquote>
<p>Open banking, also called consumer-driven banking, is not yet available in Canada.</p>
</blockquote>
<p>Ouch. Is there any progress, though? According to <a href="https://www.canada.ca/en/department-finance/programs/financial-sector-policy/open-banking-implementation/2023-fes-policy-statement-consumer-driven-banking.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">2023 Fall Economic Statement: Policy Statement on Consumer-Driven Banking</a>:</p>
<blockquote>
<p>The Department of Finance will advance the work required to stand up a Canadian framework governing consumer-driven banking, with the goal of adopting legislation and fully implementing the necessary governance framework by 2025.</p>
</blockquote>
<p>Same year, different goals. Kazakhstan is planning to finish implementing (doubt it), whereas Canada is planning to finish with laws and paperwork (doubt it too). Let&rsquo;s put a reminder and check on them both in 2025?</p>
]]></content>
  </entry>
  <entry>
    <title>The Navy’s IT challenges</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2023/12/15/the-navys-it-challenges/" hreflang="en"/>
    <published>2023-12-15T05:10:48Z</published>
    <updated>2023-12-15T05:10:48Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2023-12-15:/articles/2023/12/15/the-navys-it-challenges/</id>
    
    <summary type="html"><![CDATA[<p>Can&rsquo;t stop thinking about one line from the recent <a href="https://paulwells.substack.com/p/a-generational-challenge-in-naval" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Paul Well&rsquo;s interview with Vice Admiral Angus Topshee</a>, the Commander of the Royal Canadian Navy.</p>
<blockquote>
<p>PW: Is the fact that this video’s on YouTube a reflection of any difficulty you&rsquo;re having getting heard internally?</p>]]></summary>
    <content type="html"><![CDATA[<p>Can&rsquo;t stop thinking about one line from the recent <a href="https://paulwells.substack.com/p/a-generational-challenge-in-naval" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Paul Well&rsquo;s interview with Vice Admiral Angus Topshee</a>, the Commander of the Royal Canadian Navy.</p>
<blockquote>
<p>PW: Is the fact that this video’s on YouTube a reflection of any difficulty you&rsquo;re having getting heard internally?</p>
<p>AT: No. I&rsquo;ve shared my assessments with the leadership of the Department, up to and including this minister and the previous Minister. I feel I&rsquo;m being heard and respected. This was more about, we wanted to put the message out internally. Unfortunately, there&rsquo;s some very specific IT challenges around how we disseminate internal messages. And so [Youtube] was the channel we used.</p>
</blockquote>
<p><em>Specific IT challenges</em>, eh?</p>
<p>I guess most of the people skim through this line. Whatever, it&rsquo;s just a pretext. But for me it sounds bizarrely specific. So, here some of my musings about it.</p>
<p>Those problems with internal communications. It got me curious, how really it&rsquo;s even done in the military. &ldquo;Army-wide&rdquo; emails? Slack, Zoom, Teams? IRC? The answer is <a href="https://www.reddit.com/r/CanadianForces/comments/11hy76u/scs_whaaaatsappp/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">all of these</a>. Total chaos. I especially like the comment mentioning using Facebook Messenger, because, c&rsquo;mon! At least, no WeChat. I hope. I also hope they have less problems accessing their Top Secret Network stuff, <a href="https://www.canada.ca/content/dam/di-id/documents/rpt/rapporteur/Independent-Special-Rapporteur%20-Report-eng.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">not like our ministers [page 27]</a>.</p>
<p>While we already established that, in fact, it&rsquo;s way easier to just publicly share YouTube video than send a file or a private link, I highly doubt it was the main reason. Thus, I wonder, why IT was selected as a pretext. Why. Is it something on admiral&rsquo;s mind? Or is it a common &ldquo;enemy&rdquo; that always gets blamed and everyone nods understandingly? Is IT a dog that ate the homework in government offices? &#x1f644;</p>
<hr>
<p>Yeah, I&rsquo;m back. Kinda. No promises.</p>
]]></content>
  </entry>
  <entry>
    <title>Using openapi-cli: custom rules</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2021/09/06/using-openapi-cli-custom-rules/" hreflang="en"/>
    <published>2021-09-06T20:35:43Z</published>
    <updated>2021-09-06T20:35:43Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2021-09-06:/articles/2021/09/06/using-openapi-cli-custom-rules/</id>
    
    <summary type="html"><![CDATA[<p>If you&rsquo;re planning to <a href="https://www.aviskase.com/articles/2020/12/07/crash-course-into-api-related-terminology/#description-doc-validation-vs-linting-vs-preprocessing" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">lint OpenAPI description documents</a> (you should!), always check whether a linter supports adding custom rules. And I mean not just <a href="https://www.aviskase.com/articles/2019/12/26/lunchlearn-linting-openapi-description-docs/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">changing severity or disabling predefined rules</a>, but actually adding new ones specific to your API standards.</p>]]></summary>
    <content type="html"><![CDATA[<p>If you&rsquo;re planning to <a href="https://www.aviskase.com/articles/2020/12/07/crash-course-into-api-related-terminology/#description-doc-validation-vs-linting-vs-preprocessing" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">lint OpenAPI description documents</a> (you should!), always check whether a linter supports adding custom rules. And I mean not just <a href="https://www.aviskase.com/articles/2019/12/26/lunchlearn-linting-openapi-description-docs/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">changing severity or disabling predefined rules</a>, but actually adding new ones specific to your API standards.</p>
<p><code>openapi-cli</code>, as any respectable OpenAPI linter, <a href="https://redoc.ly/docs/cli/custom-rules/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">allows that</a>. The process is very similar to <a href="https://www.aviskase.com/articles/2021/08/16/using-openapi-cli-custom-preprocessing/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">adding preprocessors</a>.</p>
<h2 id="example-enforcing-case-style" >
  <a class="group relative" href="#example-enforcing-case-style">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Example: enforcing case style</a>
</h2>
<p>Let&rsquo;s look at our previous enumeration example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ff79c6">state</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">type</span>: string
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">nullable</span>: <span style="color:#ff79c6">true</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">x-aviskase-enum</span>:
</span></span><span style="display:flex;"><span>	  - OK
</span></span><span style="display:flex;"><span>	  - DESTROYED
</span></span><span style="display:flex;"><span>	  - BURIED
</span></span></code></pre></div><p>Typically, there are guidelines for case style of enumeration values. Imagine that our rule is: all values in enumerations and extensible enumerations MUST be <code>CAPITAL_CASE</code>.</p>
<h3 id="adding-a-rule" >
  <a class="group relative" href="#adding-a-rule">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Adding a rule</a>
</h3>
<p>First, here is our rule file <code>./plugins/rules/uppercase-schema-enums.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#6272a4">//@ts-check
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>module.exports <span style="color:#ff79c6">=</span> UppercaseSchemaEnums;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">/** @type { import(&#39;@redocly/openapi-core/src/visitors&#39;).Oas3Rule } */</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">function</span> UppercaseSchemaEnums(options) {
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">const</span> enumProperties <span style="color:#ff79c6">=</span> [<span style="color:#f1fa8c">&#39;enum&#39;</span>, ...(options.enumLikeProperties <span style="color:#ff79c6">||</span> [])];
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span> {
</span></span><span style="display:flex;"><span>    Schema<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>      skip(node) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> node.type <span style="color:#ff79c6">!==</span> <span style="color:#f1fa8c">&#39;string&#39;</span>;
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span>      enter(node, { report, location }) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">for</span> (<span style="color:#ff79c6">const</span> prop <span style="color:#ff79c6">of</span> enumProperties) {
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">if</span> (node[prop] <span style="color:#ff79c6">!==</span> <span style="color:#ff79c6">undefined</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">if</span> (node[prop].some(s =&gt; s <span style="color:#ff79c6">!==</span> s.toUpperCase())) {
</span></span><span style="display:flex;"><span>              <span style="color:#ff79c6">return</span> report({ message<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">`All enum values should be uppercase`</span>, location<span style="color:#ff79c6">:</span> location.child(prop) });
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  };  
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>Export a rule function <code>UppercaseSchemaEnums</code> that can be configured with enumeration-like properties in addition to the standard <code>enum</code>.</li>
<li>All rules (like preprocessors) should return a <em>visitor</em>. We use <code>Schema</code> visitor with two methods:
<ul>
<li><code>skip</code> method to ensure that we check enumerations only for properties with <code>type: string</code></li>
<li>normal <code>enter</code> method to check the rule</li>
</ul>
</li>
<li>To report a problem we use the second argument of <code>enter</code> method: context. It&rsquo;s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">destructured</a> to <code>report</code> and <code>location</code>:
<ul>
<li><code>report</code> is a function to report a problem (duh!)</li>
<li><code>location</code> has several properties and methods, in our example we use <code>location.child()</code> to ask reporter to pinpoint the problem to the node&rsquo;s child location. Thus, the problem will be pointed to <code>state.x-aviskase-enum</code> instead of simply <code>state</code>.</li>
</ul>
</li>
</ul>
<h3 id="enabling-the-rule-via-a-custom-plugin" >
  <a class="group relative" href="#enabling-the-rule-via-a-custom-plugin">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Enabling the rule via a custom plugin</a>
</h3>
<p>Similarly to the preprocessor plugin, we keep all custom rules bundled as a plugin in <code>./plugins/custom-rules.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#6272a4">//@ts-check
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">const</span> UppercaseSchemaEnums <span style="color:#ff79c6">=</span> require(<span style="color:#f1fa8c">&#39;./rules/uppercase-schema-enums&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> id <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;custom-rules&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">/** @type { import(&#39;@redocly/openapi-core/src/config/config&#39;).CustomRulesConfig } */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> rules <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>  oas3<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#39;uppercase-schema-enums&#39;</span><span style="color:#ff79c6">:</span> UppercaseSchemaEnums,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>module.exports <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>  id,
</span></span><span style="display:flex;"><span>  rules,
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>Next, enable the plugin and configure the rule in the <code>.redocly.yaml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">plugins</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f1fa8c">&#39;./plugins/custom-preprocessors.js&#39;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f1fa8c">&#39;./plugins/custom-rules.js&#39;</span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">rules</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">custom-rules/uppercase-schema-enums</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">severity</span>: error
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">enumLikeProperties</span>:
</span></span><span style="display:flex;"><span>        - x-aviskase-enum
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>The final result is in <a href="https://github.com/aviskase/openapi-cli-examples/tree/45a99c7f3cfa8e1725ebccc601280f948c637910" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">commit 45a99c7</a>.</p>
<h2 id="example-checking-description-property-style" >
  <a class="group relative" href="#example-checking-description-property-style">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Example: checking <code>description</code> property style</a>
</h2>
<p>Let&rsquo;s add one more housekeeping rule: all <code>description</code> properties should start with a capital letter and end with a punctuation mark.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#6272a4">//@ts-check
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>module.exports <span style="color:#ff79c6">=</span> DescriptionStyle;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">/** @type { import(&#39;@redocly/openapi-core/src/visitors&#39;).Oas3Rule } */</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">function</span> DescriptionStyle() {
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span> {
</span></span><span style="display:flex;"><span>    Info<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    Server<span style="color:#ff79c6">:</span> checkStyle(), 
</span></span><span style="display:flex;"><span>    ServerVariable<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    PathItem<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    Operation<span style="color:#ff79c6">:</span> checkStyle(), 
</span></span><span style="display:flex;"><span>    ExternalDocs<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    Parameter<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    RequestBody<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    Response<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    Example<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    Header<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    Tag<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    Schema<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>    SecurityScheme<span style="color:#ff79c6">:</span> checkStyle(),
</span></span><span style="display:flex;"><span>  };  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">function</span> checkStyle(attribute <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;description&#39;</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span> {
</span></span><span style="display:flex;"><span>    skip(node) {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">return</span> <span style="color:#ff79c6">typeof</span> node[attribute] <span style="color:#ff79c6">!==</span> <span style="color:#f1fa8c">&#39;string&#39;</span>;
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    enter(node, { report, location, type }) {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">const</span> loc <span style="color:#ff79c6">=</span> location.child([attribute]);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">const</span> content <span style="color:#ff79c6">=</span> node[attribute].trim();
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">if</span> (content.length <span style="color:#ff79c6">===</span> <span style="color:#bd93f9">0</span>){
</span></span><span style="display:flex;"><span>        report({message<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">`The </span><span style="color:#f1fa8c">${</span>type.name<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> description should not be empty string.`</span>, location<span style="color:#ff79c6">:</span> loc});
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">const</span> firstChar <span style="color:#ff79c6">=</span> content.slice(<span style="color:#bd93f9">0</span>,<span style="color:#bd93f9">1</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">if</span> (firstChar <span style="color:#ff79c6">!==</span> firstChar.toLocaleUpperCase()){
</span></span><span style="display:flex;"><span>        report({message<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">`The </span><span style="color:#f1fa8c">${</span>type.name<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> description should start with capital letter.`</span>, location<span style="color:#ff79c6">:</span> loc});
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">const</span> lastChar <span style="color:#ff79c6">=</span> content.slice(<span style="color:#ff79c6">-</span><span style="color:#bd93f9">1</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">if</span> (<span style="color:#ff79c6">!</span>([<span style="color:#f1fa8c">&#39;.&#39;</span>, <span style="color:#f1fa8c">&#39;!&#39;</span>].includes(lastChar))) {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> suggest <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">`&#34;&lt;...&gt;</span><span style="color:#f1fa8c">${</span>content.slice(<span style="color:#ff79c6">-</span><span style="color:#bd93f9">10</span>)<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">.&#34;`</span>;
</span></span><span style="display:flex;"><span>        report({message<span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">`The </span><span style="color:#f1fa8c">${</span>type.name<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> description should end with punctuation.`</span>, location<span style="color:#ff79c6">:</span>loc, suggest<span style="color:#ff79c6">:</span> [suggest]});
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li><code>description</code> property can be present <a href="https://spec.openapis.org/oas/v3.0.3.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">in several objects</a>. Thus, we target several visitors at once.</li>
<li><code>report</code> can also show suggestions: here we show a possible fix for the punctuation problem.</li>
</ul>
<p>Don&rsquo;t forget to enable it in <code>.redocly.yaml</code>. Here is what we have after adding the rule and fixing <em>most</em> of the errors: <a href="https://github.com/aviskase/openapi-cli-examples/tree/33e6a46e39c5237746448d8fcc9e3b8924b7d176" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">commit 33e6a46</a></p>
<p>But there are still two errors to fix:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>validating /openapi/gates.yaml...
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[</span>1<span style="color:#ff79c6">]</span> openapi/components/schemas/Stargate.yaml:10:5 at <span style="color:#6272a4">#/properties/state/description</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The Schema description should end with punctuation.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Did you mean: <span style="color:#f1fa8c">&#34;&lt;...&gt;, `BURIED`.&#34;</span> ?
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#bd93f9">8</span> |     - nullable: <span style="color:#8be9fd;font-style:italic">true</span>
</span></span><span style="display:flex;"><span> <span style="color:#bd93f9">9</span> | state:
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">10</span> |   type: string
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">11</span> |   nullable: <span style="color:#8be9fd;font-style:italic">true</span>
</span></span><span style="display:flex;"><span> … |   &lt; <span style="color:#bd93f9">4</span> more lines &gt;
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">16</span> | environment:
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">17</span> |   type: string
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">18</span> |   description: Last known place where gate is situated.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Error was generated by the custom-rules/description-style rule.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">[</span>2<span style="color:#ff79c6">]</span> openapi/components/schemas/Stargate.yaml:18:18 at <span style="color:#6272a4">#/properties/environment/description</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The Schema description should end with punctuation.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Did you mean: <span style="color:#f1fa8c">&#34;&lt;...&gt;DE_OBJECT`.&#34;</span> ?
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">16</span> | environment:
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">17</span> |   type: string
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">18</span> |   description: Last known place where gate is situated.
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">19</span> |   nullable: <span style="color:#8be9fd;font-style:italic">true</span>
</span></span><span style="display:flex;"><span><span style="color:#bd93f9">20</span> |   x-aviskase-enum:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Error was generated by the custom-rules/description-style rule.
</span></span></code></pre></div><p>Hmm, looks confusing. Thanks to <code>suggest</code> we can at least see that something was added to the original description&hellip; Oh, right, that was our preprocessor! That&rsquo;s why I suggested to use it in the first place: if we were to modify descriptions via decorators, the rule wouldn&rsquo;t be able to catch this problem.</p>
<p>Finally, to make linter passing, we need to fix the preprocessor plugin code <a href="https://github.com/aviskase/openapi-cli-examples/tree/81a43321ae607fd20afd5abe4922fc86fa0fcce0" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">commit 81a4332</a>.</p>
<div class="callout cta">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" /></svg></div><p>Rules are cooler than preprocessors and decorators: they support nested visitors. I&rsquo;ll cover this concept in the next article. Until then, try to come up with an example where the uppercase rule in its current form might have undesired behavior.</p></div>
]]></content>
  </entry>
  <entry>
    <title>Using openapi-cli: custom preprocessing</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2021/08/16/using-openapi-cli-custom-preprocessing/" hreflang="en"/>
    <published>2021-08-17T03:44:37Z</published>
    <updated>2021-08-17T03:44:37Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2021-08-17:/articles/2021/08/16/using-openapi-cli-custom-preprocessing/</id>
    
    <summary type="html"><![CDATA[<p>The key feature of <code>openapi-cli</code> is its extensibility. There are three ways to extend it: <a href="https://redoc.ly/docs/cli/custom-rules/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">preprocessors, rules, and decorators</a>. In comparison, <a href="https://meta.stoplight.io/docs/spectral" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Spectral</a> supports only custom rules.</p>
<p>In this tutorial, we&rsquo;ll start with <strong>preprocessors</strong>. They are used to transform OpenAPI description document <em>before</em> validation and linting. Mind you, documentation says they should be avoided, because custom preprocessors tend to be error prone.</p>]]></summary>
    <content type="html"><![CDATA[<p>The key feature of <code>openapi-cli</code> is its extensibility. There are three ways to extend it: <a href="https://redoc.ly/docs/cli/custom-rules/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">preprocessors, rules, and decorators</a>. In comparison, <a href="https://meta.stoplight.io/docs/spectral" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Spectral</a> supports only custom rules.</p>
<p>In this tutorial, we&rsquo;ll start with <strong>preprocessors</strong>. They are used to transform OpenAPI description document <em>before</em> validation and linting. Mind you, documentation says they should be avoided, because custom preprocessors tend to be error prone.</p>
<h2 id="example-extensible-enumerations" >
  <a class="group relative" href="#example-extensible-enumerations">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Example: extensible enumerations</a>
</h2>
<p>In our Stargate Network API there is a <a href="https://github.com/aviskase/openapi-cli-examples/blob/bb95d479cc184221b38ff5d5371767f0b3f32f74/openapi/components/schemas/Stargate.yaml" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]"><code>Stargate.yaml</code> schema</a> with two properties defined with enumerations: <code>state</code> and <code>environment</code>. We might think that we captured all potential values, but we can&rsquo;t be sure.</p>
<p><a href="https://opensource.zalando.com/restful-api-guidelines/#112" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Zalando API guidelines</a> and <a href="https://livebook.manning.com/book/the-design-of-web-apis/chapter-9/table9.1" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The Design of Web APIs by Arnaud Lauret</a> warn us that enumerations can cause API compatibility breaks, especially with outputs.</p>
<p>Imagine the scenario. We generated SDK for the initial version of the API, and the generator was smart enough to use enumerations in the selected programming language. Some time later we push a new API version where <code>environment</code> can also be <code>STAR</code>. Customers, who are still on the first version of the SDK, won&rsquo;t be able to process API responses containing this value, because most probably their clients will crash with something-something-uprocessable-entity exceptions.</p>
<p>Thus, similarly to Zalando, we will use a custom <a href="https://spec.openapis.org/oas/v3.0.3.html#specification-extensions" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">vendor extension</a> to document possible values. I&rsquo;m calling it <code>x-aviskase-enum</code> just in case not to introduce conflicts with other extensions. <a href="https://github.com/aviskase/openapi-cli-examples/tree/fa78766d7ea2cd245740373efb951bffe7b2facf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Commit fa78766</a>.</p>
<h2 id="surfacing-values-in-the-documentation" >
  <a class="group relative" href="#surfacing-values-in-the-documentation">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Surfacing values in the documentation</a>
</h2>
<p>Oops, now there is no way to see known values in the generated reference docs. The manual fix is to add these values to the <code>description</code>. But this is too cumbersome, especially if you&rsquo;ll ever want to change presentation format.</p>
<p>Preprocessor for the rescue! What we want it to do:</p>
<ol>
<li>Find all properties with <code>x-aviskase-enum</code> property.</li>
<li>Grab the list of values, format them nicely, and add it to the <code>description</code>. Make sure not to overwrite existing description if it&rsquo;s already present!</li>
</ol>
<h3 id="adding-a-preprocessor" >
  <a class="group relative" href="#adding-a-preprocessor">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Adding a preprocessor</a>
</h3>
<p>Let&rsquo;s create a preprocessor first <code>./plugins/preprocessors/add-enum-to-description.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#6272a4">//@ts-check
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span>module.exports <span style="color:#ff79c6">=</span> AddEnumToDescription;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">/** @type { import(&#39;@redocly/openapi-core/src/visitors&#39;).Oas3Preprocessor } */</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">function</span> AddEnumToDescription(options) {
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">const</span> vendorExtension <span style="color:#ff79c6">=</span> options.vendorExtension <span style="color:#ff79c6">||</span> <span style="color:#f1fa8c">&#39;x-enum&#39;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span> {
</span></span><span style="display:flex;"><span>    Schema(schema) {
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">if</span> (schema[vendorExtension]) {
</span></span><span style="display:flex;"><span>        schema.description <span style="color:#ff79c6">=</span> appendToDescription(schema[vendorExtension], schema.description);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd;font-style:italic">function</span> appendToDescription(values, description) {
</span></span><span style="display:flex;"><span>  <span style="color:#8be9fd;font-style:italic">let</span> additionalDescription <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">`Possible values: </span><span style="color:#f1fa8c">${</span>values.map(v =&gt; <span style="color:#f1fa8c">`\`</span><span style="color:#f1fa8c">${</span>v<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">\``</span>).join(<span style="color:#f1fa8c">&#39;, &#39;</span>)<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">if</span> (description) {
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> <span style="color:#f1fa8c">`</span><span style="color:#f1fa8c">${</span>description<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">\n\n</span><span style="color:#f1fa8c">${</span>additionalDescription<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">`</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">return</span> additionalDescription;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>What&rsquo;s happening here:</p>
<ul>
<li>We export a preprocessor function <code>AddEnumToDescription</code> that accepts configuration <code>options</code>:
<ul>
<li><code>vendorExtension</code> option is used to define extension name for extensible enumeration. If not provided, it equals to <code>x-enum</code>.</li>
</ul>
</li>
<li>All <code>openapi-cli</code> preprocessors should return a <em>visitor</em>. In our case, we specifically indicate to take into account only schema nodes.</li>
<li>If a schema has defined extensible enumeration property, we update its description with formatted list of values.</li>
</ul>
<div class="callout warning">
  <div class="callout-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg></div><p>Per documentation, for type support you can use <code>import('@redocly/openapi-cli').Oas3Preprocessor}</code>.  It never worked for me, so I use a &ldquo;full path&rdquo; <code>import('@redocly/openapi-core/src/visitors').Oas3Preprocessor</code>.</p></div>
<h3 id="enabling-our-preprocessor-via-custom-plugin" >
  <a class="group relative" href="#enabling-our-preprocessor-via-custom-plugin">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Enabling our preprocessor via custom plugin</a>
</h3>
<p>Let&rsquo;s keep our preprocessor (and the future ones) bundled inside one plugin via <code>./plugins/custom-preprocessors.js</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#6272a4">//@ts-check
</span></span></span><span style="display:flex;"><span><span style="color:#6272a4"></span><span style="color:#ff79c6">const</span> AddEnumToDescription <span style="color:#ff79c6">=</span> require(<span style="color:#f1fa8c">&#39;./preprocessors/add-enum-to-description&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> id <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;custom-preprocessors&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#6272a4">/** @type { import(&#39;@redocly/openapi-core/src/config/config&#39;).PreprocessorsConfig } */</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">const</span> preprocessors <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>  oas3<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#39;add-x-enum-to-description&#39;</span><span style="color:#ff79c6">:</span> AddEnumToDescription,
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>module.exports <span style="color:#ff79c6">=</span> {
</span></span><span style="display:flex;"><span>  id,
</span></span><span style="display:flex;"><span>  preprocessors,
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>Here we defined plugin&rsquo;s <code>id</code> and a mapping between preprocessor&rsquo;s name (<code>add-x-enum-to-description</code>) and its implementation.</p>
<p>Then we need to add this custom plugin to the <code>.redocly.yaml</code> and to enable the preprocessor:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">lint</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">plugins</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f1fa8c">&#39;./plugins/custom-preprocessors.js&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">preprocessors</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">custom-preprocessors/add-x-enum-to-description</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">vendorExtension</span>: x-aviskase-enum
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>The final result is in <a href="https://github.com/aviskase/openapi-cli-examples/tree/665492641fa119292d2ef7aa2c6bd4a87266ff9b" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">commit 6654926</a>.</p>
<h2 id="how-it-looks-in-the-docs" >
  <a class="group relative" href="#how-it-looks-in-the-docs">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>How it looks in the docs</a>
</h2>
<p>Now, when we render a reference documentation, we can see all values with simple markdown formatting.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2021/08/16/using-openapi-cli-custom-preprocessing/x_enum_render_hu_78bb03db39baa63b.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2021/08/16/using-openapi-cli-custom-preprocessing/x_enum_render.png" alt="Redoc with modified descriptions for extensible enumerations" defer>
	</picture>
	
</figure></p>
<div class="callout cta">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" /></svg></div><p>By the way, can you spot operations where we could have left normal <code>enum</code> and why?</p></div>
<h2 id="why-use-a-preprocessor-here" >
  <a class="group relative" href="#why-use-a-preprocessor-here">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Why use a preprocessor here?</a>
</h2>
<p>As mentioned before, preprocessors might be brittle. We could have used decorator instead. I&rsquo;ll show you the reason in the next article, but here is a sneak peek: we want to be able to <a href="https://www.aviskase.com/articles/2021/09/06/using-openapi-cli-custom-rules/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
"><em>lint</em> modified descriptions</a>!</p>
]]></content>
  </entry>
  <entry>
    <title>Using openapi-cli during API design: part two</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2021/03/23/using-openapi-cli-during-api-design-part-two/" hreflang="en"/>
    <published>2021-03-23T04:30:57Z</published>
    <updated>2021-03-23T04:30:57Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2021-03-23:/articles/2021/03/23/using-openapi-cli-during-api-design-part-two/</id>
    
    <summary type="html"><![CDATA[<p><a href="https://www.aviskase.com/articles/2021/01/31/using-openapi-cli-during-api-design-part-one/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">Part one</a> showed the basics of using <code>openapi-cli</code> for a single-definition project. Let&rsquo;s see how it works for multi-definition projects.</p>
<h2 id="multi-what" >
  <a class="group relative" href="#multi-what">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Multi-what?</a>
</h2>
<p>By multi-definition project I mean a project with several OpenAPI description documents. For example, it can be useful if you want to keep contracts for all services in one place. Then, you can reuse common schemas between definitions.</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://www.aviskase.com/articles/2021/01/31/using-openapi-cli-during-api-design-part-one/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">Part one</a> showed the basics of using <code>openapi-cli</code> for a single-definition project. Let&rsquo;s see how it works for multi-definition projects.</p>
<h2 id="multi-what" >
  <a class="group relative" href="#multi-what">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Multi-what?</a>
</h2>
<p>By multi-definition project I mean a project with several OpenAPI description documents. For example, it can be useful if you want to keep contracts for all services in one place. Then, you can reuse common schemas between definitions.</p>
<p>Another use case is keeping parts of your APIs hidden from the final description document (internal and external APIs). This approach will mostly work only if separation is on path-level (<a href="https://redoc.ly/docs/resources/hide-apis/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">see more here</a>).</p>
<h2 id="configuration" >
  <a class="group relative" href="#configuration">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Configuration</a>
</h2>
<p>In our small Stargate API example we are splitting gates and addresses APIs into two description docs (<a href="https://github.com/aviskase/openapi-cli-examples/commit/18f1bdb2de458859b93c1c99a6400567a2cb9442" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">commit</a>). Next step is to change <a href="https://redoc.ly/docs/cli/configuration/#apidefinitions" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">configuration file</a>, so that <code>openapi-cli</code> would know that we have two definitions (<a href="https://github.com/aviskase/openapi-cli-examples/commit/47c4a4947b9827509a02c52550f036a139dccf36" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">commit</a>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>apiDefinitions:
</span></span><span style="display:flex;"><span>  gates: openapi/gates.yaml
</span></span><span style="display:flex;"><span>  addresses: openapi/addresses.yaml
</span></span></code></pre></div><p>But now we need to fix our scripts in the <code>package.json</code> so that we could work with both definitions!</p>
<h2 id="preview" >
  <a class="group relative" href="#preview">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Preview</a>
</h2>
<p>If you simply run <code>openapi preview-docs</code> as we did before, it will start server only for the first definition in config file (in our case: gates).
To preview a specific definition, you need to pass a definition label from configuration file: <code>openapi preview-docs addresses</code>.</p>
<p>But what if we want to preview both definitions? The simple fix will be adding separate scripts to run each definition on different ports:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>&#34;scripts&#34;: {
</span></span><span style="display:flex;"><span>	&#34;preview:gates&#34;: &#34;openapi preview-docs -p 8080 gates&#34;,
</span></span><span style="display:flex;"><span>	&#34;preview:addresses&#34;: &#34;openapi preview-docs -p 8081 addresses&#34;,
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then, run both commands (either setting them to background processes or in the different terminals).</p>
<h2 id="linting" >
  <a class="group relative" href="#linting">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Linting</a>
</h2>
<p>Nothing to change here! <code>openapi lint</code> without any definition labels will check all of them.</p>
<h2 id="bundling" >
  <a class="group relative" href="#bundling">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Bundling</a>
</h2>
<p>Remember how we had to use <code>-o dist/openapi</code> to properly generate bundled desciption doc for single-definition project? Now we should simply leave it as <code>-o dist</code>. This will generate <code>dist/gates.yaml</code> and <code>dist/addresses.yaml</code> based on definitions labels.</p>
<h2 id="generating-reference-docs" >
  <a class="group relative" href="#generating-reference-docs">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Generating reference docs</a>
</h2>
<p>To generate static reference docs we should split <code>npm run docs</code> into separate scripts to target each definition:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>&#34;scripts&#34;: {
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>	&#34;docs:gates&#34;: &#34;node plugins/prepareOptions.js &amp;&amp; redoc-cli bundle dist/gates.yaml -o dist/redoc-gates.html --options .redoc.json&#34;,
</span></span><span style="display:flex;"><span>	&#34;docs:addresses&#34;: &#34;node plugins/prepareOptions.js &amp;&amp; redoc-cli bundle dist/addresses.yaml -o dist/redoc-addresses.html --options .redoc.json&#34;,
</span></span><span style="display:flex;"><span>	&#34;docs&#34;: &#34;npm run docs:gates &amp;&amp; npm run docs:addresses&#34;,
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There is no need to run <code>prepareOptions.js</code> twice, but I&rsquo;m keeping it in case I&rsquo;d want to generate only one reference doc.</p>
<hr>
<p>The final working <code>package.json</code> is <a href="https://github.com/aviskase/openapi-cli-examples/commit/48599bdfa3322e2976329e62ea2a094be4be8bd4" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">here</a>. As you can see, we have to manually manage some building processes, but the most important pieces (linting &amp; bundling) are quite transparent.</p>
<p>In the next article we&rsquo;re gonna finally see juicy linting magic!</p>
]]></content>
  </entry>
  <entry>
    <title>Using openapi-cli during API design: part one</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2021/01/31/using-openapi-cli-during-api-design-part-one/" hreflang="en"/>
    <published>2021-02-01T01:57:57Z</published>
    <updated>2021-02-01T01:57:57Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2021-02-01:/articles/2021/01/31/using-openapi-cli-during-api-design-part-one/</id>
    
    <summary type="html"><![CDATA[<p>Obviously, API design is much more than writing OpenAPI description doc. First of all, should it even be OpenAPI-based? If yes, using <code>openapi-cli</code> will make your life a bit easier.</p>
<h2 id="example-api" >
  <a class="group relative" href="#example-api">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Example API</a>
</h2>
<p>Let&rsquo;s imagine you&rsquo;ve been asked to create an API for <a href="https://stargate.fandom.com/wiki/Stargate_Network" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Stargate Network</a> and you already did some <a href="https://tyk.io/api-design-methodologies/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">preliminary analysis</a>.</p>]]></summary>
    <content type="html"><![CDATA[<p>Obviously, API design is much more than writing OpenAPI description doc. First of all, should it even be OpenAPI-based? If yes, using <code>openapi-cli</code> will make your life a bit easier.</p>
<h2 id="example-api" >
  <a class="group relative" href="#example-api">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Example API</a>
</h2>
<p>Let&rsquo;s imagine you&rsquo;ve been asked to create an API for <a href="https://stargate.fandom.com/wiki/Stargate_Network" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Stargate Network</a> and you already did some <a href="https://tyk.io/api-design-methodologies/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">preliminary analysis</a>.</p>
<p>Stargate network consists of points in space identifiable via special addresses. When you dial an address (like a phone number), a wormhole is established between your gate and a gate at the address. Gates are physical objects, so they can be destroyed or moved to another address.</p>
<p>First, resources:</p>
<ul>
<li>Address
<ul>
<li>Id</li>
<li>Is the address accessible? Can we dial it?</li>
<li>last known position in human terms (some addresses aren&rsquo;t fixed points in space)</li>
<li>Symbols used to dial it
<ul>
<li>in galaxy and out of galaxy addresses</li>
<li>unique address if it assigned to the gate</li>
</ul>
</li>
<li>Available gates at this address</li>
</ul>
</li>
<li>Stargate
<ul>
<li>Id</li>
<li>Environment: is it located above the surface, underwater, on the surface, or inside the ship?</li>
<li>State: is the gate functional, destroyed, or buried?</li>
<li>Address id</li>
</ul>
</li>
</ul>
<p>Next, operations. Nothing fancy, the bare minimum:</p>
<ul>
<li>List all addresses</li>
<li>Get address info</li>
<li>Add new gate info</li>
<li>Get gate info</li>
<li>Update gate info</li>
</ul>
<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>Don&rsquo;t forget, not all APIs should be OpenAPI-based. If I needed to design a real Stargate system, I would go with a combo of something like GraphQL for lookup and event-based APIs for anything else (perhaps described with AsyncAPI).</p></div>
<p>Let&rsquo;s create a place to store our OpenAPI description doc: YAML-based, multi-file git repo. You can read more about <a href="https://redoc.ly/docs/resources/openapi-decisions/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">why&rsquo;s in the Redocly docs</a>.</p>
<p><a href="https://github.com/aviskase/openapi-cli-examples" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The example repo is on the GitHub</a>. At each step of the tutorial you&rsquo;ll see links to commits as <code>Commit &lt;commit_hash&gt;.</code></p>
<h2 id="repository-structure" >
  <a class="group relative" href="#repository-structure">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Repository structure</a>
</h2>
<p>We&rsquo;re gonna use <a href="https://github.com/Redocly/create-openapi-repo" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]"><code>create-openapi-repo</code></a> to generate the initial structure and then tweak it a bit. Run <code>npx create-openapi-repo</code> inside a directory where you want to generate API structure. One caveat to keep in mind: this tool will attempt to initialize a git repository and make a commit. <a href="https://github.com/aviskase/openapi-cli-examples/tree/e5b40a5d3474eec48e236d170c15ee6faf37f631" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Commit e5b40a5</a>.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2021/01/31/using-openapi-cli-during-api-design-part-one/initRepo_hu_7e93f6a1a355bc56.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2021/01/31/using-openapi-cli-during-api-design-part-one/initRepo.png" alt="Output of create-openapi-repo tool" defer>
	</picture>
	
</figure></p>
<p>Let&rsquo;s explore the generated files:</p>
<ul>
<li><code>docs</code> directory contains HTML template for reference doc. I&rsquo;m deleting it, because I don&rsquo;t need any custom template at the moment.</li>
<li><code>.gitignore</code> set up to ignore our beloved <code>node_modules</code> and <code>dist</code> directory used for generating the final OpenAPI description doc.</li>
<li><code>.redocly.yaml</code> is a configuration file for <code>openapi-cli</code>. Because I removed <code>docs</code> directory, I also need to remove <code>referenceDocs.htmlTemplate</code> option here.</li>
<li>Don&rsquo;t forget to update the <code>LICENSE</code>.</li>
<li><code>package.json</code> set up with the most common actions.</li>
<li>Take your time to read <code>README.md</code>. It explains what actions are available and provides a sample contribution guidelines. In the real project, you probably don&rsquo;t want to have <em>all guidelines</em> there in one file.</li>
<li>And last, but not least, <code>openapi</code> directory. This is where your API definitions live. Almost all subdirectories have a relevant <code>README.md</code> explaining why these particular files were created as well as showing you other alternatives. I don&rsquo;t want to copy-paste them here, so, go ahead and explore ;)</li>
</ul>
<p>Now, let&rsquo;s rewind the time. Stargate Network API contract is defined, <a href="https://github.com/aviskase/openapi-cli-examples/tree/c2b8d1172129e00903d3d1bd4cbb90f2bf03b51f" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">commit c2b8d11</a>. For more information about keeping your structure <em>DRY</em> read <a href="https://mux.com/blog/an-adventure-in-openapi-v3-api-code-generation/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">this</a> and <a href="https://stoplight.io/blog/keeping-openapi-dry-and-portable/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">this</a>. If you&rsquo;re interested in reading/watching about it from me, just ping!</p>
<div class="callout warning">
  <div class="callout-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg></div><p>The definitions are not state of art, even for this shallow design. Some problems with it were added consciously to simplify the example, others for fixing in later articles.</p>
<p>And I&rsquo;m not even talking about how many details are omitted lore-wise!</p></div>
<h2 id="preview" >
  <a class="group relative" href="#preview">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Preview</a>
</h2>
<p>In the <code>package.json</code> file there is already an action for previewing the docs: <code>openapi preview-docs</code>. To execute it, run in the terminal <code>npm run start</code>.</p>
<p>This starts a server with the generated Redoc reference documentation (<a href="https://redoc.ly/docs/cli/commands/#preview-docs" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">docs</a>). It watches changes from the disk; usually I keep it running while writing definitions and use it like a UI of <a href="https://stoplight.io/studio/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Stoplight Studio</a> or <a href="https://insomnia.rest/products/designer/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Insomnia Designer</a>.</p>
<p>As you may (or may not) know, you can customize how Redoc looks like. This is done with<code>referenceDocs</code> section in <code>.redocly.yaml</code> (<a href="https://redoc.ly/docs/cli/configuration/reference-docs/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">docs</a>). Beware, some options are available only for premium edition.</p>
<p>Options can be divided into two categories: those that affect a theme (colors, fonts) and those for disabling or enabling certain features. For example, <code>requiredPropsFirst: true</code> will display required properties before others:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2021/01/31/using-openapi-cli-during-api-design-part-one/requiredProps_hu_6b261e2f49bb40f9.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2021/01/31/using-openapi-cli-during-api-design-part-one/requiredProps.png" alt="Comparison of property display with requiredPropsFirst equal to false or true" defer>
	</picture>
	
</figure></p>
<p>See <a href="https://github.com/aviskase/openapi-cli-examples/tree/c873f1593825256a58991e71cc9ec968d892c3b5" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">at commit c873f15</a>.</p>
<h2 id="linting" >
  <a class="group relative" href="#linting">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Linting</a>
</h2>
<p>From time to time you should lint with <code>openapi lint</code> (<a href="https://redoc.ly/docs/cli/commands/#lint" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">docs</a>). Let&rsquo;s execute <code>npm run test</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>➜ npm run test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; stargate-network@1.0.0 test /home/aviskase/Projects/openapi-cli-examples
</span></span><span style="display:flex;"><span>&gt; openapi lint
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>validating /home/aviskase/Projects/openapi-cli-examples/openapi/openapi.yaml...
</span></span><span style="display:flex;"><span>[1] openapi/openapi.yaml:1:1 at #/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Servers must be present.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> 1 | openapi: 3.0.3
</span></span><span style="display:flex;"><span> 2 | info:
</span></span><span style="display:flex;"><span> … | &lt; 30 more lines &gt;
</span></span><span style="display:flex;"><span>33 |       $ref: components/securitySchemes/api_key.yaml
</span></span><span style="display:flex;"><span>34 |
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Error was generated by the no-empty-servers rule.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>/home/aviskase/Projects/openapi-cli-examples/openapi/openapi.yaml: validated in 27ms
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>❌ Validation failed with 1 error.
</span></span><span style="display:flex;"><span>run with `--generate-ignore-file` to add all problems to ignore file.
</span></span></code></pre></div><p>Oops! We have an error! Wait a second, <a href="https://redoc.ly/docs/cli/built-in-rules/#no-empty-servers" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]"><code>no-empty-servers</code></a> rule complains that we must have <code>servers</code> defined. But <a href="http://spec.openapis.org/oas/v3.0.3.html#openapi-object" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenAPI specification doesn&rsquo;t state this as a required field</a>, so our description doc is valid. Where does this error come from?</p>
<p>When <code>.redocly.yaml</code> was generated, it included <code>lint</code> section:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>lint:
</span></span><span style="display:flex;"><span>  extends:
</span></span><span style="display:flex;"><span>    - recommended
</span></span><span style="display:flex;"><span>  rules:
</span></span><span style="display:flex;"><span>    no-unused-components: warning
</span></span></code></pre></div><p>The <code>no-empty-servers</code> comes from extending recommended set of rules. If it&rsquo;s too strict, you may want to change to <code>minimal</code>. Or change it to <code>all</code> to get even more errors.</p>
<p>I prefer keeping recommended rules and explicitly disabling unneeded ones. <a href="https://redoc.ly/docs/cli/configuration/lint/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Per docs</a> you need to set <code>no-empty-servers: off</code> in <code>rules</code> section, <a href="https://github.com/aviskase/openapi-cli-examples/tree/ee2e3ffb2009deefb69d75dd14febbbb90192148" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">commit ee2e3ff</a>. Or you can change severity to <code>warning</code>.</p>
<p>You can read more about other built-in rules <a href="https://redoc.ly/docs/cli/built-in-rules/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">in the docs</a>. In the later article I&rsquo;ll show how to add your own custom rules.</p>
<h2 id="bundling" >
  <a class="group relative" href="#bundling">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Bundling</a>
</h2>
<p>Most of the tools require single-file OpenAPI doc. That&rsquo;s where bundling comes in. The <code>package.json</code>  is preconfigured with the script to run <code>openapi bundle -o dist</code> which will save a generated file to the <code>dist</code> directory. Usually it&rsquo;s enough, but in some cases you may want to run with <code>--derefenreced</code> flag to produce a file with internally inlined definitions (<a href="https://redoc.ly/docs/cli/commands/#bundle" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">docs</a>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>➜ npm run build
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&gt; stargate-network@1.0.0 build /home/aviskase/Projects/openapi-cli-examples
</span></span><span style="display:flex;"><span>&gt; openapi bundle -o dist
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bundling /home/aviskase/Projects/openapi-cli-examples/openapi/openapi.yaml...
</span></span><span style="display:flex;"><span>📦 Created a bundle for /home/aviskase/Projects/openapi-cli-examples/openapi/openapi.yaml at dist.yaml 28ms.
</span></span></code></pre></div><p>Hmm, what just happened? Instead of <code>./dist/&lt;filename&gt;.yaml</code> we&rsquo;ve got <code>./dist.yaml</code>. Why?</p>
<p>Well, this is kinda bug or feature situation. If you <a href="https://github.com/Redocly/openapi-cli/blob/8eeab11ca73902a0e7dcee2375981119f65eb4eb/packages/cli/src/utils.ts#L234" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">check the code</a>, this looks like an intended behavior, but nevertheless confusing. In short, if you have <strong>only one</strong> API definition, <code>-o</code> seems to be expecting file path. If you have <strong>multiple</strong> API definitions (more about that in the upcoming part two), this option can point to directory.</p>
<p>In our example we have one API definition, so to fix we should change the script either to <code>-o dist/openapi</code> or to <code>-o dist/openapi.yaml</code>. Both will work the same, as long as <code>--ext</code> equals to <code>yaml</code> by default. If you want to generate file in JSON format, you can use <code>-o dist/openapi --ext json</code> or  <code>-o dist/openapi.json</code>. If you want both formats, you need to run commands separately, see <a href="https://github.com/aviskase/openapi-cli-examples/tree/a4e1e234dc5fd11741c3f09564a8c5ee0932c098" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">at commit a4e1e23</a>.</p>
<h2 id="generating-reference-doc" >
  <a class="group relative" href="#generating-reference-doc">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Generating reference doc</a>
</h2>
<p>One of the features that <a href="https://github.com/Redocly/openapi-cli/issues/133" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]"><code>openapi-cli</code> doesn&rsquo;t have</a>, but I need all the time is to generate static Redoc html file. Yes, you&rsquo;d want to invest in better solutions and processes at some point, but at smaller scale it&rsquo;s ok to send a simple HTML file when someone from non-dev team wants to see the latest or prototype API thingy.</p>
<p>First, we need to install <code>redoc-cli</code> via <code>npm i redoc-cli</code>. Then, add a new script to <code>package.json</code> to generate an HTML file inside <code>dist</code> directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>&#34;docs&#34;: &#34;redoc-cli bundle dist/openapi.yaml -o dist/redoc.html&#34;
</span></span></code></pre></div><p>After running <code>npm run docs</code> and opening the generated file you&rsquo;ll notice that all our custom options are gone. You see, <code>redoc-cli</code> doesn&rsquo;t support <code>.redocly.yaml</code> configuration file. To fix this, add <a href="https://github.com/aviskase/openapi-cli-examples/blob/ad6dacc3464a5800c408ce53aaa5f23bb701600a/plugins/prepareOptions.js" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]"><code>prepareOptions.js</code></a> which reads <code>referenceDocs</code> from <code>.redocly.yaml</code> and saves it to <code>.redoc.json</code> Next, modify <code>docs</code> script to run preparation script and use <code>.redoc.json</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>&#34;docs&#34;: &#34;node plugins/prepareOptions.js &amp;&amp; redoc-cli bundle dist/openapi.yaml -o dist/redoc.html --options .redoc.json&#34;
</span></span></code></pre></div><p>See <a href="https://github.com/aviskase/openapi-cli-examples/tree/ad6dacc3464a5800c408ce53aaa5f23bb701600a" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">at commit ad6dacc</a>.</p>
<h2 id="imho" >
  <a class="group relative" href="#imho">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>IMHO</a>
</h2>
<p>Personally, I prefer different names for scripts:</p>
<ul>
<li><code>preview</code> instead of <code>start</code></li>
<li><code>lint</code> instead of <code>test</code></li>
<li><code>bundle</code> instead of <code>build</code></li>
<li><code>build</code> for <code>npm run lint &amp;&amp; npm run bundle &amp;&amp; npm run docs</code></li>
</ul>
<p>Then, all I do is jump between <code>npm run preview</code> and <code>npm run build</code>.</p>
<p>See <a href="https://github.com/aviskase/openapi-cli-examples/tree/51c078e4913cae9f1a323e2a8be625287e343dd2" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">at commit 51c078e</a>.</p>
<hr>
<p>That&rsquo;s it for today. In the <a href="https://www.aviskase.com/articles/2021/03/23/using-openapi-cli-during-api-design-part-two/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">part two</a>, I&rsquo;ll show how to manage multiple definitions per repository.</p>
]]></content>
  </entry>
  <entry>
    <title>Using openapi-cli for API exploration</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2021/01/10/using-openapi-cli-for-api-exploration/" hreflang="en"/>
    <published>2021-01-10T19:28:31Z</published>
    <updated>2021-01-10T19:28:31Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2021-01-10:/articles/2021/01/10/using-openapi-cli-for-api-exploration/</id>
    
    <summary type="html"><![CDATA[<p><a href="https://www.aviskase.com/articles/2020/12/20/using-openapi-cli-intro/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">As promised</a>, let&rsquo;s dive into the usage of <code>openapi-cli</code>. The first topic is semi-non-technical: API exploration. You might be interested if:</p>
<ul>
<li>you&rsquo;re a tech writer</li>
<li>you&rsquo;re a tester</li>
<li>you don&rsquo;t know what the heck API exploration is</li>
</ul>
<h2 id="what-is-api-exploration" >
  <a class="group relative" href="#what-is-api-exploration">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>What is API exploration</a>
</h2>
<p>I use this term akin to <em>exploratory testing</em>. You can search for works of Cem Kaner, James Bach, Michael Bolton, Elisabeth Hendrickson, James Whittaker, but beware, that&rsquo;s a nice little serpentarium of a field.</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://www.aviskase.com/articles/2020/12/20/using-openapi-cli-intro/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">As promised</a>, let&rsquo;s dive into the usage of <code>openapi-cli</code>. The first topic is semi-non-technical: API exploration. You might be interested if:</p>
<ul>
<li>you&rsquo;re a tech writer</li>
<li>you&rsquo;re a tester</li>
<li>you don&rsquo;t know what the heck API exploration is</li>
</ul>
<h2 id="what-is-api-exploration" >
  <a class="group relative" href="#what-is-api-exploration">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>What is API exploration</a>
</h2>
<p>I use this term akin to <em>exploratory testing</em>. You can search for works of Cem Kaner, James Bach, Michael Bolton, Elisabeth Hendrickson, James Whittaker, but beware, that&rsquo;s a nice little serpentarium of a field.</p>
<p>In the simplest words, it is a process of learning something about API I don&rsquo;t know or have a limited information about. That&rsquo;s it. The main contexts for this activity are:</p>
<ul>
<li><strong>Necessity</strong>. I want to use some API.</li>
<li><strong>Curiosity</strong>. Just looking at how other APIs are done.</li>
<li><strong>Assessment</strong>. I need to check APIs for certain characteristics.</li>
</ul>
<p>There are many ways to perform exploration, countless tools and sources to use. In this article I&rsquo;ll be looking only at OpenAPI description documents, because that&rsquo;s where <code>openapi-cli</code> comes handy.</p>
<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>When exploring unknown APIs, I run a globally installed package: <code>npm i -g @redocly/openapi-cli</code>. Then it is accessible in the terminal as <code>openapi &lt;args&gt;</code>.</p></div>
<h2 id="openapi-stats" >
  <a class="group relative" href="#openapi-stats">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span><code>openapi stats</code></a>
</h2>
<p>Gathers some basic statistics for an OpenAPI description document. Can be in &ldquo;stylish&rdquo; format (as in the example below) or in JSON.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>➜ openapi stats http://localhost:8888/api/v1/swagger.json
</span></span><span style="display:flex;"><span>Document: http://localhost:8888/api/v1/swagger.json stats:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>🚗 References: 12 
</span></span><span style="display:flex;"><span>📦 External Documents: 0 
</span></span><span style="display:flex;"><span>📈 Schemas: 12 
</span></span><span style="display:flex;"><span>👉 Parameters: 9 
</span></span><span style="display:flex;"><span>🔗 Links: 0 
</span></span><span style="display:flex;"><span>➡️ Path Items: 4 
</span></span><span style="display:flex;"><span>👷 Operations: 7 
</span></span><span style="display:flex;"><span>🔖 Tags: 1 
</span></span></code></pre></div><p>Nothing useful for me at the moment. The only use case that comes to mind is when you have a bunch of documents for an <strong>assessment</strong> and you&rsquo;re not sure where to start. Then, you can check stats for each doc and proceed with the smallest one.</p>
<h2 id="openapi-preview-docs" >
  <a class="group relative" href="#openapi-preview-docs">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span><code>openapi preview-docs</code></a>
</h2>
<p>This command is the primary reason I have <code>openapi-cli</code> installed as a global package: I use it all the time. The command accepts path or link to the existing OpenAPI description document and starts a local HTTP server with the generated Redoc reference doc.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>➜ openapi preview-docs  http://localhost/api/v1/swagger.json
</span></span><span style="display:flex;"><span>Using Redoc community edition.
</span></span><span style="display:flex;"><span>Login with openapi-cli login or use an enterprise license key to preview with the premium docs.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>🔎  Preview server running at http://127.0.0.1:8080
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>👀  Watching http://localhost/api/v1/swagger.json and all related resources for changes
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Bundling...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Created a bundle for http://localhost/api/v1/swagger.json successfully
</span></span></code></pre></div><p>Why you&rsquo;d want that?</p>
<p>First, sometimes there is just an OpenAPI description document and nothing else. No documentation whatsoever. Rare, but I do stumble upon this with internal APIs.</p>
<p>The second reason is when there are some reference docs, but they don&rsquo;t fit you.</p>
<p>For example, it&rsquo;s a SwaggerUI, and you don&rsquo;t like it, or the description doc has advanced features like <code>oneOf</code> or <code>discriminator</code>. In such case, SwaggerUI cannot generate fancy form-based presentation, so you have to read bare model definitions.</p>
<p>Or perhaps you have special needs. Lorna Jane Mitchell in her presentation on <a href="https://lornajane.net/resource/delightful-sdks-with-openapi" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Delightful SDKs</a> mentions that she often generates her own local reference docs because official documentations aren&rsquo;t <em>accessible</em>. AFAIK, she uses Redoc and made several pull requests specifically for better accessibility support.</p>
<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>You can generate reference docs with <a href="https://www.npmjs.com/package/redoc-cli" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]"><code>redoc-cli</code></a>, but I prefer using <code>openapi-cli</code> as a one-stop shop. The difference is when you want to generate static HTML with your theme: right now you have to use a small hack <a href="https://github.com/Redocly/openapi-cli/issues/133" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">from this issue</a>.</p></div>
<h2 id="openapi-split" >
  <a class="group relative" href="#openapi-split">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span><code>openapi split</code></a>
</h2>
<p>Reading a big OpenAPI description doc is cumbersome. Especially when you need to jump back and forth between references.</p>
<p>Split for the rescue! It&rsquo;s an opposite of the <a href="https://www.aviskase.com/articles/2020/12/07/crash-course-into-api-related-terminology/#ref" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">bundling operation</a> and separates references into several files. Though, it&rsquo;s a bit smarter; for example, it splits paths into separate files too.</p>
<div class="callout warning">
  <div class="callout-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg></div><p>This command doesn&rsquo;t support OpenAPI 2.</p></div>
<p>Let&rsquo;s split a description doc into <code>out</code> directory: <code>openapi split --outDir out openapi.json</code>. Here is a sample result:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>~/out 
</span></span><span style="display:flex;"><span>➜ tree
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── components
</span></span><span style="display:flex;"><span>│   ├── parameters
</span></span><span style="display:flex;"><span>│   │   ├── pageNumber.yaml
</span></span><span style="display:flex;"><span>│   │   ├── pageSize.yaml
</span></span><span style="display:flex;"><span>│   │   └── resourceId.yaml
</span></span><span style="display:flex;"><span>│   ├── requestBodies
</span></span><span style="display:flex;"><span>│   │   ├── User.yaml
</span></span><span style="display:flex;"><span>│   ├── responses
</span></span><span style="display:flex;"><span>│   │   ├── Error.yaml
</span></span><span style="display:flex;"><span>│   │   ├── Forbidden.yaml
</span></span><span style="display:flex;"><span>│   │   ├── Ok.yaml
</span></span><span style="display:flex;"><span>│   │   └── Unauthorized.yaml
</span></span><span style="display:flex;"><span>│   └── schemas
</span></span><span style="display:flex;"><span>│       ├── Id.yaml
</span></span><span style="display:flex;"><span>│       ├── ResourceId.yaml
</span></span><span style="display:flex;"><span>│       ├── UserCollection.yaml
</span></span><span style="display:flex;"><span>│       └── User.yaml
</span></span><span style="display:flex;"><span>├── openapi.yaml
</span></span><span style="display:flex;"><span>└── paths
</span></span><span style="display:flex;"><span>    ├── users@{id}.yaml
</span></span><span style="display:flex;"><span>    └── users.yaml
</span></span></code></pre></div><p>Another reason to use split is when you&rsquo;re not just exploring API, but you plan to work on it. For example, when you&rsquo;re switching from annotations-driven to handcrafted approach; <em>split creates a good starting point for refactoring</em>.</p>
<h2 id="openapi-lint" >
  <a class="group relative" href="#openapi-lint">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span><code>openapi lint</code></a>
</h2>
<p>You may want to do <a href="https://www.aviskase.com/articles/2020/12/07/crash-course-into-api-related-terminology/#description-doc-validation-vs-linting-vs-preprocessing" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">linting</a> in <strong>assessment</strong> or <strong>curiosity</strong> contexts:</p>
<ul>
<li>Assessment:
<ul>
<li>Is this old API at least valid per OpenAPI standard or it&rsquo;s complete garbage?</li>
<li>We came up with new API guidelines. Do our existing APIs conform to it? How many don&rsquo;t?</li>
</ul>
</li>
<li>Curiosity:
<ul>
<li>I wonder how many APIs out there follow this rule? Is it common and should we apply it in our API?</li>
</ul>
</li>
</ul>
<p>As you can see, the biggest benefits of <code>openapi lint</code> come when you use custom rules and configurations. This topic I&rsquo;ll be covering in later articles, stay tuned.</p>
<hr>
<p>If you want to read more about OpenAPI-based API exploration, I recommend <a href="https://apihandyman.io/api-toolbox-jq-and-openapi-part-1-using-jq-to-extract-data-from-openapi-files/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Arnaud Lauret&rsquo;s series of articles about <code>jq</code></a>.</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: 2020</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/12/30/hmms-2020/" hreflang="en"/>
    <published>2020-12-30T14:35:16Z</published>
    <updated>2020-12-30T14:35:16Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-12-30:/articles/2020/12/30/hmms-2020/</id>
    
    <summary type="html"><![CDATA[<p>Usually it&rsquo;s monthly collection of things that got me <del>thinking</del> hmming. But this is the end of the year, let&rsquo;s do a little retrospective.</p>
<h2 id="retro" >
  <a class="group relative" href="#retro">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Retro</a>
</h2>
<p>What happened this year:</p>
<ul>
<li>My title switched <a href="https://www.aviskase.com/articles/2020/08/04/hmms-july/#no-longer-a-tester" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">from &ldquo;tester&rdquo; to &ldquo;engineer&rdquo;</a>. Yay?</li>
<li><a href="https://www.aviskase.com/articles/2020/09/15/conference-notes-asc-2020/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">Had a great time at ASC 2020 conference</a>. Yes, it&rsquo;s not my first conference, but this one left a good long-lasting aftertaste.</li>
<li>I ported blog <a href="https://www.aviskase.com/articles/2020/10/04/from-pelican-to-hugo/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">from pelican to hugo</a> and <a href="https://www.aviskase.com/articles/2020/10/18/blog-redesign-phase-1/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">started a redesign</a>. Still much to do and polish, but at least the base is sound.</li>
<li><a href="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">Joined Obsidian community</a>.</li>
<li>As a consequence, I <strong>unwillingly</strong> created <a href="https://www.aviskase.com/articles/2020/11/03/hmms-october/#hi-youtube" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">a YouTube channel in Russian</a>. It&rsquo;s cool to learn new skills (audio cleaning, video editing), but to be honest, content creation in Russian isn&rsquo;t exactly a lucrative or professionally valuable hobby. Still, I cannot say no to people asking to teach or explain something: knowledge sharing is one of the biggest values to me.</li>
<li>Finished Finnish tree on Duolingo. Don&rsquo;t ask why, I, person living in Quebec, learn Finnish. I just want to! <em>Se on täydellinen kieli</em>.</li>
</ul>
<p>What didn&rsquo;t happen:</p>]]></summary>
    <content type="html"><![CDATA[<p>Usually it&rsquo;s monthly collection of things that got me <del>thinking</del> hmming. But this is the end of the year, let&rsquo;s do a little retrospective.</p>
<h2 id="retro" >
  <a class="group relative" href="#retro">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Retro</a>
</h2>
<p>What happened this year:</p>
<ul>
<li>My title switched <a href="https://www.aviskase.com/articles/2020/08/04/hmms-july/#no-longer-a-tester" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">from &ldquo;tester&rdquo; to &ldquo;engineer&rdquo;</a>. Yay?</li>
<li><a href="https://www.aviskase.com/articles/2020/09/15/conference-notes-asc-2020/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">Had a great time at ASC 2020 conference</a>. Yes, it&rsquo;s not my first conference, but this one left a good long-lasting aftertaste.</li>
<li>I ported blog <a href="https://www.aviskase.com/articles/2020/10/04/from-pelican-to-hugo/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">from pelican to hugo</a> and <a href="https://www.aviskase.com/articles/2020/10/18/blog-redesign-phase-1/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">started a redesign</a>. Still much to do and polish, but at least the base is sound.</li>
<li><a href="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">Joined Obsidian community</a>.</li>
<li>As a consequence, I <strong>unwillingly</strong> created <a href="https://www.aviskase.com/articles/2020/11/03/hmms-october/#hi-youtube" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">a YouTube channel in Russian</a>. It&rsquo;s cool to learn new skills (audio cleaning, video editing), but to be honest, content creation in Russian isn&rsquo;t exactly a lucrative or professionally valuable hobby. Still, I cannot say no to people asking to teach or explain something: knowledge sharing is one of the biggest values to me.</li>
<li>Finished Finnish tree on Duolingo. Don&rsquo;t ask why, I, person living in Quebec, learn Finnish. I just want to! <em>Se on täydellinen kieli</em>.</li>
</ul>
<p>What didn&rsquo;t happen:</p>
<ul>
<li><a href="https://www.aviskase.com/articles/2020/06/02/hmms-may/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">Bought a graphic tablet</a> but didn&rsquo;t do any drawing lessons. Though, I do use it for YouTube.</li>
<li>The guitar is collecting dust <em>again</em>.</li>
<li>Didn&rsquo;t go to Kazakhstan.</li>
</ul>
<p>2020 taught many not to make plans, good thing I never was much of the &ldquo;goals&rdquo; person anyway. Still, here are my themes for 2021:</p>
<ul>
<li>At least once be a conference speaker or <a href="https://www.aviskase.com/articles/2020/05/02/hmms-april/#fam0us" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">a podcast guest</a>.</li>
<li>Content creation: stable every other week, either this blog or Russian YouTube channel (or maybe English?). Concentrate more on tutorials.</li>
<li>Guitar. Must. Be. Conquered. To make the promise more realistic, I hereby vow to start daily lessons as soon as I finish levelling <a href="https://www.aviskase.com/articles/2020/02/01/hmms-january/#gaming" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">my main in ESO to CP 810</a> (yup, I&rsquo;m still playing it).</li>
<li>Begin drawing lessons in the 2nd half of the year. Luckily, there was <a href="https://habr.com/ru/post/534538/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a great post on Habr</a> about it.</li>
</ul>
<p>You may notice almost an absence of professional goals. Typical end-of-year posts often contain promises to read more or learn new professional skills/tools. But my to-read/to-watch/to-learn queue is on the opposite side: it must be scaled down occasionally; I&rsquo;m definitely not one of those people who seems to have an endless fountain of energy to do everything (aksi, talking about ya here).</p>
<h2 id="advent-of-code" >
  <a class="group relative" href="#advent-of-code">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Advent of code</a>
</h2>
<p>This was the first time I did <a href="https://adventofcode.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Advent of code</a> with the devs from work: nice to compare with normal people and not <em>reddit stars</em>. Cannot express how happy I&rsquo;m to be <a href="https://github.com/aviskase/advent-of-code/tree/master/2020" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">back to Python</a>, it&rsquo;s so readable and clear after JS/TS madness.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/12/30/hmms-2020/aoc_hu_85d3b8f2d942191e.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/12/30/hmms-2020/aoc.png" alt="Advent of Code easter egg: using itertools" defer>
	</picture>
	
</figure></p>
]]></content>
  </entry>
  <entry>
    <title>Using openapi-cli: intro</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/12/20/using-openapi-cli-intro/" hreflang="en"/>
    <published>2020-12-21T03:26:21Z</published>
    <updated>2020-12-21T03:26:21Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-12-21:/articles/2020/12/20/using-openapi-cli-intro/</id>
    
    <summary type="html"><![CDATA[<p>Before we jump into the usage of this mysterious tool with way too generic name, let me give you an introduction.</p>
<p>There are many tools for supporting API design via OpenAPI description documents. You can check <a href="https://openapi.tools/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the list here</a>.</p>
<p>The most common tasks are:</p>]]></summary>
    <content type="html"><![CDATA[<p>Before we jump into the usage of this mysterious tool with way too generic name, let me give you an introduction.</p>
<p>There are many tools for supporting API design via OpenAPI description documents. You can check <a href="https://openapi.tools/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the list here</a>.</p>
<p>The most common tasks are:</p>
<ul>
<li>dereferencing</li>
<li>linting</li>
<li>reference documentation preview and/or generation</li>
</ul>
<p>I talked about dereferencing <a href="https://www.aviskase.com/articles/2020/12/07/crash-course-into-api-related-terminology/#ref" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">not long ago</a>. In short, it&rsquo;s needed to produce a final OpenAPI description doc from more DRY and granular schemas. You can <a href="https://stoplight.io/blog/keeping-openapi-dry-and-portable/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">read more about the process here</a>. One of the tools that can help you is <a href="https://github.com/APIDevTools/json-schema-ref-parser" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]"><code>json-schema-ref-parser</code></a>.</p>
<p><a href="https://www.aviskase.com/articles/2020/12/07/crash-course-into-api-related-terminology/#description-doc-validation-vs-linting-vs-preprocessing" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">Linting</a> is used to check OpenAPI description doc for errors and style guide violations. <a href="https://stoplight.io/spectral" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Spectral</a> comes to mind; Arnaud Lauret has a great talk about <a href="https://apihandyman.io/the-augmented-api-design-reviewer/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">using it for design reviews</a>.</p>
<p><a href="https://swagger.io/tools/swagger-ui/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">SwaggerUI</a> is the most common choice for reference documentation generation. If you need something more aesthetically pleasing you can try <a href="https://redoc.ly/redoc" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Redoc</a> or <a href="https://mrin9.github.io/RapiDoc/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">RapiDoc</a>.</p>
<p>But there is a tool that combines all of these and more: welcome to <code>openapi-cli</code> (<a href="https://github.com/Redocly/openapi-cli" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">GitHub</a>, <a href="https://redoc.ly/openapi-cli" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">docs</a>). It supports both OpenAPI 2 (fka Swagger) and OpenAPI 3; support for 3.1 is coming soon. At the time of the writing, the tool&rsquo;s version 1 is still in beta phase, so keep it in mind. But I&rsquo;m fairly confident in using it anyway. Why? Two reasons.</p>
<p>First of all, it&rsquo;s developed by the same team as the famous Redoc, so you already know how reference docs look like =) Redoc <em>is</em> famous. You cannot read a book or attend a conference without seeing it mentioned by someone. A lot of people use it, so it would make sense for a <code>openapi-cli</code> to be developed further.</p>
<p>The second reason is stated on the team&rsquo;s site: <em>&ldquo;built because we needed it&rdquo;</em>. All tools developed by Redocly are used in the other company of its founder, Adam Altman, <a href="https://www.rebilly.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Rebilly</a>. These tools weren&rsquo;t created in vacuum; they are constantly dogfooded by the developers whose <em>primary business is making good APIs</em>. By the way, check their <a href="https://github.com/Rebilly/api-definitions" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">api definitions</a> for an inspiration on how to structure description doc development.</p>
<p>So, in this series of articles I&rsquo;m gonna write about my experience of using <code>openapi-cli</code>.</p>
<p>We gonna go through themes:</p>
<ul>
<li><a href="https://www.aviskase.com/articles/2021/01/10/using-openapi-cli-for-api-exploration/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">using <code>openapi-cli</code> for API exploration</a></li>
<li>basic API doc structuring and preparation (dereferencing, previewing, linting, handing off results) (<a href="https://www.aviskase.com/articles/2021/01/31/using-openapi-cli-during-api-design-part-one/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">part 1</a> &amp; <a href="https://www.aviskase.com/articles/2021/03/23/using-openapi-cli-during-api-design-part-two/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">part 2</a>)</li>
<li>advanced topic: <a href="https://www.aviskase.com/articles/2021/08/16/using-openapi-cli-custom-preprocessing/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">preprocessing</a></li>
<li>advanced topic: custom linting rules (<a href="https://www.aviskase.com/articles/2021/09/06/using-openapi-cli-custom-rules/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">part 1</a>)</li>
<li>advanced topic: decorators</li>
</ul>
<p>And while I&rsquo;m writing next posts (hehe), install and play with it!</p>
<p>P.S. It&rsquo;s a pity that Redocly team isn&rsquo;t very active about advertising themselves. While everyone knows and praises Redoc, <code>openapi-cli</code> isn&rsquo;t that well-known. Maybe the team wants to finish the beta first? Anyway, I was using it for almost a year, and I think it&rsquo;s time to break the silence and give it some public love!</p>
]]></content>
  </entry>
  <entry>
    <title>Crash course into API-related terminology</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/12/07/crash-course-into-api-related-terminology/" hreflang="en"/>
    <published>2020-12-08T01:59:28Z</published>
    <updated>2020-12-08T01:59:28Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-12-08:/articles/2020/12/07/crash-course-into-api-related-terminology/</id>
    
    <summary type="html"><![CDATA[<p>Anyone trying to dive into the world of APIs is doomed to be confused by conflicting terminology. In this post I&rsquo;m gonna touch upon the main definitions and processes. I already tried it once during <a href="https://www.aviskase.com/articles/2020/03/08/hmms-february/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">lunch&amp;learn session at work</a>, but the time has come to revisit <a href="https://github.com/aviskase/trucs/blob/master/api_salad.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">that old presentation</a> in the written form.</p>]]></summary>
    <content type="html"><![CDATA[<p>Anyone trying to dive into the world of APIs is doomed to be confused by conflicting terminology. In this post I&rsquo;m gonna touch upon the main definitions and processes. I already tried it once during <a href="https://www.aviskase.com/articles/2020/03/08/hmms-february/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">lunch&amp;learn session at work</a>, but the time has come to revisit <a href="https://github.com/aviskase/trucs/blob/master/api_salad.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">that old presentation</a> in the written form.</p>
<p>One last note: the basis for my definitions goes from <a href="https://github.com/openapi-contrib/glossary" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenAPI Glossary</a> started by <a href="https://philsturgeon.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Phil Sturgeon</a>.</p>
<h2 id="main-definitions" >
  <a class="group relative" href="#main-definitions">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Main definitions</a>
</h2>
<p><strong>Specification</strong> is some standard or RFC or whatever describing a particular format or protocol.</p>
<p><strong>Schema</strong> (aka: data model) is a metadata describing the data type, formats, and validation rules. Schema can be defined for content body, header, path or query parameters, etc.</p>
<p><strong>Hypermedia controls</strong> is an easier way to say <strong>HATEOAS</strong>. What&rsquo;s that? It&rsquo;s a special affordance that allows a client to traverse API without hardcoding links. The simplest example would be including pagination links in the response data. E.g., a client asked to get collection of items &mdash; the server responded with first N items and a link to the next page of results &mdash; the client can use the link to get the next page without constructing a link on their own.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;items&#34;</span>: [
</span></span><span style="display:flex;"><span>        {<span style="color:#ff79c6">&#34;id&#34;</span>: <span style="color:#bd93f9">1</span>},
</span></span><span style="display:flex;"><span>        {<span style="color:#ff79c6">&#34;id&#34;</span>: <span style="color:#bd93f9">2</span>}
</span></span><span style="display:flex;"><span>    ],
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&#34;links&#34;</span>: {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&#34;next&#34;</span>: { <span style="color:#ff79c6">&#34;href&#34;</span>: <span style="color:#f1fa8c">&#34;/api/items?cursor=ae12fb2&#34;</span> }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Description</strong> (aka: definition, contract) is a metadata about API, its endpoints, resources, operations, headers, parameters, and etc.</p>
<p><strong>API description document</strong> is a file that contains API description. It is usually written with a particular format from specifications like OpenAPI, WSDL, RAML.</p>
<p><strong>API documentation</strong> is a collection of information pieces that allows clients to successfully use an API. It includes, <em>but not limited to,</em> an API reference documentation (which is often generated from description document). Other important pieces are: tutorials, concept explanations, registration helpers, SDKs.</p>
<h2 id="specifications-some-of-them" >
  <a class="group relative" href="#specifications-some-of-them">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Specifications (some of them)</a>
</h2>
<p>There are <em>tons</em> of API-related specifications. I&rsquo;ll cover only some.</p>
<p><strong><a href="https://www.openapis.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenAPI</a></strong> is used to describe both the service model and the request/response body <em>kinda</em> based on JSON Schema. It was called Swagger before being donated to Linux Foundation. You probably noticed that this created a sore spot: people still call it Swagger, perhaps, because &ldquo;OpenAPI&rdquo; is a bit mouthful. Anyway, know that Swagger is just a part of the  SwaggerHub branding of tooling like Swagger Editor or SwaggerUI.</p>
<div class="callout warning">
  <div class="callout-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg></div><p>You may stumble upon people using the word &ldquo;swagger&rdquo; even in weirder situations:</p>
<ul>
<li>as a synonym for &ldquo;API&rdquo;: &ldquo;We developed swagger for creating users!&rdquo;, &ldquo;Use this swagger to export files!&rdquo;</li>
<li>as a synonym for response body: &ldquo;We make a request and the swagger we got back…&rdquo;</li>
</ul></div>
<p><strong><a href="https://json-schema.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">JSON Schema</a></strong> is for describing an instance of JSON data. OpenAPI was using an extended subset of it, but this was fixed in OAS 3.1, and now they are fully compatible. Why does it matter? Well, JSON Schema have additional tooling for client-side validations or HATEOAS support.</p>
<p><strong><a href="https://jsonapi.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">JSON: API</a></strong> is an anti-bikeshedding spefication for building APIs. Imagine not inventing your own guidelines for naming and other patterns! A notable feature is  ingrained support for HATEOAS.</p>
<p><strong><a href="https://www.asyncapi.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">AsyncAPI</a></strong> is like OpenAPI but for event-driven architectures. Think Kafka, AMQP, WebSocket.</p>
<p>Notable mentions: <a href="https://grpc.io/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">gRPC</a>, <a href="https://graphql.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">GraphQL</a>, <a href="https://www.odata.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OData</a>, <a href="http://stateless.co/hal_specification.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">HAL</a>, <a href="https://github.com/kevinswiber/siren" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Siren</a>.</p>
<h2 id="processes" >
  <a class="group relative" href="#processes">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Processes</a>
</h2>
<h3 id="api-first-vs-api-design-first-vs-api-code-first" >
  <a class="group relative" href="#api-first-vs-api-design-first-vs-api-code-first">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>API-first vs. API design-first vs. API code-first</a>
</h3>
<p>Read <a href="https://stoplight.io/blog/is-api-planning-the-same-thing-as-api-design/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">this article for more details</a>. Here is a TL;DR.</p>
<p><strong>API-first</strong> is about how you approach your API as a product: not an afterthought on top of already created system, but thought through right from the start. The good example came recently from <a href="https://obsidian.md/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Obsidian&rsquo;s devs</a>:</p>
<blockquote>
<p>For the developer the biggest issue is migrating an existing app that wasn&rsquo;t designed with plugin/API in mind. Having experienced this first hand with our previous product, we designed Obsidian from the ground up with a plugin API from the first version.</p>
</blockquote>
<p><strong>API design-first</strong> means prototyping and testing a design before any coding is started. <strong>API code-first</strong> (or implementation-first) means having some code written even at the the design stage. Often though, a more restricted definition is used and it&rsquo;s about the source of truth: description doc or code.</p>
<ul>
<li>Design-first: &ldquo;we write description doc first and then implement&rdquo;.</li>
<li>Code-first: &ldquo;we annotate code and generate a description doc from these annotations&rdquo;.</li>
</ul>
<p>Beware, as I said, this is a more restricted definition! The article I&rsquo;ve linked uses a broader one.</p>
<h3 id="description-doc-validation-vs-linting-vs-preprocessing" >
  <a class="group relative" href="#description-doc-validation-vs-linting-vs-preprocessing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Description doc validation vs. linting vs. preprocessing</a>
</h3>
<p>API description doc is often written in machine-readable format, thus, we can manipulate it and check for errors.</p>
<p><strong>Validation</strong> checks that description doc conforms to some specification.</p>
<p><strong>Linting</strong>  checks custom rules like style. For example: check that all paths are lowercase.</p>
<p><strong>Preprocessing</strong> allows transforming the doc based on additional rules before using it in code or documentation generation. For example, hiding some endpoints from the published version or injecting descriptions from markdown files.</p>
<h3 id="ref" >
  <a class="group relative" href="#ref">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span><code>$ref</code></a>
</h3>
<p>When working with OpenAPI or JSON Schema you will stumble upon <code>$ref</code>&rsquo;s a great deal. These are pointers to JSON structures in different locations: inside the same file or to some other file:</p>
<p>For example, this reference points to the schema from the other file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">application/json</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">schema</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">type</span>: object
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">properties</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">data</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">$ref</span>: ../components/schemas/Users/User.yaml
</span></span></code></pre></div><p>References help with structuring schemas, separating them into reusable pieces.</p>
<p>The process of looking for value of <code>$ref</code> is called <strong>resolution</strong> (or lookup). Not all tools and libraries play well with multi-file resolutions, so you may want to do one of these:</p>
<ul>
<li><strong>Bundling</strong> (aka: external inlining) replaces <code>$ref</code>&rsquo;s to external files with internal references. This creates one file that is easier to share.</li>
<li><strong>Dereferencing</strong> (aka: internal inlining) replaces <code>$ref</code>&rsquo;s to external or internal data with actual data. The resulting file will have no <code>$ref</code>&rsquo;s, but will be noticeably bigger.</li>
</ul>
<hr>
<p>This post was triggered by discussion with <a href="https://unremarkabletester.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Areti Panou</a> in <a href="https://www.angryweasel.com/ABTesting/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">AB Testing podcast&rsquo;s slack</a>. I hope it will help you!</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: November</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/11/30/hmms-november/" hreflang="en"/>
    <published>2020-11-30T23:35:10Z</published>
    <updated>2020-11-30T23:35:10Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-11-30:/articles/2020/11/30/hmms-november/</id>
    
    <summary type="html"><![CDATA[<p>Monthly collection of things that got me <del>thinking</del> hmming.</p>
<h2 id="awards-and-reports" >
  <a class="group relative" href="#awards-and-reports">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Awards and reports</a>
</h2>
<p>Time for <a href="https://www.thoughtworks.com/radar" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">ThoughtWorks Technology Radar</a>. One of the themes is democratizing programming which is tightly coupled with <a href="https://www.aviskase.com/articles/2020/11/03/hmms-october/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">democratization of APIs I mentioned in the last hmms</a>.</p>]]></summary>
    <content type="html"><![CDATA[<p>Monthly collection of things that got me <del>thinking</del> hmming.</p>
<h2 id="awards-and-reports" >
  <a class="group relative" href="#awards-and-reports">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Awards and reports</a>
</h2>
<p>Time for <a href="https://www.thoughtworks.com/radar" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">ThoughtWorks Technology Radar</a>. One of the themes is democratizing programming which is tightly coupled with <a href="https://www.aviskase.com/articles/2020/11/03/hmms-october/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">democratization of APIs I mentioned in the last hmms</a>.</p>
<p><a href="https://puppet.com/resources/report/2020-state-of-devops-report/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The 2020 state of DevOps report</a> is there! I haven&rsquo;t even read it yet =)</p>
<p>This year was the first time I attended <a href="https://devportalawards.org/winners" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">DevPortal Awards</a>. While there is a certain feeling of  <em>being too narrow</em> (seriously, handful of portals getting several awards for several years?), it&rsquo;s still useful for getting inspirations apart from usual &ldquo;check Stripe docs!&rdquo;</p>
<p>In non-tech world, <a href="http://www.worldvaluessurvey.org/photos/cultural_map_2020.jpg" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the Inglehart-Welzel World Cultural Map</a> is all rad. There is no data point for Canada at the moment, but I&rsquo;d guesstimate somewhere close to Great Britain and New Zealand. The most valuable thing is checking the dynamics between current and previous maps. For example, most of the red zone countries moved right, but the jump made by Belarus and Ukraine was bigger than by Russia; this seems to correlate with political and social events I know.</p>
<h2 id="helpful-guides" >
  <a class="group relative" href="#helpful-guides">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Helpful guides</a>
</h2>
<ul>
<li><a href="https://martinfowler.com/articles/agile-threat-modelling.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">A guide to threat modelling for developers</a></li>
<li><a href="https://martinfowler.com/articles/dont-compare-averages.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Don&rsquo;t compare averages</a></li>
<li><a href="https://jvns.ca/blog/answer-questions-well/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to answer questions in a helpful way</a></li>
<li><a href="https://thegooddocsproject.dev/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The Good Docs Project</a> with templates to make good docs.</li>
</ul>
<h2 id="weird-recommendation" >
  <a class="group relative" href="#weird-recommendation">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Weird recommendation</a>
</h2>
<p><a href="https://www.youtube.com/playlist?list=PLBitIgZ_UvGFNHPFlRg4834gYBmbYmdr7" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Watch this playlist</a> (3 videos at the time of writing). You may think &ldquo;wtf, Yuliya, this is some bullshit video game essays&rdquo;. Yes, it is.</p>
<p>But it is also one of the best videos explaining modern testing principles, agile, and lean. Damn, this could be on par with some TED talks. It also explains the appeal of APIs: modding in games is the similar concept to publishing APIs; you never know what users come up with.</p>
<p>How about some quotes:</p>
<blockquote>
<p>Early access is your <em>release</em>.</p>
</blockquote>
<blockquote>
<p>With <em>rapid iterations</em> DayZ mod evolved as the features were added based on <em>what people wanted</em> rather than what developer and publisher thought people wanted.</p>
</blockquote>
<blockquote>
<p>[&hellip;] design pressure from the bottom up.</p>
</blockquote>
<p>And, I don&rsquo;t want to spoil it, but the juiciest part comes later with one of the best case studies for business owners: how to ignore the lucrative niche created for you by your players/users and lose the opportunity to grab the market. By lucrative I mean&hellip; even those who don&rsquo;t play games know the biggest game in that genre ;)</p>
<p>
<img class="mx-auto rounded" src="/articles/2020/11/30/hmms-november/floss.gif" alt="Floss dance" >
</p>
<h2 id="blog-progress" >
  <a class="group relative" href="#blog-progress">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Blog progress</a>
</h2>
<p>I have a bunch of articles in draft stage, but none got published this month, because I accidentally <a href="https://www.youtube.com/channel/UCjUKyZccRzEiawqx2ysFrlQ" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">became a youtuber</a> (Russian-only for now). Yay&hellip; Had to learn how to use all the tools, write scripts, and what not. I do love learning, but, jeez, this one takes time.</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: October</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/11/03/hmms-october/" hreflang="en"/>
    <published>2020-11-04T03:33:09Z</published>
    <updated>2020-11-04T03:33:09Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-11-04:/articles/2020/11/03/hmms-october/</id>
    
    <summary type="html"><![CDATA[<p>Monthly collection of things that got me <del>thinking</del> <em>hmming</em>.</p>
<h2 id="links-lunch" >
  <a class="group relative" href="#links-lunch">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Links lunch</a>
</h2>
<ul>
<li>
<p>I was reading <a href="https://martinfowler.com/articles/branching-patterns.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Patterns for Managing Source Code Branches&rdquo;</a> (which in itself is a great piece) when I saw
<a href="https://www.mediawiki.org/wiki/GitLab_consultation#Outcome" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">MediaWiki&rsquo;s discussion about moving to GitLab</a>. Guess what, they used Fowler&rsquo;s article as a basis for definitions in the discussion. It&rsquo;s curious how some persons&rsquo; outputs instantly become almost a &ldquo;standard.&rdquo;</p>]]></summary>
    <content type="html"><![CDATA[<p>Monthly collection of things that got me <del>thinking</del> <em>hmming</em>.</p>
<h2 id="links-lunch" >
  <a class="group relative" href="#links-lunch">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Links lunch</a>
</h2>
<ul>
<li>
<p>I was reading <a href="https://martinfowler.com/articles/branching-patterns.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Patterns for Managing Source Code Branches&rdquo;</a> (which in itself is a great piece) when I saw
<a href="https://www.mediawiki.org/wiki/GitLab_consultation#Outcome" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">MediaWiki&rsquo;s discussion about moving to GitLab</a>. Guess what, they used Fowler&rsquo;s article as a basis for definitions in the discussion. It&rsquo;s curious how some persons&rsquo; outputs instantly become almost a &ldquo;standard.&rdquo;</p>
</li>
<li>
<p>Uncle Bob <a href="http://blog.cleancoder.com/uncle-bob/2020/10/18/Solid-Relevance.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">explained SOLID yet again</a>. What got my attention was how <em>simple</em> was his explanation.</p>
</li>
<li>
<p>No, I didn&rsquo;t switch to <a href="https://cormullion.github.io/pages/2020-07-26-JuliaMono/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">JuliaMono font</a>, but please check it out if you need a font with an enormous range of characters.</p>
</li>
<li>
<p>And take a look at draft for extending <a href="https://tools.ietf.org/html/draft-snell-search-method-02" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">HTTP <code>SEARCH</code> method&rsquo;s semantics</a>. Perhaps, one day we will forget about <code>GET</code> and <code>POST</code> queries?</p>
</li>
<li>
<p>This tweet perfectly captures <a href="https://twitter.com/fredericl/status/1320764737576030215" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">my feelings about new Google redesign</a>.</p>
</li>
</ul>
<h2 id="no-code-api-platforms" >
  <a class="group relative" href="#no-code-api-platforms">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>No-code API platforms</a>
</h2>
<p>One of the recurring theme in the API domain is <a href="https://increment.com/apis/how-low-code-api-integrations/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">low&ndash; and no-code API solutions</a>, so-called <em>democratization of APIs</em>. Common examples are <a href="https://ifttt.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">IFTTT</a> and <a href="https://zapier.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Zapier</a>.</p>
<p>Yesterday I stumbled upon this video by Curtis McHale:</p>

    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/mfK3M9GHfZ0?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"></iframe>
    </div>

<p>It shows a very specific productivity workflow for iOS, but the curious thing is how much of it is automated by glueing together different apps via <a href="https://support.apple.com/en-ca/guide/shortcuts/welcome/ios" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">shortcuts</a>. More eloquent writer could conjure the whole essay, but my thoughts so far are:</p>
<ul>
<li>I, &ldquo;lots-of-code&rdquo; person, wouldn&rsquo;t come up with such workflow. My routine automation tend to be one-to-one connections, whereas presented shortcut covers many apps.</li>
<li>UI-based automation mechanisms are limited but provide inspiration via affordances (<a href="https://medium.com/swlh/for-a-more-creative-brain-embrace-constraints-5a588c8a8619" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">see also</a>).</li>
<li>Having a native OS mechanism enables the widest possible audience.</li>
<li>Services with apps shouldn&rsquo;t limit integration capabilities only to web APIs; custom URL schemes are perfect for local app-to-app interactions.</li>
</ul>
<h2 id="hi-youtube" >
  <a class="group relative" href="#hi-youtube">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Hi, YouTube</a>
</h2>
<p>One day, as we were talking about our <a href="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">knowledge management systems</a> in the <a href="https://obsidian.md/community" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Obsidian discord&rsquo;s</a> #russian channel, I decided to record a video to show mine.</p>
<p>It&rsquo;s in Russian and it&rsquo;s bad xD</p>

    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/n5klioVz7FM?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"></iframe>
    </div>

<p>Jeez, <em>this was hard</em>. Rerecording, cleaning up, cutting bits, and constantly, constantly hearing yourself in the process. And I didn&rsquo;t even try to do anything fancy, just plain screen cast with editing out all the &ldquo;eeeehm&rdquo;. I&rsquo;ll probably have to do the same in English, and the very thought terrifies me: it was painful enough to hear me speak in my native language. Guess how horrible will be that with the accent.</p>
]]></content>
  </entry>
  <entry>
    <title>Automap API operation handlers in components-based project</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/10/25/automap-api-operation-handlers-in-components-based-project/" hreflang="en"/>
    <published>2020-10-26T02:05:10Z</published>
    <updated>2020-10-29T03:10:10Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-10-26:/articles/2020/10/25/automap-api-operation-handlers-in-components-based-project/</id>
    
    <summary type="html"><![CDATA[<p><a href="https://github.com/goldbergyoni/nodebestpractices" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Node.js best practices repo</a> is the most comprehensive list of style guides and architectural tips for Node.js apps I&rsquo;ve seen. The very first of them is about <a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/projectstructre/breakintcomponents.md" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">structuring projects based on components instead of layers</a>.</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://github.com/goldbergyoni/nodebestpractices" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Node.js best practices repo</a> is the most comprehensive list of style guides and architectural tips for Node.js apps I&rsquo;ve seen. The very first of them is about <a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/projectstructre/breakintcomponents.md" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">structuring projects based on components instead of layers</a>.</p>
<p>For example, the typical layers-based layout would be:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── common
</span></span><span style="display:flex;"><span>│   └── utils.ts
</span></span><span style="display:flex;"><span>├── routers
</span></span><span style="display:flex;"><span>│   ├── locations.router.ts
</span></span><span style="display:flex;"><span>│   └── users.router.ts
</span></span><span style="display:flex;"><span>├── services
</span></span><span style="display:flex;"><span>│   ├── locations.service.ts
</span></span><span style="display:flex;"><span>│   └── users.service.ts
</span></span><span style="display:flex;"><span>└── index.ts
</span></span></code></pre></div><p>In comparison, this is a components-based layout:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── common
</span></span><span style="display:flex;"><span>│   └── utils.ts
</span></span><span style="display:flex;"><span>├── components
</span></span><span style="display:flex;"><span>│   ├── locations
</span></span><span style="display:flex;"><span>│   │   ├── locations.router.ts
</span></span><span style="display:flex;"><span>│   │   └── locations.service.ts
</span></span><span style="display:flex;"><span>│   └── users
</span></span><span style="display:flex;"><span>│       ├── users.router.ts
</span></span><span style="display:flex;"><span>│       └── users.service.ts
</span></span><span style="display:flex;"><span>└── index.ts
</span></span></code></pre></div><p>When it comes to API design, the design-first approach is the most recommended: write the OpenAPI description document (or in any other format), then write the implementation code. Usually, you&rsquo;d want to leverage the description doc as much as possible to automate routine stuff, like request/response validation and operation handlers automapping.</p>
<p>For these purposes I use <a href="https://github.com/cdimascio/express-openapi-validator/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]"><code>express-openapi-validator</code></a> package. The default behavior for automapping is:</p>
<ul>
<li>grab all files sitting directly under base directory (set on <code>OpenApiValidator</code> middleware options)</li>
<li>check files with names equal to <code>x-eov-operation-handler</code> from the description doc</li>
<li>search files for exported functions with the names equal to either <code>operationId</code> or <code>x-eov-operation-id</code></li>
</ul>
<p>This behavior isn&rsquo;t compatible with the components-base layout, since there is no such thing as base directory: each handler lives in the separate directory. Fortunately, you can customize default behavior with <a href="https://github.com/cdimascio/express-openapi-validator/#%EF%B8%8F-operationhandlers-optional" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">custom resolver</a>!</p>
<p>For example, custom resolver I wrote:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>operationHandlers<span style="color:#ff79c6">:</span> {
</span></span><span style="display:flex;"><span>    basePath<span style="color:#ff79c6">:</span> path.join(__dirname, <span style="color:#f1fa8c">&#39;components&#39;</span>),
</span></span><span style="display:flex;"><span>    resolver<span style="color:#ff79c6">:</span> (basePath<span style="color:#ff79c6">:</span> string, route, apiDoc) =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> pathKey <span style="color:#ff79c6">=</span> route.openApiRoute.substring(route.basePath.length);
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> schema <span style="color:#ff79c6">=</span> apiDoc.paths[pathKey][route.method.toLowerCase()];
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> functionName <span style="color:#ff79c6">=</span> schema[<span style="color:#f1fa8c">&#39;operationId&#39;</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> [componentName, routerName] <span style="color:#ff79c6">=</span> schema[<span style="color:#f1fa8c">&#39;x-eov-operation-handler&#39;</span>].split(<span style="color:#f1fa8c">&#39;.&#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> routerPath <span style="color:#ff79c6">=</span> routerName <span style="color:#ff79c6">?</span> <span style="color:#f1fa8c">`</span><span style="color:#f1fa8c">${</span>routerName<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">.router`</span> <span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">`</span><span style="color:#f1fa8c">${</span>componentName<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">.router`</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> modulePath <span style="color:#ff79c6">=</span> path.join(basePath, componentName, routerPath);
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">const</span> handler <span style="color:#ff79c6">=</span> require(modulePath);
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> (handler[functionName] <span style="color:#ff79c6">===</span> <span style="color:#ff79c6">undefined</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">throw</span> <span style="color:#ff79c6">new</span> <span style="color:#8be9fd;font-style:italic">Error</span>(<span style="color:#f1fa8c">`Could not find a [</span><span style="color:#f1fa8c">${</span>functionName<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">] function in </span><span style="color:#f1fa8c">${</span>modulePath<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> when trying to route [</span><span style="color:#f1fa8c">${</span>route.method<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c"> </span><span style="color:#f1fa8c">${</span>route.expressRoute<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">].`</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> handler[functionName];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="callout warning">
  <div class="callout-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg></div><p>The code was updated after the fix <a href="https://github.com/cdimascio/express-openapi-validator/issues/426" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">#426</a>. Should be a valid example as of version v4.3.6.</p></div>
<p>It assumes several things about the project&rsquo;s structure:</p>
<ul>
<li>All handlers are in the <code>components/{componentName}</code> directories.</li>
<li>All handlers have <code>.router</code> postfix in the filename</li>
<li>There could be several handlers inside component.</li>
<li>Default handler should have the same name as the component.</li>
<li><code>x-eov-operation-handler</code> is equal to either component name (default handler) or <code>{componentName}.{handler}</code>.</li>
</ul>
<p>Why so many assumptions? First, I wanted it simple. Second, I avoided introducing libraries for glob file search (yes, Node.js doesn&rsquo;t have globs in standard library, bleh). And third, it will be fairly easy to change anyway!</p>
]]></content>
  </entry>
  <entry>
    <title>Blog redesign: phase 1</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/10/18/blog-redesign-phase-1/" hreflang="en"/>
    <published>2020-10-19T00:09:15Z</published>
    <updated>2020-10-19T00:09:15Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-10-19:/articles/2020/10/18/blog-redesign-phase-1/</id>
    
    <summary type="html"><![CDATA[<p><a href="https://www.aviskase.com/articles/2020/10/04/from-pelican-to-hugo/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">After migrating to Hugo</a>, I decided to do a redesign to freshen up colors and introduce <a href="https://gohugo.io/hugo-pipes/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Hugo Pipes</a>.</p>
<p><em>Oh boi.</em> First phase took the entire week.</p>
<h2 id="planning" >
  <a class="group relative" href="#planning">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Planning</a>
</h2>
<p>For planning and progress tracking, I used <a href="https://github.com/aviskase/aviskase.github.io/projects/1" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a GitHub project</a>. This is a basic Kanban board with two &ldquo;To do&rdquo; columns per phase. The first phase was about making a base dirty skeleton, whereas the second phase will add bells and whistles.</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://www.aviskase.com/articles/2020/10/04/from-pelican-to-hugo/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">After migrating to Hugo</a>, I decided to do a redesign to freshen up colors and introduce <a href="https://gohugo.io/hugo-pipes/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Hugo Pipes</a>.</p>
<p><em>Oh boi.</em> First phase took the entire week.</p>
<h2 id="planning" >
  <a class="group relative" href="#planning">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Planning</a>
</h2>
<p>For planning and progress tracking, I used <a href="https://github.com/aviskase/aviskase.github.io/projects/1" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a GitHub project</a>. This is a basic Kanban board with two &ldquo;To do&rdquo; columns per phase. The first phase was about making a base dirty skeleton, whereas the second phase will add bells and whistles.</p>
<p>GitHub project&rsquo;s cards can have automated transitions between columns, for example, if you close the issue, it will go to &ldquo;Done.&rdquo; Unfortunately, when you work from branch, issues won&rsquo;t be closed by commits until you merge the develop branch in to the main one. In my case the main branch is used for output hosting, so redesign branch won&rsquo;t be merged there, thus, I had to close issues by hand. Meh.</p>
<h2 id="rd" >
  <a class="group relative" href="#rd">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>R&amp;D</a>
</h2>
<p>From the Hugo docs I learned about <a href="https://tailwindcss.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Tailwind CSS</a> and <a href="https://postcss.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">PostCSS</a>. Tailwind CSS is kinda like Bootstrap, but without imposed styling; basically, a Lego constructor of utility classes. PostCSS is a tool for transforming CSS with various plugins like LESS/Sass-style syntaxes, autoprefixer, purger, etc. <a href="https://github.com/diegosanchezp/blog-portfolio" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">This repo</a> and <a href="https://github.com/leonardofaria/bento" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">this one</a> show how to integrate those tools into Hugo.</p>
<p>Design inspiration came when I stumbled upon <a href="https://joshwcomeau.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Joshua Comeau&rsquo;s blog</a>. Yeah, I&rsquo;ve imitated <em>a lot</em> of its typography and color choices xD It also provided some tutorials, for example, <a href="https://joshwcomeau.com/css/styling-ordered-lists-with-css-counters/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">how to style ordered lists</a>. I spent some time trying to find a similar free humanist sans-serif font, <a href="https://fonts.google.com/specimen/Nunito" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Nunito</a> seems close, readable, and has Cyrillic characters (just in case). As for a monospaced font, the choice was obvious: <a href="https://www.jetbrains.com/lp/mono/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">JetBrains Mono</a>.</p>
<p>Tailwind CSS has <a href="https://tailwindcss-typography.netlify.app/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a plugin for typography</a>; I didn&rsquo;t use it, but copied <code>18rem</code> based margins, line-heights, and font sizes for some elements.</p>
<p>For layout I used <code>grid</code> and <code>flexbox</code>. Last time I did any CSS these two weren&rsquo;t a common thing; you had to do a million of <code>div</code>&rsquo;s with <code>float</code>&rsquo;s and other weird things. I also wanted to use <code>grid</code> for minor bleeding elements <a href="https://joshwcomeau.com/css/full-bleed/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">how it was described here</a>, but I didn&rsquo;t like the result: vertical margins don&rsquo;t collapse when you apply grid to child elements.</p>
<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>BTW, <a href="https://raindrop.io/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">raindrop.io</a> helped tremendously with gathering links and sources. I completely migrated there from <a href="http://getpocket.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Pocket</a>.</p>
<p>It has a similar &ldquo;save for later&rdquo; experience, but also supports collections and comments. For example, for this project I created a collection &ldquo;blog redesign&rdquo; and added a comment for each link saved there to remember later why it was saved in the first place.</p></div>
<p>Additional resources:</p>
<ul>
<li><a href="https://iconsvg.xyz/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">SVG icons</a></li>
<li><a href="https://toolness.github.io/accessible-color-matrix/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Tool for checking color palette&rsquo;s accessibility</a></li>
<li><a href="https://stackoverflow.com/questions/11799236/should-i-use-px-or-rem-value-units-in-my-css/43131958#43131958" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Use <code>em</code> for media queries and <code>rem</code> for everything else</a></li>
<li><a href="http://pxtoem.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]"><code>px</code> to <code>em</code>/<code>rem</code> converter</a></li>
</ul>
<h2 id="next-steps" >
  <a class="group relative" href="#next-steps">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Next steps</a>
</h2>
<p>Basic sections for next work are:</p>
<ul>
<li>Bringing back old features: external vs. internal links, older/newer links.</li>
<li>New features: dark theme, automatic generation of Open Graph image, header-level links.</li>
<li>Cleaning up: splitting CSS into components, using plugin for <code>font-face</code> generation, gathering all hard-coded values into variables.</li>
<li>Fixing bugs: display of <code>code</code> elements in links and headers (yup, you can spot it in this article) and others.</li>
</ul>
<p>I also think about ditching Tailwind CSS at this point. It&rsquo;s great for rapid prototyping, but it quickly became a mess of styling split between inline classes and the style sheet.</p>
<p>And one more thing. I no longer like the selected color palette, lol. Links are too bright, block quotes are weird, the header is too cheesy. People say there are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors. I think &ldquo;choosing colors&rdquo; is the &ldquo;naming&rdquo; equivalent in design.</p>
]]></content>
  </entry>
  <entry>
    <title>From Pelican to Hugo</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/10/04/from-pelican-to-hugo/" hreflang="en"/>
    <published>2020-10-05T02:46:54Z</published>
    <updated>2020-10-05T02:46:54Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-10-05:/articles/2020/10/04/from-pelican-to-hugo/</id>
    
    <summary type="html"><![CDATA[<p><a href="https://www.aviskase.com/articles/2020/08/30/remembering-javascript-and-typescript/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">As I mentioned in one of the last articles</a> I was planning to migrate this blog from <a href="https://github.com/getpelican/pelican" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Pelican</a> to other static site generator.</p>
<h2 id="why-and-where" >
  <a class="group relative" href="#why-and-where">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Why and where</a>
</h2>
<p>Reasons:</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://www.aviskase.com/articles/2020/08/30/remembering-javascript-and-typescript/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">As I mentioned in one of the last articles</a> I was planning to migrate this blog from <a href="https://github.com/getpelican/pelican" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Pelican</a> to other static site generator.</p>
<h2 id="why-and-where" >
  <a class="group relative" href="#why-and-where">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Why and where</a>
</h2>
<p>Reasons:</p>
<ul>
<li>Pelican got a new major version 4, which required some migration work on my side either way.</li>
<li>When I&rsquo;m fixing spelling and style I prefer checking on rendered local site and not raw markdown. But live reload became too slow and frustrating (every change took approximately 1-3 minutes).</li>
<li>I just love to switch gears occasionally. This blog was originally built with <a href="https://jekyllrb.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Jekyll</a> (until mid-2019).</li>
</ul>
<p>So, I opened <a href="https://www.staticgen.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">StaticGen</a> to check what was trendy. My final choice was between <a href="https://www.gatsbyjs.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Gatsby</a> and <a href="https://gohugo.io/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Hugo</a>.</p>
<table>
  <thead>
      <tr>
          <th>Gatsby</th>
          <th>Hugo</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>JS-based, good for enforcing much-needed JS deep dive</td>
          <td>Go-based, simply cool.</td>
      </tr>
      <tr>
          <td>Very flexible, tons of plugins, data pulling via GraphQL</td>
          <td>Somewhat flexible. Still not sure about plugins.</td>
      </tr>
      <tr>
          <td>Praised for fast loading, especially if you have JS</td>
          <td>Fast building. Extremely fast building.</td>
      </tr>
      <tr>
          <td>Often used for API dev portals</td>
          <td></td>
      </tr>
  </tbody>
</table>
<p>As you have guessed by the title, I went with Hugo because:</p>
<ul>
<li>I don&rsquo;t need JS on the site itself</li>
<li>I&rsquo;m more interested in fast builds than loading</li>
<li>I heard that Go is the dumbest language in the world, might as well experience some of it xD</li>
</ul>
<h2 id="migration-shenanigans" >
  <a class="group relative" href="#migration-shenanigans">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Migration shenanigans</a>
</h2>
<p>Pelican and Hugo have a very different template format. Rewriting took most of the time, but as you can see, there are no visual changes. I also had to write Atom feed template almost from scratch and test it to make sure that <code>id</code>&rsquo;s are the same and the whole feed won&rsquo;t be completely regenerated (like it happened the last migration.)</p>
<p>But Hugo templates are way more flexible than Pelican&rsquo;s. What I had to do with plugins was achieved with core features. I also fell in love with <a href="https://gohugo.io/content-management/shortcodes/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">shortcodes</a> and <a href="https://gohugo.io/getting-started/configuration-markup/#markdown-render-hooks" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">markdown render hooks</a> which allow further customizations. For example, I used to have a Pelican plugin that detects links to external resources and adds a special <code>external</code> CSS class to them. Now the whole plugin is replaced with one link render hook that I can easily customize as I want later:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go-html-template" data-lang="go-html-template"><span style="display:flex;"><span>&lt;<span style="color:#ff79c6">a</span> <span style="color:#50fa7b">href</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;</span><span style="color:#ff79c6">{{</span> <span style="color:#50fa7b">.Destination</span> <span style="color:#ff79c6">|</span> safeURL <span style="color:#ff79c6">}}</span><span style="color:#f1fa8c">&#34;</span><span style="color:#ff79c6">{{</span> <span style="color:#ff79c6">if</span> strings<span style="color:#50fa7b">.HasPrefix</span> <span style="color:#50fa7b">.Destination</span> <span style="color:#f1fa8c">&#34;http&#34;</span> <span style="color:#ff79c6">}}</span> <span style="color:#50fa7b">class</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;external&#34;</span><span style="color:#ff79c6">{{</span> <span style="color:#ff79c6">end</span> <span style="color:#ff79c6">}}</span>&gt;<span style="color:#ff79c6">{{</span> <span style="color:#50fa7b">.Text</span> <span style="color:#ff79c6">|</span> safeHTML <span style="color:#ff79c6">}}</span>&lt;/<span style="color:#ff79c6">a</span>&gt;
</span></span></code></pre></div><p>Second problem was the markdown sources. They had special Pelican front matter format, not compatible with any supported by Hugo (YAML, TOML, JSON, Org). Yikes. Same for <code>!!! note</code> admonition syntax, <code>kbd</code> auto-detection (all replaced by shortcode), and internal links. I don&rsquo;t have too much content, so most of the work was done via <code>grep</code> and manually replacing stuff.</p>
<p>Third problem was images. The simple solution would be to set them all to <code>static</code> folder, but it&rsquo;s not a recommended approach because you wouldn&rsquo;t be able to use image processing features. Thus, you should go with <code>assets</code> or <a href="https://gohugo.io/content-management/page-bundles/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">page bundles</a>. I prefer bundles because they create a clear distinction where each image belongs to.</p>
<h2 id="changes-to-the-site" >
  <a class="group relative" href="#changes-to-the-site">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Changes to the site</a>
</h2>
<p>While I was trying to preserve as much as I could, there are some <em>intentional</em> changes:</p>
<ul>
<li>No more tagging and categories. I never used them; when I needed to find anything, I just used search. Perhaps it will also force me to make titles more explicit.</li>
<li>No Google tag (aka analytics). While it had been respecting all possible &ldquo;Do Not Track&rdquo; settings, I ditched it completely. At first, it was fun to watch graphs, incoming sources, and play with smart goals, but after a while I stopped caring. Search console is more than enough.</li>
<li>No Disqus comments. Not much value in them anyway (maybe I should actually use Twitter? LOL.)</li>
</ul>
<h2 id="results" >
  <a class="group relative" href="#results">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Results</a>
</h2>
<p>I&rsquo;m quite happy with the migration. It is blazing fast as advertised: GitHub action build went from 2-3 minutes down to 30 seconds. And local live reload is faster than it takes to turn my head to the browser tab.</p>
<p>There is only one problem left. I used <code>img</code> shortcode <a href="https://laurakalbag.com/processing-responsive-images-with-hugo/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">to generate responsive images</a>, but for some reason on my site browsers select too low resolution. I tried to understand why yet couldn&rsquo;t: I had less trouble hacking my way through GnuCash reporting in Scheme (which I don&rsquo;t know) than trying to fix the damn CSS. Current style sheet was borrowed from some theme and reworked over time, but it probably doesn&rsquo;t follow modern best practices. Hugo documentation introduced me to <a href="https://tailwindcss.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Tailwind CSS</a> and <a href="https://postcss.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">PostCSS</a>; and while I hate CSS, the time for redesign has come.</p>
]]></content>
  </entry>
  <entry>
    <title>Conference notes: ASC 2020</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/09/15/conference-notes-asc-2020/" hreflang="en"/>
    <published>2020-09-15T23:15:49Z</published>
    <updated>2020-09-15T23:15:49Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-09-15:/articles/2020/09/15/conference-notes-asc-2020/</id>
    
    <summary type="html"><![CDATA[<p><a href="https://www.openapis.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenAPI Initiative&rsquo;s</a> <a href="https://events.linuxfoundation.org/openapi-asc/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API specifications conference (ASC)</a> was the first payed event I&rsquo;ve attended. Usually I watch free online events or past videos available on YouTube or Vimeo, but this time I decided to bite my inner Scrooge McDuck since there were relevant topics and price was reasonable.</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://www.openapis.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenAPI Initiative&rsquo;s</a> <a href="https://events.linuxfoundation.org/openapi-asc/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API specifications conference (ASC)</a> was the first payed event I&rsquo;ve attended. Usually I watch free online events or past videos available on YouTube or Vimeo, but this time I decided to bite my inner Scrooge McDuck since there were relevant topics and price was reasonable.</p>
<p>And I didn&rsquo;t regret it! I would love to attend offline or online future event: community is golden. There were tons of activity and discussions. The obvious example was day two keynote where the discussion in the chat was almost (if not more) as active as the streamed panel discussion.</p>
<p>The recurring theme in all breakout sessions was <em>API governance</em>. I found it funny that many participants said that they try to avoid the word &ldquo;governance&rdquo; because it scares or alienates developers. In the case of my current company, all our work is about giving customers means to do <em>information governance</em>. And while we certainly need to become better at governing some of our own processes, at least we&rsquo;re not scared of the word.</p>
<p>Talks that caught my attention (aside from keynotes):</p>
<ul>
<li>Bridging Systems and Subcultures: A Swagger Origin Story - Zeke Sikelianos, GitHub
<ul>
<li>Was distracted by work for the first half of talk, so I&rsquo;d want to rewatch it.</li>
</ul>
</li>
<li>Communicating Warning Information in HTTP APIs - André Cedik, shipcloud.io
<ul>
<li>Schedule conflict; definitely to watch later.</li>
</ul>
</li>
<li>Open APIs Wide Open - David Biesack, Apiture
<ul>
<li>Explains the power of <code>x-</code> in OpenAPI definition docs.</li>
</ul>
</li>
<li>Managing API Specs at Scale - Jay Dreyer, Target Corporation
<ul>
<li>Inspiring to see how big companies govern their APIs; and you know, that&rsquo;s not a rocket science, someone just have to do it!</li>
</ul>
</li>
<li>From 0 to OpenAPI: Describing a 10-year old API with OpenAPI @ GitHub - Marc-André Giroux &amp; Andrew Hoglund, GitHub
<ul>
<li>Schedule conflict; definitely to watch later.</li>
</ul>
</li>
<li>Going AsyncAPI: The Good, The Bad, and The Awesome - Ben Gamble, Ably
<ul>
<li>I expected a bit more in depth explanation of practical usage for this specification, but it was still useful.</li>
</ul>
</li>
<li>JSON Schema At Home in the OpenAPI Specification - Core concepts, Vocabularies, and Drafts for 2020 - Ben Hutton, JSON Schema
<ul>
<li>Rewatch and rewatch and rewatch: OpenAPI and JSON Schema are going to be compatible soon (yay!)</li>
</ul>
</li>
<li>Create Delightful SDKs from OpenAPI - Lorna Mitchell, Vonage
<ul>
<li>In short, do not ship auto-generated clients. It&rsquo;s like&hellip; deploying auto-generated servers.</li>
</ul>
</li>
<li>The Augmented API Design Reviewer - Arnaud Lauret, Natixis
<ul>
<li>I&rsquo;m a fan of Arnaud: his book sits on my table and his presentations are probably the best I&rsquo;ve ever seen (visually and informationally).</li>
</ul>
</li>
<li>The Vocabulary of APIs: Adaptive Linting for API Style Detection and Enforcement - Tim Burks, Google  Nicole Gizzo, Google
<ul>
<li>Schedule conflict; definitely to watch later.</li>
</ul>
</li>
<li>Contract as Code as Contract: Using Rust to Unify Specification and Implementation - Adam Leventhal &amp; David Pacheco, Oxide Computer Company
<ul>
<li>Schedule conflict; definitely to watch later.</li>
</ul>
</li>
<li>Contracts for Collaboration Driven Development - Alianna Inzana, SmartBear
<ul>
<li>Schedule conflict; definitely to watch later.</li>
</ul>
</li>
<li>Get Rid of CRUD: Revealing Intent With Your API - Michael Brown, Microsoft
<ul>
<li>The talk that got me into the conference in the first place: this is what part of our development team is working on right now. Kudos to Michael for explaining me bits of it before the conference!</li>
</ul>
</li>
<li>Don&rsquo;t Make It Hard for Us! What Makes a &ldquo;Good&rdquo; API? - Matthew Adams &amp; Carmel Eve, endjin
<ul>
<li>Good conversational session for chat, felt almost like a panel.</li>
</ul>
</li>
<li>API Specification and Microservices Communication Patterns with gRPC - Kasun Indrasiri, WSO2 &amp; Danesh Kuruppu, WSO2
<ul>
<li>You may have noticed it already, but even though the conference was organized by OpenAPI Initiative, all types of specifications were covered and gRPC is one of them.</li>
</ul>
</li>
</ul>
<p>Other stuff to mention:</p>
<ul>
<li>Got my first conference t-shirt! It&rsquo;s even the right size xD</li>
<li>There were some technical hiccups, the first day I missed starting several minutes in each session.</li>
<li>Surprisingly, there were several people from Montreal and Quebec. Local testing community seems to be way less active.</li>
</ul>
<p>Oh, right, my usual rubric, whining about testers:</p>
<ol>
<li>Amusing (or not) observation: there was no &ldquo;tester&rdquo; option in the event registration form. Developers, managers, marketing, DevOps, whatever. But no testers. Oops.</li>
<li>When people talk about API governance, they usually mention developers, product managers, tech writers. But almost never testers. I wonder why?</li>
<li>Gotcha, no whining here! I&rsquo;ve met a like-minded tester! She was quite active, and I was able to deduce that she was a tester just by the questions she posted. Can&rsquo;t deny, there is a certain &ldquo;world view&rdquo; you get by wearing this hat long enough. <em>The despair.</em></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hmms: August</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/09/01/hmms-august/" hreflang="en"/>
    <published>2020-09-01T00:33:03Z</published>
    <updated>2020-09-01T00:33:03Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-09-01:/articles/2020/09/01/hmms-august/</id>
    
    <summary type="html"><![CDATA[<p>This month&rsquo;s hmms were supposed to be easy peasy to do: just grab all new notes created in Obsidian, curate a bit, and, voilà, done. I even wrote <a href="https://pypi.org/project/obsidian-progress-report/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a small python tool</a>.</p>
<p>Yeah, right. I keep forgetting that it&rsquo;s almost impossible to get file&rsquo;s <em>creation date</em> on Linux. There is <a href="https://unix.stackexchange.com/a/131347" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a hacky way</a> for ext4, but in my case it didn&rsquo;t work: according to the script, almost all notes were created on Aug 18 o_O. Ok, lesson learned, now my notes will have yaml front matter with creation date =(</p>]]></summary>
    <content type="html"><![CDATA[<p>This month&rsquo;s hmms were supposed to be easy peasy to do: just grab all new notes created in Obsidian, curate a bit, and, voilà, done. I even wrote <a href="https://pypi.org/project/obsidian-progress-report/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a small python tool</a>.</p>
<p>Yeah, right. I keep forgetting that it&rsquo;s almost impossible to get file&rsquo;s <em>creation date</em> on Linux. There is <a href="https://unix.stackexchange.com/a/131347" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a hacky way</a> for ext4, but in my case it didn&rsquo;t work: according to the script, almost all notes were created on Aug 18 o_O. Ok, lesson learned, now my notes will have yaml front matter with creation date =(</p>
<p>After sifting through files manually, looks like these were the resources that grabbed my attention the most:</p>
<ul>
<li>Several articles by Marty Cagan:
<ul>
<li><a href="https://svpg.com/missionaries-vs-mercenaries/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Missionaries vs. Mercenaries&rdquo;</a></li>
<li><a href="https://svpg.com/product-vs-feature-teams/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Product vs. Feature Teams&rdquo;</a></li>
<li><a href="https://svpg.com/product-team-faq/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Product Team FAQ&rdquo;</a></li>
<li><a href="https://svpg.com/four-big-risks/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;The Four Big Risks&rdquo;</a></li>
<li><a href="https://svpg.com/team-objectives-overview/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Team Objectives – Overview&rdquo;</a></li>
</ul>
</li>
<li><a href="https://www.jrothman.com/mpd/2020/07/estimates-anchor-expectations-forecasts-include-uncertainty/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Estimates Anchor Expectations; Forecasts Include Uncertainty&rdquo;</a> by Johanna Rothman hits right! Don&rsquo;t like being language police, but some words do hinder understanding.</li>
<li><a href="https://www.industrialempathy.com/posts/design-docs-at-google/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Design Docs at Google&rdquo;</a> by Malte Ubl.</li>
<li><a href="https://pkglobal.com/blog/2020/06/api-interface-quadrant/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;What is your API IQ?&rdquo;</a> by Lou Powell.</li>
<li><a href="http://calmerthanyouare.org/2015/03/19/betteridges-law.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Is Betteridge&rsquo;s law of headlines correct?&rdquo;</a> by Mats Linander. Just one more example of &ldquo;rule of thumb&rdquo; being incorrect.</li>
<li><a href="https://www.youtube.com/watch?v=DGcs4tyey18" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Andy Matuschak&rsquo;s livestream of his note-writing session</a>. This is for hardcore people. You know the meme with one big doggo and one smol doggo? Well, I felt quite smol watching Andy&rsquo;s thought process. <em>So deep.</em></li>
<li>Have you seen <a href="https://maggieappleton.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Maggie Appleton&rsquo; blog</a>? She is an awesome illustrator, but she also started publishing articles in the form of &ldquo;digital garden&rdquo;. Looks like it&rsquo;s becoming <a href="https://www.christopherbiscardi.com/what-is-a-digital-garden" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a trend</a>.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Remembering JavaScript and TypeScript</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/08/30/remembering-javascript-and-typescript/" hreflang="en"/>
    <published>2020-08-30T20:46:02Z</published>
    <updated>2020-08-30T20:46:02Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-08-30:/articles/2020/08/30/remembering-javascript-and-typescript/</id>
    
    <summary type="html"><![CDATA[<p>Until recently, I had been coding mostly in Python. I&rsquo;m not an expert, but have a fair understanding of PEPs and practices.</p>
<p>But now I work with JavaScript/TypeScript project, and my knowledge is definitely lacking. I was following these only in the university, when there was still a chance that I had to do web development. I distinctly remember the moment of downloading <a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;You Don&rsquo;t Know JS: this &amp; Object Prototypes&rdquo;</a> book and thinking &ldquo;nope, that&rsquo;s it, I don&rsquo;t want to deal with such language.&rdquo;</p>]]></summary>
    <content type="html"><![CDATA[<p>Until recently, I had been coding mostly in Python. I&rsquo;m not an expert, but have a fair understanding of PEPs and practices.</p>
<p>But now I work with JavaScript/TypeScript project, and my knowledge is definitely lacking. I was following these only in the university, when there was still a chance that I had to do web development. I distinctly remember the moment of downloading <a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;You Don&rsquo;t Know JS: this &amp; Object Prototypes&rdquo;</a> book and thinking &ldquo;nope, that&rsquo;s it, I don&rsquo;t want to deal with such language.&rdquo;</p>
<p>Anyway, I&rsquo;m in dire need of relearning JS and TS. After experience with Python I know better how important it is to lint, follow a style guide, and type, type, type it all. For learning I prefer books and articles, but also noticed growing appreciation for videos. Yes, they are less efficient, longer, but you can use them during some &ldquo;brainless&rdquo; time and revisit interesting topics afterwards in a more thorough fashion.</p>
<p>Here is the list of resources I&rsquo;m using now:</p>
<ul>
<li>&ldquo;You Don&rsquo;t Know JS Yet (book series)&rdquo; by Kyle Simpson, <a href="https://github.com/getify/You-Dont-Know-JS" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">2nd</a> and <a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">1st</a> editions. Keep in mind, the author is known for some controversial views, don&rsquo;t treat these books as a holy grail. Do your research (as always).</li>
<li><a href="https://javascript.info/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">javascript.info</a></li>
<li><a href="https://www.youtube.com/c/TraversyMedia/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Traversy Media channel on YouTube</a></li>
<li><a href="https://kangax.github.io/compat-table/es6/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">ECMAScript compatibility</a> and <a href="https://node.green/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">node.js support</a> tables. Nice for quick links to standards and docs.</li>
<li>Good old <a href="https://developer.mozilla.org" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">MDN</a>.</li>
<li><a href="https://github.com/airbnb/javascript" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Airbnb JavaScript style guide</a> and <a href="https://standardjs.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Standard style</a> for checking practices. You can learn interesting things just by reading rules and discussions that introduced them.</li>
<li>Official <a href="https://www.typescriptlang.org/docs/handbook/intro.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;The TypeScript Handbook&rdquo;</a>.</li>
<li><a href="https://basarat.gitbook.io/typescript/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;TypeScript Deep Dive&rdquo;</a> by Basarat Ali and his <a href="https://www.youtube.com/basaratali" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">YouTube channel</a>.</li>
<li>Courses from <a href="https://frontendmasters.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">FrontendMasters</a>. Still <em>evaluating</em>, but I don&rsquo;t believe the price is worth it for me. But if you&rsquo;re a video-oriented learner, I suppose, this resource is one of the best, simply because these courses are updated.</li>
</ul>
<p>On the side note, I think I&rsquo;ll be migrating this blog from Pelican to Hugo (learning Go, why not) or something JS-y for a nice added practice. Though, the actual reason is that it&rsquo;s built with an older Pelican version, which is very slow, so I have to spend time on either upgrading or migrating anyway.</p>
]]></content>
  </entry>
  <entry>
    <title>Postmortem: borking Ubuntu (again)</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/08/20/postmortem-borking-ubuntu-again/" hreflang="en"/>
    <published>2020-08-20T22:41:32Z</published>
    <updated>2020-08-20T22:41:32Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-08-20:/articles/2020/08/20/postmortem-borking-ubuntu-again/</id>
    
    <summary type="html"><![CDATA[<p>Since I had to deal with an incident recovery this week, I thought why not use it for practicing writing postmortems?</p>
<p>Postmortem is an excellent way to reflect and learn from disasters. Check <a href="https://landing.google.com/sre/sre-book/chapters/postmortem-culture/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Google&rsquo;s SRE book</a> for more information.</p>
<p>So, let&rsquo;s begin.</p>]]></summary>
    <content type="html"><![CDATA[<p>Since I had to deal with an incident recovery this week, I thought why not use it for practicing writing postmortems?</p>
<p>Postmortem is an excellent way to reflect and learn from disasters. Check <a href="https://landing.google.com/sre/sre-book/chapters/postmortem-culture/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Google&rsquo;s SRE book</a> for more information.</p>
<p>So, let&rsquo;s begin.</p>
<p><strong>Summary.</strong> On Tuesday at roughly 02:30 I wasn&rsquo;t able to log into Ubuntu: GNOME crashed before being able to display login screen.</p>
<p><strong>Impact.</strong> Had to do a clean Ubuntu installation, most of the workday time lost.</p>
<p><strong>Root causes.</strong> Incorrect and incomplete purge of accidental upgrade to Pop!_OS. The upgrade itself was cased by adding <code>ppa:system76/pop</code> and not noticing that it contains all the packages that makes Pop!_OS a different distributive.</p>
<p><strong>Action items:</strong></p>
<ul>
<li>Buy an additional external drive and setup regular <code>/home</code> backup procedure.</li>
<li>Document all necessary tweaks for running Ubuntu on Dell XPS 15.</li>
</ul>
<p><strong>Lessons learned:</strong></p>
<ul>
<li>Always use separate partition for <code>/home</code>. Currently Ubuntu recommends otherwise, that&rsquo;s why I didn&rsquo;t make it.</li>
<li>Don&rsquo;t ever upgrade or purge in the middle of the night (duh!).</li>
<li>Pay attention to PPA&rsquo;s content.</li>
<li>One big external drive per household is a bottleneck.</li>
</ul>
<p><strong>Timeline:</strong> (approximate)</p>
<ol>
<li>Saturday. While exploring shiny new themes for Ubuntu I stumbled upon <a href="https://github.com/pop-os/gtk-theme" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Pop theme</a>.</li>
<li>Saturday. Since I prefer using PPA to installing from source, I added <code>ppa:system76/pop</code> repository and installed <code>pop-theme</code>.</li>
<li>Monday 20:00. Ubuntu showed notification about available updates. I didn&rsquo;t check it and simply agreed.</li>
<li>Monday 23:00. Rebooted into Windows.</li>
<li>Tuesday 01:30. Rebooted into Ubuntu to leave it ready for the next work day. Noticed that dual monitor settings and other customizations were gone.</li>
<li>Tuesday 01:40. Checked <code>apt</code>, it showed a warning that some GNOME packages hadn&rsquo;t been upgraded properly. Thus, I decided to rerun <code>sudo apt upgrade</code> manually.</li>
<li>Tuesday 01:50. System suggests rebooting (accepted).</li>
<li>Tuesday 02:00. After rebooting it became obvious that it&rsquo;s no longer pure Ubuntu. Several places showed that it&rsquo;s now Pop!_OS.</li>
<li>Tuesday 02:10. Googled for how to downgrade back to Ubuntu (Pop!_OS lacks certain features). Didn&rsquo;t read much and used the advice to run <code>sudo ppa-purge ppa:system76/pop</code> (was sleepy).</li>
<li>Tuesday 02:20. Purge threw exception in middle and screwed up the system, GNOME in particular.</li>
<li>Tuesday 02:30. After rebooting I was not able to login into UI. Root shell recovery mode worked.</li>
<li>Tuesday 09:00. Spent time researching steps for fixing, decided it would take more time than reinstalling the system.</li>
<li>Tuesday. Booted from LiveUSB. Discovered that there was no separate <code>/home</code> partition.</li>
<li>Tuesday. There were no recent backups, so I had to do one manually. The external hard drive at the moment didn&rsquo;t have enough space, and I needed to move data from it to other computer first.</li>
<li>Tuesday. After cleaning up external drive I attempted to create <code>tar</code> archives with permission preservation. I went with two archives, one for VMs, another for everything else in <code>/home</code>.</li>
<li>Tuesday. VMs&rsquo; archive creation failed several times. Had to split it in more archives based on directories.</li>
<li>Tuesday. Copied all archives to external drive and checked it on the other computer. Archives for VMs were in the subdirectory and the system failed to open it (this computer has half-broken Manjaro, can&rsquo;t find time to fix it).</li>
<li>Tuesday. Copied VMs&rsquo; archive to USB drive. Checking failed, because I forgot that this drive had <code>ext4</code> format.</li>
<li>Tuesday. Tired and not wanting to bother with proper permissions setup, I formatted USB drive to NTFS, copied archives again, checked that they were accessible.</li>
<li>Tuesday. Created separate partitions for <code>/</code> and <code>/home</code> and reinstalled Ubuntu.</li>
<li>Tuesday. Transferred backups to the fresh system, unpacked, installed necessary apps.</li>
<li>Tuesday. Checked that dual-boot Windows was still ok after all manipulations.</li>
</ol>
<hr>
<p>I&rsquo;ve been using Ubuntu, Fedora, or ElementaryOS since early university. You&rsquo;d think I&rsquo;ll have enough experience and caution not to do stupid things like purging GUI packages while still being in GUI ;) But on the other hand, I always had a separate <code>/home</code> partition and got used to rapidly recover or change distributions. Even though it sounds like a typical Windows user behavior, I see one important difference: generally, I do know what got broken. I did it myself. I&rsquo;m just not patient enough to fix all the problems ¯\_(ツ)_/¯</p>
]]></content>
  </entry>
  <entry>
    <title>Be chicken!</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/08/08/be-chicken/" hreflang="en"/>
    <published>2020-08-08T23:42:54Z</published>
    <updated>2020-08-08T23:42:54Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-08-08:/articles/2020/08/08/be-chicken/</id>
    
    <summary type="html"><![CDATA[<p><a href="https://www.apiscene.io/lifecycle/changing-culture-how-committed-are-you/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The article on API change culture</a> uses a well-known &ldquo;the chicken and the pig&rdquo; fable as an inspiration:</p>
<blockquote>
<p>A Pig and a Chicken are walking down the road.</p>
<p>The Chicken says: &ldquo;Hey Pig, I was thinking we should open a restaurant!&rdquo;</p>]]></summary>
    <content type="html"><![CDATA[<p><a href="https://www.apiscene.io/lifecycle/changing-culture-how-committed-are-you/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The article on API change culture</a> uses a well-known &ldquo;the chicken and the pig&rdquo; fable as an inspiration:</p>
<blockquote>
<p>A Pig and a Chicken are walking down the road.</p>
<p>The Chicken says: &ldquo;Hey Pig, I was thinking we should open a restaurant!&rdquo;</p>
<p>Pig replies: &ldquo;Hm, maybe, what would we call it?&rdquo;</p>
<p>The Chicken responds: &ldquo;How about &lsquo;ham-n-eggs&rsquo;?&rdquo;</p>
<p>The Pig thinks for a moment and says: &ldquo;No thanks. I&rsquo;d be committed, but you&rsquo;d only be involved.&rdquo;</p>
</blockquote>
<p>I bet I won&rsquo;t say anything new or profound, but it always weirds me out that the pig is considered somewhat more important than the chicken. Oh, right, because <em>it must die</em> to be useful.</p>
<p>Well, I grew up in the 90s in Kazakhstan. Like many people we were relying on our village relatives for food, so ham and egg production is not an elegant metaphor but a real-life experience for me.</p>
<p>Growing pigs is a <em>slow process</em> with a big <em>one-time payoff</em>. It&rsquo;s not free: you need to feed them and clean the place.  And you&rsquo;d better have a pair of pigs so that the production could be at least somewhat renewable. One committed pig is a splendid feast in the short term and hunger in the long term. Don&rsquo;t forget an emotional cost: pigs don&rsquo;t die by themselves. You will hear it. You will <em>smell</em> it.</p>
<p>Chicken produces eggs <em>continuously</em>. You don&rsquo;t even need a rooster. Feeding is less involved, and you may practice a free-range approach to optimize costs. With a rooster, eggs can be fertilized, and production might grow even more.</p>
<p>Thus, in my opinion, <strong>chicken-style contributors are better for a project</strong>. They bring <em>sustainability</em>. They create small <del>eggs</del>  incremental improvements. They are the force of kaizen.</p>
<p>Whereas pigs are one-time Big Bang doers. An external contractor who came in, said you need to redo the entire workflow, got their paycheck, and left. That new employee who said: &ldquo;let&rsquo;s rewrite the system from scratch!&rdquo;. Don&rsquo;t get me wrong, sometimes big changes are healthy and bring value, but they are also riskier. You need to have a bunch of chickens to support the process.</p>
<p>Another possible consequence for pigs is burnout. You did something big and you can&rsquo;t do anything else anymore. Oops.</p>
<p>I often gravitate towards pig&rsquo;s tendencies since it&rsquo;s easier. It&rsquo;s also better for CV and performance evaluations, isn&rsquo;t it? ;) But in the end, as some say: we prefer being generalists; the same way I&rsquo;d say: let&rsquo;s be chickens who oink occasionally.</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: July</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/08/04/hmms-july/" hreflang="en"/>
    <published>2020-08-04T22:26:40Z</published>
    <updated>2020-08-04T22:26:40Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-08-04:/articles/2020/08/04/hmms-july/</id>
    
    <summary type="html"><![CDATA[<h2 id="oops-i-have-nothing-to-share" >
  <a class="group relative" href="#oops-i-have-nothing-to-share">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Oops, I have nothing to share</a>
</h2>
<p>Since <a href="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">migrating to Obsidian</a> for knowledge management, I&rsquo;ve lost a track of interesting resources I read, because they are represented as atomic cross-referencing notes.</p>
<p>Perhaps I should try to be more consistent and always write <a href="https://www.lesswrong.com/posts/T382CLwAjsy3fmecf/how-to-take-smart-notes-ahrens-2017" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">literature notes</a>. Alas, my current graph looks like that (obviously, I didn&rsquo;t have time to transfer older notes from other systems):</p>]]></summary>
    <content type="html"><![CDATA[<h2 id="oops-i-have-nothing-to-share" >
  <a class="group relative" href="#oops-i-have-nothing-to-share">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Oops, I have nothing to share</a>
</h2>
<p>Since <a href="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">migrating to Obsidian</a> for knowledge management, I&rsquo;ve lost a track of interesting resources I read, because they are represented as atomic cross-referencing notes.</p>
<p>Perhaps I should try to be more consistent and always write <a href="https://www.lesswrong.com/posts/T382CLwAjsy3fmecf/how-to-take-smart-notes-ahrens-2017" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">literature notes</a>. Alas, my current graph looks like that (obviously, I didn&rsquo;t have time to transfer older notes from other systems):</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/08/04/hmms-july/obsidian_july_2020_hu_9bc3d4b0c561fa28.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/08/04/hmms-july/obsidian_july_2020.png" alt="Obsidian graph view as of July 2020" defer>
	</picture>
	
</figure></p>
<p>In general, my topics of interests for this month were:</p>
<ul>
<li>jobs to be done framework</li>
<li>jobs stories vs. user stories</li>
<li>characters vs. personas</li>
<li><a href="https://tyk.io/api-design-methodologies/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API design approaches</a></li>
<li>relearning basic Lean &amp; Kanban principles like value stream mapping or my beloved 3Ms</li>
</ul>
<h2 id="no-longer-a-tester" >
  <a class="group relative" href="#no-longer-a-tester">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>No longer a tester</a>
</h2>
<p>My official title has changed to engineer. But don&rsquo;t expect me to stop whining about testers&rsquo; community; I still talk to them xD</p>
<p>Anyway, title change was a cumbersome thing. On one hand, <em>I don&rsquo;t care that much</em>. As long as people know me and understand that I&rsquo;m that weird glue person who just pokes into every process where waste is evident, I&rsquo;m fine. On the other hand, title matters for stupid things like initial introduction to the new team or hierarchical structures. Would I prefer something less generic than &ldquo;engineer&rdquo; that may accidentally focus on &ldquo;implementer&rdquo; hat instead of the &ldquo;analyst/designer&rdquo;? Yup. Did I have imperfect titles before? Yup. So, whatever.</p>
<h2 id="first-learnings-from-wearing-implementer-hat" >
  <a class="group relative" href="#first-learnings-from-wearing-implementer-hat">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>First learnings from wearing implementer hat</a>
</h2>
<p>I am mostly Python coder, though I have some almost forgotten experience with C++ and Java. But now I need to work with Typescript/Node.js code and it&rsquo;s been&hellip; interesting. The biggest problem coming from Python is that in JS there are a million ways to do the same thing which for me results in endless googling about what way is more idiomatic and recommended. The entire ecosystem around TS, JS, and Node seems to be more confusing. But, no arguments here, type system in TS is nuts. Like an additional language.</p>
<p>I also enjoy working in Visual Studio Code, especially with its automagic connection inside docker containers. This blog is written in the PyCharm, but now I consider switching to VSCode because it has more markdown plugins.</p>
<p>Another dev thingy: the blog was built using Travis CI. Recently I&rsquo;ve switched to GitHub Actions, and it was fairly easy to do. I&rsquo;d suggest to anyone who wants to learn DevOps-ish stuff to experiment on GitHub, since it&rsquo;s all in one place and their docs are user friendly.</p>
]]></content>
  </entry>
  <entry>
    <title>Knowledge management tools</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/" hreflang="en"/>
    <published>2020-07-03T19:50:58Z</published>
    <updated>2020-07-03T19:50:58Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-07-03:/articles/2020/07/03/knowledge-management-tools/</id>
    
    <summary type="html"><![CDATA[<p>As a knowledge worker, I spend a lot of time searching and experimenting with approaches for knowledge capture and storage. Currently, I play with the new shiny app, so I figured it&rsquo;s a perfect moment to systemize and reflect on tools and techniques I used until now.</p>
<h2 id="handwritten" >
  <a class="group relative" href="#handwritten">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Handwritten</a>
</h2>
<p>I was more into handwriting during school and university, and there are still tons of notebooks back in Kazakhstan with course notes. I followed the same process and structure for extra studies like Coursera, and the most important thing I learned was that these notes were never ever opened and referenced later. Useless waste of stationery.</p>]]></summary>
    <content type="html"><![CDATA[<p>As a knowledge worker, I spend a lot of time searching and experimenting with approaches for knowledge capture and storage. Currently, I play with the new shiny app, so I figured it&rsquo;s a perfect moment to systemize and reflect on tools and techniques I used until now.</p>
<h2 id="handwritten" >
  <a class="group relative" href="#handwritten">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Handwritten</a>
</h2>
<p>I was more into handwriting during school and university, and there are still tons of notebooks back in Kazakhstan with course notes. I followed the same process and structure for extra studies like Coursera, and the most important thing I learned was that these notes were never ever opened and referenced later. Useless waste of stationery.</p>
<p>One of the last examples from English&amp;French practice:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_oldnotes_hu_474efbcfcfd35482.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_oldnotes.jpg" alt="Old handwritten notebook" defer>
	</picture>
	
</figure></p>
<p>Don&rsquo;t get me wrong, I love stationery. There was a time when we visited the biggest stationery store almost every day after the classes to gawk on new cute notebooks and pens. If my handwriting wasn&rsquo;t that atrocious, perhaps I&rsquo;d be more into bullet journals and scrapbooks, but alas, it still doesn&rsquo;t make them useful for anything else besides creativity outbursts.</p>
<p>Now I use paper only for transient scribbles consumed right away or during the day, like this problem solving for <a href="https://adventofcode.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">advent of code</a>.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_notes_hu_74ced862f51e9a06.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_notes.jpg" alt="Untranslatable scribbles" defer>
	</picture>
	
</figure></p>
<p>Though, I prefer <a href="https://getrocketbook.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Rocketbook</a>, because it&rsquo;s like a mini-whiteboard and I get to enjoy all fancy colors. Here is a note from API design brainstorming:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_rocketbook_hu_2ad1c8b2937b2623.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_rocketbook.jpg" alt="Brainstorming in Rocketbook" defer>
	</picture>
	
</figure></p>
<h2 id="digital" >
  <a class="group relative" href="#digital">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Digital</a>
</h2>
<p>If handwritten notes are useless, digital ones are too chaotic, because I experimented with too many formats.</p>
<h3 id="non-structured" >
  <a class="group relative" href="#non-structured">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Non-structured</a>
</h3>
<p>The first iterations were a transposition of handwritten notes into digital via <em>Google Docs.</em></p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_gdocs_hu_11e8d1e5b8ee4a3e.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_gdocs.png" alt="Notes in the Google Docs" defer>
	</picture>
	
</figure></p>
<p>They are as ineffective as the real notebooks. Type once and forget.</p>
<p>The direct opposite are <em>plain text notes</em> in <a href="https://www.sublimetext.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Sublime</a> with <a href="https://github.com/aziz/PlainNotes" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">PlainNotes</a> plugin. I use them almost every day for:</p>
<ul>
<li>transient notes like &ldquo;did this during the smoke test&rdquo;</li>
<li>common copy pastes</li>
</ul>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_sublime_hu_decce16aefa8e880.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_sublime.png" alt="Sublime with PlainNotes" defer>
	</picture>
	
</figure></p>
<h3 id="mind-maps" >
  <a class="group relative" href="#mind-maps">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Mind maps</a>
</h3>
<p>At some point I learned about <em>mind mapping</em> and tried almost all installable applications for that, including:</p>
<ul>
<li><a href="https://www.xmind.net/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">XMind</a>: UX is great, but features in the free tier are meh, especially in the last versions. Likes to eat memory.</li>
<li><a href="https://www.freeplane.org/wiki/index.php/Home" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Freeplane</a>: ugly. Very ugly. Unbearably ugly. But free, fast, and has tons of features.</li>
<li><a href="https://www.mindomo.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Mindomo</a>: my latest selection, not free, yet has feature no one else has (more on that later).</li>
</ul>
<p>As of now I have an assortment of mind maps in various formats, like <a href="https://www.aviskase.com/articles/2018/03/19/mega-mind-map-version-2/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">Freeplane</a> or XMind:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_xmind_hu_7ecaaaffcc714c83.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_xmind.png" alt="XMind mind map overview" defer>
	</picture>
	
</figure></p>
<p>I liked mind map for capturing phase, but for some inexplicable reason, I found them uncomfortable for referencing. They have the same fate as old course notes.</p>
<h3 id="outliners" >
  <a class="group relative" href="#outliners">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Outliners</a>
</h3>
<p>After that realization I discovered <em>outliners:</em> think of them as a marriage between mind maps and bullet lists. You can follow the same tree-like structure and fold/unfold branches, yet with more capabilities for formatting and longer text.</p>
<p>The most well advertised outliner is <a href="https://workflowy.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">WorkFlowy</a>, but I never tried it, because I&rsquo;m an awful human being and prefer free stuff xD So the next best alternatives are <a href="https://dynalist.io/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Dynalist</a> and <a href="https://checkvist.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Checkvist</a>. Both are fine. There are hundreds of others, some of them are open source and/or crazy and/or vim-like outliners, but as UX junkie, I used those two the most. The reasons to stop were:</p>
<ul>
<li>opposite of mind maps: hard to capture, easy to reference</li>
<li>web-based</li>
</ul>
<p>That&rsquo;s why I moved to <a href="https://www.mindomo.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Mindomo</a>, because it has a killer feature: switch between mind map and outline view.</p>
<h3 id="notebooks" >
  <a class="group relative" href="#notebooks">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Notebooks</a>
</h3>
<p>Around the same time as I discovered mind mapping, I saw the need for having long form note storage. Yeah, yeah, Evernote rules the stage. I had it, but the web version became slower and slower, and there was no Linux client, so I played with others. It&rsquo;s hard to remember their names though, I bet I tested more than a dozen.</p>
<p>For example, <a href="https://simplenote.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Simplenote</a>. Nice, but very basic.</p>
<p>Or extremely Chinese <a href="https://www.wiz.cn/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">WizNote</a>.</p>
<p>The last one ditched just a month ago was <a href="https://joplinapp.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Joplin</a>. It&rsquo;s very good, I do recommend it: open source, supports markdown, has a web clipper and an Android app with WebDAV sync. If all you need is more or less suitable Evernote alternative, it&rsquo;s ok. Spoilers: <em>I needed more.</em></p>
<p>Before we go to the last section, notable mentions:</p>
<ul>
<li>LaTeX and RST formats: used them for a while, but Markdown is way easier and better supported.</li>
<li><a href="https://www.onenote.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OneNote</a>: I heard it&rsquo;s fine if you are Windows user. Well, I am not :)</li>
<li><a href="https://keep.google.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Google Keep</a>: perfect inbox for quick notes, shopping, and other lists that I need to access from the phone:</li>
</ul>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_keep_hu_b8645d07b302c7ed.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/07/03/knowledge-management-tools/km_keep.png" alt="Google Keep with transient lists" defer>
	</picture>
	
</figure></p>
<h3 id="zettels" >
  <a class="group relative" href="#zettels">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Zettels</a>
</h3>
<p>Ok, that&rsquo;s a wrong term, but it encapsulates what differs from common notebooks the best. <a href="https://en.wikipedia.org/wiki/Zettelkasten" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Zettelkasten</a> is a note-taking method that relies on linking. Overly simplified process is:</p>
<ul>
<li>create basic and the smallest possible notes (one concept per note)</li>
<li>link notes with each other</li>
<li>group notes thematically</li>
</ul>
<p>There are different variations and similar methods, but all of them are based on ability to form concept maps (non-hierarchical storage). Checkout <a href="https://notes.andymatuschak.org/About_these_notes" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Andy Matuschak&rsquo;s notes</a> for example.</p>
<p>The most crucial part is to trace links and backlinks for each note:</p>
<ul>
<li>links: note A links to notes B, C, D</li>
<li>backlinks: note A is linked from notes E, F, J</li>
</ul>
<p>Usually it&rsquo;s easy to add links, but cumbersome to add backlinks, because as soon as you link A to B you need to open B and add a link to A. That&rsquo;s a wiki approach.</p>
<p>There are apps that simplify the process, like <a href="https://obsidian.md/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Obsidian</a>. It has other neat features: link visualization with a graph, note/file transclusion (aka &ldquo;embedding&rdquo;), and tagging.</p>
<p>I&rsquo;ve started slowly migrating my non-work notes there, and it&rsquo;s hard. You get used to rigid hierarchies based on folders. You don&rsquo;t have to stop using them, but it makes sense with approaches like <a href="https://github.com/nickmilo/IMF-v3" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">@nickmilo&rsquo;s</a> (which I follow loosely).</p>
<h2 id="non-text-content" >
  <a class="group relative" href="#non-text-content">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Non-text content</a>
</h2>
<p>Only digital:</p>
<ul>
<li><a href="https://inkscape.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Inkscape</a>: my go-to drawing app since I&rsquo;m better with vector graphics.</li>
<li><a href="https://krita.org" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Krita</a>: when I learn how to draw with my graphic tablet xD</li>
<li><a href="https://excalidraw.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Excalidraw</a>: discovered via Obsidian&rsquo;s Discord. Will use it for graphs.</li>
<li>LibreOffice Impress: not a drawing app, but for those situations when I need a presentation.</li>
<li><a href="https://shutter-project.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Shutter</a>: screenshots with annotations, more than enough for everyday usage. Or <a href="https://getsharex.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">ShareX</a> when on Windows.</li>
<li><a href="https://www.maartenbaert.be/simplescreenrecorder/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">SimpleScreenRecorder</a> for short screencasts. People who use GIF for that: <em>burn in hell.</em></li>
</ul>
<h2 id="summary" >
  <a class="group relative" href="#summary">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Summary</a>
</h2>
<p>Let&rsquo;s summarize. Handwritten notes:</p>
<ul>
<li>use whiteboarding format (can easily &ldquo;edit&rdquo; by cleaning)</li>
<li>transient, not for long-term storage</li>
<li>for generating ideas or designs</li>
<li>for small tasks during the day</li>
</ul>
<p>One important exception is recipes. All are handwritten on small cards and stored in the box. The reason is to pull one out and stick to the fridge with a magnet. I don&rsquo;t have much recipes anyway, so searching and storage aren&rsquo;t a problem.</p>
<p>For digital:</p>
<ul>
<li>Mindomo when I <em>really</em> want a mind map. Something tells me I won&rsquo;t.</li>
<li>Sublime PlainNotes for transient notes and copy pastes.</li>
<li>Google Keep for semi-transient lists and inbox.</li>
<li>Obsidian for anything else, except overly work related (I prefer to experiment with it more on the free tier before paying for commercial license).</li>
</ul>
<p>And for non-text content, imagine the entire section <em>transcluded</em> here ;)</p>
<p>The last important bit: almost all my data is backed up in some way. Google Disk, Yandex.Drive, and OneDrive. I once lost a hard drive with my end-of-semester projects and 300GB of carefully collected music (which I never recovered). Make backups. And backup some backups.</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: June</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/07/01/hmms-june/" hreflang="en"/>
    <published>2020-07-01T19:10:45Z</published>
    <updated>2020-07-01T19:10:45Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-07-01:/articles/2020/07/01/hmms-june/</id>
    
    <summary type="html"><![CDATA[<p>Time for the list of things I found interesting/amusing this month.</p>
<h2 id="link-soup" >
  <a class="group relative" href="#link-soup">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Link soup</a>
</h2>
<p>Let&rsquo;s start with the good news: <a href="https://www.openapis.org/blog/2020/06/18/openapi-3-1-0-rc0-its-here" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenAPI 3.1.0 RC is out!</a>. Webhooks and reconciliation with JSON Schema are the highlights of the version. I hope tooling support won&rsquo;t lag this time.</p>]]></summary>
    <content type="html"><![CDATA[<p>Time for the list of things I found interesting/amusing this month.</p>
<h2 id="link-soup" >
  <a class="group relative" href="#link-soup">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Link soup</a>
</h2>
<p>Let&rsquo;s start with the good news: <a href="https://www.openapis.org/blog/2020/06/18/openapi-3-1-0-rc0-its-here" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenAPI 3.1.0 RC is out!</a>. Webhooks and reconciliation with JSON Schema are the highlights of the version. I hope tooling support won&rsquo;t lag this time.</p>
<p>I really liked <a href="https://techleadership.substack.com/p/chance-meetings-asynchronous-collaboration" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the article by Daniel Jarjoura</a> on communications. For example, I didn&rsquo;t know that crowd brainstorming is proved to be less effective.</p>
<p>Cool little apps I was recommended:</p>
<ul>
<li>For drawing: <a href="https://excalidraw.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Excalidraw</a></li>
<li>For text expansion: <a href="https://espanso.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Espanso</a></li>
<li>For knowledge management: <a href="https://obsidian.md/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Obsidian</a> (more about it in the next article)</li>
</ul>
<h2 id="positioning-change" >
  <a class="group relative" href="#positioning-change">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Positioning change</a>
</h2>
<p>And, finally, the regular column &ldquo;I kinda don&rsquo;t like testers.&rdquo; This month I tracked all testers-centric communities and articles to determine how useful these sources of information are for me. The result was as expected: noise to signal ratio was appalling. I&rsquo;m tired of:</p>
<ul>
<li>Rehashing of the same ideas <em>by the same authors</em> for years.</li>
<li>Questions that will never pass <a href="https://stackoverflow.com/help/how-to-ask" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Stack Overflow filter</a>.</li>
<li>&ldquo;Should testers learn to code?&rdquo; debate specifically.</li>
<li>Being overly dramatic about the slightest differences in opinion. The schools of testing, yadda-yadda.</li>
<li>Over-glorifying the tester&rsquo;s role and knowledge (common in certain groups).</li>
<li>Jokes and memes about us (testers) vs. them (devs) (typical amongst juniors and junior oriented resources).</li>
</ul>
<p>Thus, I made some decision:</p>
<p><strong>1.</strong> I left RST and MoT (and <a href="https://www.ministryoftesting.com/news/ministry-of-testing-slacks-when-two-become-one" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">its abolished sister group</a>) slack communities. Stayed only in the ABT, because it&rsquo;s smaller and more enjoyable.</p>
<p><strong>2.</strong> Won&rsquo;t hunt for any more testers-centric resources. Mind you, testers-centric ≠ testing-centric. Whatever I had in RSS + ABT podcast is more than enough.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/07/01/hmms-june/rss_feeds_hu_a99b6a2c1031af7.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/07/01/hmms-june/rss_feeds.png" alt="45 RSS feeds in &ldquo;Testing&rdquo; category" defer>
	</picture>
	
</figure></p>
<p><strong>3.</strong> Won&rsquo;t save articles into reading queue &ldquo;just in case&rdquo;, if it&rsquo;s obvious from the title and the first paragraph that the author is repeating themselves.</p>
<p><strong>4.</strong> Change &ldquo;About me&rdquo; page to be less role specific. I wrote it a long time ago.</p>
<p><strong>5.</strong> Do I contribute to the same noise? Perhaps. Can&rsquo;t promise, but I&rsquo;ll try not to. Obviously, these <em>Hmms</em> aren&rsquo;t really original content, but <a href="https://eugeneyan.com/writing/reading-note-taking-writing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">written reflection is a great way to process information</a>, sorry!</p>
<h2 id="ps-the-saddest-youtubes-recommendation" >
  <a class="group relative" href="#ps-the-saddest-youtubes-recommendation">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>P.S. the saddest YouTube&rsquo;s recommendation</a>
</h2>
<p>YouTube recommended me to rewatch <a href="https://www.youtube.com/watch?v=q6oTziHKM_c" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the opening sequence to the &ldquo;Valerian and the City of a Thousand Planets&rdquo;</a>. The movie is forgettable, but this small part is a masterful tearjerker, <em>especially now.</em></p>
]]></content>
  </entry>
  <entry>
    <title>Robust APIs are weird</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/06/18/robust-apis-are-weird/" hreflang="en"/>
    <published>2020-06-18T00:30:59Z</published>
    <updated>2020-06-18T00:30:59Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-06-18:/articles/2020/06/18/robust-apis-are-weird/</id>
    
    <summary type="html"><![CDATA[<p>My first full-time API testing experience was for SOAP services. There you learn what XSD is. You learn to love it.</p>
<p>Of course, you do! With server-side enabled validation based on a schema, you need not worry about stupid testing like checking what happens when you send 100 length string where expected maximum length is 50. Just make sure that XSD is correct.</p>]]></summary>
    <content type="html"><![CDATA[<p>My first full-time API testing experience was for SOAP services. There you learn what XSD is. You learn to love it.</p>
<p>Of course, you do! With server-side enabled validation based on a schema, you need not worry about stupid testing like checking what happens when you send 100 length string where expected maximum length is 50. Just make sure that XSD is correct.</p>
<p>After that witchcraft, testing RESTish APIs feels like going back in time. To the very <em>manual</em> times. But then you learn about JSON Schema (RAML, OpenAPI, etc) and you are happy again! Yay, we can turn on server-side validation and shove off stupid testing again.</p>
<p>The problem is that JSON and XML are different beasts. Assuming at face value that whatever is defined in schema should be blindly validated <strong>can be wrong.</strong></p>
<p>Let me explain why. And don&rsquo;t worry, I did the same mistake.</p>
<p>Here is a simple XML:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff79c6">&lt;?xml version=&#34;1.0&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;item&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;name&gt;</span>Ring of the Wild Hunt<span style="color:#ff79c6">&lt;/name&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;tugrik&gt;</span>10<span style="color:#ff79c6">&lt;/tugrik&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/item&gt;</span> 
</span></span></code></pre></div><p>Take <em>a good look at</em> <code>tugrik</code> element. Without XSD you wouldn&rsquo;t know the expected type. While it looks like something numeric, you can&rsquo;t be sure. Maybe it&rsquo;s a string like a <code>name</code>?</p>
<p>Addition of XSD clarifies that <code>tugrik</code> expects decimal value:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff79c6">&lt;?xml version=&#34;1.0&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;xs:schema</span> <span style="color:#50fa7b">xmlns:xs=</span><span style="color:#f1fa8c">&#34;http://www.w3.org/2001/XMLSchema&#34;</span> <span style="color:#50fa7b">targetNamespace=</span><span style="color:#f1fa8c">&#34;https://www.w3schools.com&#34;</span> <span style="color:#50fa7b">xmlns=</span><span style="color:#f1fa8c">&#34;https://www.w3schools.com&#34;</span> <span style="color:#50fa7b">elementFormDefault=</span><span style="color:#f1fa8c">&#34;qualified&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;xs:element</span> <span style="color:#50fa7b">name=</span><span style="color:#f1fa8c">&#34;item&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;xs:complexType&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;xs:sequence&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">&lt;xs:element</span> <span style="color:#50fa7b">name=</span><span style="color:#f1fa8c">&#34;name&#34;</span> <span style="color:#50fa7b">type=</span><span style="color:#f1fa8c">&#34;xs:string&#34;</span><span style="color:#ff79c6">/&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">&lt;xs:element</span> <span style="color:#50fa7b">name=</span><span style="color:#f1fa8c">&#34;tugrik&#34;</span> <span style="color:#50fa7b">type=</span><span style="color:#f1fa8c">&#34;xs:decimal&#34;</span><span style="color:#ff79c6">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;/xs:sequence&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;/xs:complexType&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/xs:element&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/xs:schema&gt;</span> 
</span></span></code></pre></div><p>Now, let&rsquo;s convert the same document to JSON.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">&#34;item&#34;</span>: {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">&#34;name&#34;</span>: <span style="color:#f1fa8c">&#34;Ring of the Wild Hunt&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">&#34;tugrik&#34;</span>: <span style="color:#f1fa8c">&#34;10&#34;</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Oh no, you say, that looks wrong! We know that <code>tugrik</code> is a number, so make it so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#ff79c6">&#34;item&#34;</span>: {
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">&#34;name&#34;</span>: <span style="color:#f1fa8c">&#34;Ring of the Wild Hunt&#34;</span>,
</span></span><span style="display:flex;"><span>		<span style="color:#ff79c6">&#34;tugrik&#34;</span>: <span style="color:#bd93f9">10</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Yet by doing that, now we don&rsquo;t even need any JSON Schema to guess the type. No pesky little quotes &mdash; it&rsquo;s a number!</p>
<p>Perhaps you see where this is going. XML documents are plain-text. Each element&rsquo;s value is a simple string that frameworks cast into proper types using XSD.</p>
<p>So, if <code>tugrik</code> is defined as decimal field:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>float(&#34;10&#34;) == 10.0
</span></span><span style="display:flex;"><span>float(&#34;10.0&#34;) == 10.0
</span></span><span style="display:flex;"><span>float(&#34;blah&#34;) --&gt; Exception
</span></span></code></pre></div><p>Maybe there is a trimming in between too, so <code>float(&quot;  10  &quot;.trim()) == 10.0</code>.</p>
<p>Maybe our casting is incredibly smart and can do things like <code>float(&quot;ten&quot;) == 10.0</code>!</p>
<p>But I digress. The main point is that XML-based documents often go through casting mechanism. <strong>Validation fails only when casting could not be done.</strong></p>
<p>JSONs are not plain-text. They already have some rudimentary types visible just by looking at them. If you add JSON Schema on top and use any <em>not overly robust</em> validator, the behavior will be different.</p>
<p>Because the simplest way to validate a JSON document is first to consume it with some common library that guesses types almost like we do: &ldquo;does it have quotes around? string!&rdquo; And only then, with already cast value, to compare its type with whatever is defined in a schema.</p>
<p>(Yes, yes, I do oversimplify internals)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>x = parse(&lt;json&gt;) 
</span></span><span style="display:flex;"><span>assert typeof(x) == &#39;float&#39;
</span></span></code></pre></div><p>then for:</p>
<ul>
<li><code>&quot;tugrik&quot;: 10</code> passes</li>
<li><code>&quot;tugrik&quot;: 10.0</code> passes</li>
<li><code>&quot;tugrik&quot;: &quot;10&quot;</code> fails</li>
<li><code>&quot;tugrik&quot;: &quot;blah&quot;</code> fails</li>
</ul>
<p>Can you guess how <em>really robust</em> validators are different? Right! They make <code>&quot;tugrik&quot;: &quot;10&quot;</code> to pass validation. Because they follow Postel&rsquo;s law:</p>
<blockquote>
<p>Be conservative in what you send, be liberal in what you accept.</p>
</blockquote>
<p>While this statement is way more complex than puny little tester&rsquo;s blog could handle, it&rsquo;s important to know its existence and application.  Following Postel&rsquo;s law to any degree is <em>a design choice.</em></p>
<p>If your service is designed to handle weak input like <code>&quot;tugrik&quot;: &quot;10&quot;</code> as a valid number, it&rsquo;s not a bug. If you send additional properties in the request and a service ignores them without throwing 4xx error, it&rsquo;s not a bug either. It can be very well a feature.</p>
<p>And yes, there is definitely a way <a href="https://techblog.workiva.com/tech-blog/wrestling-postel%E2%80%99s-law" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">to do robustness wrong or overdo it</a>. If you write a browser engine from scratch (why?), you&rsquo;ll follow Postel&rsquo;s law religiously. Another reason would be ensuring the maximum uptime of API clients. More successful requests they do and less work is required from them to connect to your product result in more profit.</p>
<p>So, when you explore new API, make sure you understand how&rsquo;s and why&rsquo;s around the design before filing bugs &ldquo;Achtung, Achtung, no validation!!!1&rdquo;.</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: May</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/06/02/hmms-may/" hreflang="en"/>
    <published>2020-06-02T20:33:43Z</published>
    <updated>2020-06-02T20:33:43Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-06-02:/articles/2020/06/02/hmms-may/</id>
    
    <summary type="html"><![CDATA[<p>This was a slow month in the sense of discovering new.</p>
<p>I finished the <a href="https://learn.particular.net/courses/adsd-online" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Advanced Distributed Systems Design&rdquo; course</a>.
CQRS, DDD, messaging patterns: doesn&rsquo;t sound like this course is in any way helpful for testers.
Yet being <em>just a tester</em> is dull. Exploring such courses helps to diminish the hardest
<a href="https://wiki.c2.com/?OrdersOfIgnorance" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">order of ignorance</a> &ldquo;I don&rsquo;t know what I don&rsquo;t know&rdquo;. And as I&rsquo;m wearing an
API designer hat more and more, learning about broader architectural stuff is essential.</p>]]></summary>
    <content type="html"><![CDATA[<p>This was a slow month in the sense of discovering new.</p>
<p>I finished the <a href="https://learn.particular.net/courses/adsd-online" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Advanced Distributed Systems Design&rdquo; course</a>.
CQRS, DDD, messaging patterns: doesn&rsquo;t sound like this course is in any way helpful for testers.
Yet being <em>just a tester</em> is dull. Exploring such courses helps to diminish the hardest
<a href="https://wiki.c2.com/?OrdersOfIgnorance" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">order of ignorance</a> &ldquo;I don&rsquo;t know what I don&rsquo;t know&rdquo;. And as I&rsquo;m wearing an
API designer hat more and more, learning about broader architectural stuff is essential.</p>
<p>Another &ldquo;merging the trenches&rdquo; experience was
<a href="https://blogs.mulesoft.com/dev/design-dev/intentional-api-consumer-experience/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">an article about using user types and personas for API design</a>.
Personas are a nifty tool for any team, but for me, it&rsquo;s been difficult to apply them consistently.
This is something I still need to learn and practice.</p>
<p><em>In these uncertain times, uncertainty is certain ©.</em> Right before the quarantine, I ordered a book
<a href="http://shop.oreilly.com/product/0636920201755.do" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Continuous API Management</a>. Well, it arrived. Today. On the
serious note, I&rsquo;m happy to start reading it, though I could have it finished in e-book format
while waiting xD</p>
<p>And a small off-topic, my other purchase this month was a drawing tablet
<a href="https://www.huion.com/pen_tablet/Inspiroy/H640P.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Huion H640P</a>. The good thing about it is that there are
proper drivers for Linux. And it&rsquo;s cheap =) Bad thing is that I&rsquo;ve just upgraded to Ubuntu 20.04 with 5.4 kernel
that is buggy and prevents these drivers from being installed. Oopsie. So, I&rsquo;m waiting until 5.6 kernel is stable
enough or  5.4 is fixed to fully dive into e-drawing. At the very least I&rsquo;d like to draw doodles and diagrams with it,
and maybe, MAYBE, actually learn to draw.</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: April</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/05/02/hmms-april/" hreflang="en"/>
    <published>2020-05-02T23:43:38Z</published>
    <updated>2020-05-02T23:43:38Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-05-02:/articles/2020/05/02/hmms-april/</id>
    
    <summary type="html"><![CDATA[<h2 id="learning" >
  <a class="group relative" href="#learning">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Learning</a>
</h2>
<p>One of the good things to emerge during the corona times is more educational opportunities.</p>
<p>For example, you can (and perhaps should) check the
<a href="https://learn.particular.net/courses/adsd-online" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Advanced Distributed Systems Design&rdquo; course</a> by Udi Dahan.</p>
<p>Another way to satisfy knowledge thirst is to attend a virtual conference:</p>]]></summary>
    <content type="html"><![CDATA[<h2 id="learning" >
  <a class="group relative" href="#learning">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Learning</a>
</h2>
<p>One of the good things to emerge during the corona times is more educational opportunities.</p>
<p>For example, you can (and perhaps should) check the
<a href="https://learn.particular.net/courses/adsd-online" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Advanced Distributed Systems Design&rdquo; course</a> by Udi Dahan.</p>
<p>Another way to satisfy knowledge thirst is to attend a virtual conference:</p>
<ul>
<li><a href="https://apithedocs.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API The Docs</a> hosts bite-sized virtual events with discussion opportunities.</li>
<li><a href="https://www.asyncapiconf.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">AsyncAPI</a> has finished already, but you can watch it on YouTube.</li>
<li><a href="https://www.onlinetestconf.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OnlineTestConf</a> is soon. I&rsquo;m particularly excited about
&ldquo;The Lessons we can Learn from the Aviation Industry&rdquo; by Conor Fitzgerald.</li>
</ul>
<h2 id="new-font" >
  <a class="group relative" href="#new-font">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>New font</a>
</h2>
<p>Any &ldquo;IT person&rdquo; should have a favorite monospaced font. Except for those weirdos who prefer non-monospaced.
I wasn&rsquo;t very original in this matter and used <a href="https://github.com/tonsky/FiraCode" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Fira Code</a> because it has
ligatures and proper support for Cyrillic.</p>
<p>Any &ldquo;IT person&rdquo; should also have a favorite IDE. Mine is PyCharm by JetBrains. Recently an amazing thing has happened:
JetBrains released their own monospaced font, <a href="https://www.jetbrains.com/lp/mono/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">JetBrains Mono</a>. The key feature is
an increased height of lowercase letters. Love it!</p>
<h2 id="fam0us" >
  <a class="group relative" href="#fam0us">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Fam0us</a>
</h2>
<p>I participated in <a href="https://www.angryweasel.com/ABTesting/abt-343-yuliya-bagriy-aviskase/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the podcast hosted by Alan Page</a>.</p>
<p>In retrospect, I should have &ldquo;rehearsed&rdquo; a bit more. For example, I somehow was able to forget the phrase
<em>open-book management.</em>  Or some answers could be more laconic and concise. Nevertheless, it was a great experience.</p>
<h2 id="visible-work" >
  <a class="group relative" href="#visible-work">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Visible work</a>
</h2>
<p>I slowly write <a href="https://netgovern.github.io/api-guidelines" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">our API guidelines</a>. Still work in progress,
but it&rsquo;s cool to have bits of your work visible and perhaps at some point serving others.
My admiration for companies who published their guidelines in the same matter
grew immensely: Adidas, PayPal, Heroku, Microsoft, Zalando, etc. It really helps to be able to see real artifacts and
not just generic NDA-sanitized dev blog posts.</p>
]]></content>
  </entry>
  <entry>
    <title>Using Insomnia for API exploration</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/" hreflang="en"/>
    <published>2020-04-22T01:06:01Z</published>
    <updated>2020-04-22T01:06:01Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-04-22:/articles/2020/04/22/using-insomnia-for-api-exploration/</id>
    
    <summary type="html"><![CDATA[<p>One of the tools I use almost daily is <a href="https://insomnia.rest/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Insomnia</a>.
It&rsquo;s a great alternative to the <em>P-everyone-knows-that-one.</em>
Insomnia is easy to use on Linux, has plugins, and UI is clean and simple.</p>
<p>Let me show you some basic features. We will use <a href="https://openweathermap.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenWeatherMap API</a>.</p>]]></summary>
    <content type="html"><![CDATA[<p>One of the tools I use almost daily is <a href="https://insomnia.rest/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Insomnia</a>.
It&rsquo;s a great alternative to the <em>P-everyone-knows-that-one.</em>
Insomnia is easy to use on Linux, has plugins, and UI is clean and simple.</p>
<p>Let me show you some basic features. We will use <a href="https://openweathermap.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenWeatherMap API</a>.</p>
<h2 id="workspaces" >
  <a class="group relative" href="#workspaces">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Workspaces</a>
</h2>
<p>Workspaces are collections of thematically combined requests. Some of my workspaces are service-specific,
while others contain everything related to the particular client use case or event (i.e., cross-service).</p>
<p>Our first examples: get current weather and forecast for Montreal. OpenWeatherMap API requires an API key,
so you need to add it to the query parameters for each request.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_1_hu_d488b90d1560a01a.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_1.png" alt="Insomnia: basic interface" defer>
	</picture>
	
</figure></p>
<h2 id="environments" >
  <a class="group relative" href="#environments">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Environments</a>
</h2>
<p>Too much duplication, isn&rsquo;t it?</p>
<p>Welcome to environments. Insomnia supports multi-layered variable assignments:</p>
<ul>
<li>
<p>Base environment: values are accessible regardless of which environment is selected.</p>
</li>
<li>
<p>Sub environments: you can create as many as you want. Especially useful for testing APIs on different servers.</p>
</li>
<li>
<p>Folder-level environment: requests can be grouped by folders and sometimes it makes sense to assign specific values
to all requests in the folder.</p>
</li>
</ul>
<p>Ok, so for this API let&rsquo;s do like this. <code>https://api.openweathermap.org/data/2.5</code> can go into base,
because we have access only to one server.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_2_hu_be2a89ecaff1d6d7.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_2.png" alt="Insomnia: base environment" defer>
	</picture>
	
</figure></p>
<p>An API key is perfect for the sub environment.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_3_hu_9aa2c78def955108.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_3.png" alt="Insomnia: sub environment" defer>
	</picture>
	
</figure></p>
<p><em>&ldquo;Montreal&rdquo;</em> is stored as a folder-level value, just for the sake of example.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_4_hu_d53fd851ff9a216b.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_4.png" alt="Insomnia: folder-level environment" defer>
	</picture>
	
</figure></p>
<p>Then, our requests will look like (use <code>{{var_name}}</code> to access variable):</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_5_hu_4856ba5779b1bf35.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_5.png" alt="Insomnia: requests with variables from environments" defer>
	</picture>
	
</figure></p>
<p>You might notice that we still have to fill out the API key query parameter for each request. Kinda boring.
That&rsquo;s where plugins can help, in this case, it&rsquo;s <code>insomnia-plugin-defaults</code>.
Just go into <em>Preferences &gt; Plugins</em> and type its name to install.
This plugin allows us to set default headers and/or query parameters in the environments.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_6_hu_156124a7c7cfa256.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_6.png" alt="Insomnia: environment setup with query param defaults" defer>
	</picture>
	
</figure></p>
<p>And now we can remove it from requests:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_7_hu_70dce02822aa04c4.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_7.png" alt="Insomnia: requests with default query params" defer>
	</picture>
	
</figure></p>
<h2 id="response-querying" >
  <a class="group relative" href="#response-querying">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Response querying</a>
</h2>
<p>The response for the forecast API is big. What if we want to check all returned values for
weather descriptions? We can do it by using JSONPath response filtering.</p>
<p><code>$.list[*].weather[*].description</code> means <em>&lsquo;Get descriptions from each element of <code>weather</code>
array that is a property of elements in the <code>list</code> array&rsquo;</em>.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_8_hu_4e3acf9bf438928d.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_8.png" alt="Insomnia: querying response using JSONPath" defer>
	</picture>
	
</figure></p>
<h2 id="generating-values" >
  <a class="group relative" href="#generating-values">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Generating values</a>
</h2>
<p>Sometimes we want to use random values. Insomnia has embedded
<a href="https://support.insomnia.rest/article/40-template-tags" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">template tags</a> for that, like timestamp and UUID. For other
cases plugins come to the rescue yet again: <code>insomnia-plugin-random</code> uses <a href="https://chancejs.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Chance</a> library
which gives you tons of options.</p>
<p>Here is how to generate random latitude and longitude coordinates:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_9_hu_146e69de675cca6a.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_9.png" alt="Insomnia: random value generation" defer>
	</picture>
	
</figure></p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_10_hu_860f80608e3f96a.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_10.png" alt="Insomnia: usage of generated values in the request" defer>
	</picture>
	
</figure></p>
<p>BTW, use <span><kbd>Ctrl</kbd><span class="py-0 px-1">+</span><kbd>Space</kbd></span>
 shortcut for the fastest template tag autocomplete.</p>
<h2 id="reusing-response-values" >
  <a class="group relative" href="#reusing-response-values">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Reusing response values</a>
</h2>
<p>Another commonly used feature is sending a request with values from the response of another request.
In Insomnia you should use <code>Response</code> template tag and JSONPath if you want to grab a value from the response body:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_11_hu_6467d274a70787cb.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_11.png" alt="Insomnia: pulling values from previous response" defer>
	</picture>
	
</figure></p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_12_hu_a084006d768ad54c.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_12.png" alt="Insomnia: request with pulled values" defer>
	</picture>
	
</figure></p>
<p>Pretty simple, huh?</p>
<p>There are other useful features and no one stops you from writing a plugin if you miss anything. But, s&rsquo;il te plaît,
don&rsquo;t try to turn it into a complex automation solution. That&rsquo;s what programming languages are for.</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: March</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/03/31/hmms-march/" hreflang="en"/>
    <published>2020-03-31T20:24:05Z</published>
    <updated>2020-03-31T20:24:05Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-03-31:/articles/2020/03/31/hmms-march/</id>
    
    <summary type="html"><![CDATA[<p>Coronavirus-free edition!</p>
<h2 id="top-x-videos-and-readings" >
  <a class="group relative" href="#top-x-videos-and-readings">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Top X videos and readings</a>
</h2>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/03/31/hmms-march/apis_meme_hu_6a201d55f49f102b.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/03/31/hmms-march/apis_meme.jpg" alt="Meme: APIs, APIs everywhere" defer>
	</picture>
	
</figure></p>
<ul>
<li>
<p>Erik Wilde started a video series about API design,
and <a href="https://www.youtube.com/watch?v=qc_DF01qgZg" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the last one</a> covers pros and cons of exposing system APIs.</p>
</li>
<li>
<p>Tyk explains <a href="https://tyk.io/considerations-before-building-your-own-api-gateway/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">why you shouldn&rsquo;t write our own API gateway</a>.
I particularly liked this part:</p>]]></summary>
    <content type="html"><![CDATA[<p>Coronavirus-free edition!</p>
<h2 id="top-x-videos-and-readings" >
  <a class="group relative" href="#top-x-videos-and-readings">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Top X videos and readings</a>
</h2>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2020/03/31/hmms-march/apis_meme_hu_6a201d55f49f102b.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2020/03/31/hmms-march/apis_meme.jpg" alt="Meme: APIs, APIs everywhere" defer>
	</picture>
	
</figure></p>
<ul>
<li>
<p>Erik Wilde started a video series about API design,
and <a href="https://www.youtube.com/watch?v=qc_DF01qgZg" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the last one</a> covers pros and cons of exposing system APIs.</p>
</li>
<li>
<p>Tyk explains <a href="https://tyk.io/considerations-before-building-your-own-api-gateway/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">why you shouldn&rsquo;t write our own API gateway</a>.
I particularly liked this part:</p>
</li>
</ul>
<blockquote>
<p>Another chose to build their own API gateway because no offerings existed that would operate in their
preferred Windows-based server environment.
I haven’t heard from them since as they still haven’t shipped their product &mdash; a full year later.</p>
</blockquote>
<ul>
<li>
<p>Adidas has awesome API guidelines and recently they&rsquo;ve published <a href="https://github.com/adidas/api-pm-training" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">their API training for PMs</a>.
If they ever decide to offer public trainings, I would love to participate: some of the modules are a bit too
business-y for me to comprehend without hands-on experience.</p>
</li>
<li>
<p>Almost non-API topic. Why you should always carefully read RFCs and standards: in this case,
<a href="https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">what is the proper input type for numbers</a>.</p>
</li>
</ul>
<h2 id="testing-vs-dx" >
  <a class="group relative" href="#testing-vs-dx">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Testing vs DX</a>
</h2>
<p>While I was reading <a href="https://nordicapis.com/why-your-api-needs-a-dedicated-developer-experience-team/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">an article about DX teams</a>,
it came to me that I&rsquo;m (at least partially) not a tester. I mean, I knew it, but I didn&rsquo;t have a proper name for that.</p>
<p>So, what does DX specialist do?</p>
<ul>
<li>API design</li>
<li>QA. Clarification: not the obvious &ldquo;I&rsquo;m capable of sending requests&rdquo; part, but more about contract testing, linting,
style guides, and docs.</li>
<li>Tooling</li>
<li>Developer relations</li>
</ul>
<p>What&rsquo;s funny is that if you read that article carefully you won&rsquo;t find any mentions of testers.
None. There are tech writers, advocates, but no testers whatsoever. In fact, in any non-Postman induced article about API
there are no presence of testers. <em>And it&rsquo;s totally fine.</em></p>
<h2 id="remote-work" >
  <a class="group relative" href="#remote-work">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Remote work</a>
</h2>
<p>Sorry, it&rsquo;s not totally coronavirus-free edition. Almost everyone works remotely now, so there is an avalanche of
articles about how to work from home. The company I dearly love even decided to offer <em>a payed</em> conference (frack you).</p>
<p>I&rsquo;ve started my career as a fully remote worker and was there for three years. Next two years I was working from home
at least one day a week, often more. One would say I have immense amount of tips and tricks to share, but <em>I don&rsquo;t</em>.
Because I&rsquo;ve never been accustomed to the office work in the first place. I had to learn how to work NOT from home.</p>
<p>All the sad things aside, it&rsquo;s curious how much this experience can change companies in the positive way.
Some didn&rsquo;t even consider before that their work can be done remotely. Perhaps we will see a surge of remote-friendly
and/or flexible hours positions (which are rare at the moment)?</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: February</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/03/08/hmms-february/" hreflang="en"/>
    <published>2020-03-08T00:35:17Z</published>
    <updated>2020-03-08T00:35:17Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-03-08:/articles/2020/03/08/hmms-february/</id>
    
    <summary type="html"><![CDATA[<p>It&rsquo;s March already, time to summarize February!</p>
<h2 id="apis-trainings" >
  <a class="group relative" href="#apis-trainings">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>APIs trainings</a>
</h2>
<p>I did a small company-wide training about APIs. Here is <a href="https://github.com/aviskase/trucs/blob/master/api101.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the main deck</a>
and <a href="https://github.com/aviskase/trucs/blob/master/api_salad.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">supplementary deck</a> left from dev lunch&amp;learn.
Anyone is free to use it and if you have questions just ping me somewhere. They don&rsquo;t have notes, so can be pretty
cryptic, but I am inclined to continue improving them to use for new hires.</p>]]></summary>
    <content type="html"><![CDATA[<p>It&rsquo;s March already, time to summarize February!</p>
<h2 id="apis-trainings" >
  <a class="group relative" href="#apis-trainings">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>APIs trainings</a>
</h2>
<p>I did a small company-wide training about APIs. Here is <a href="https://github.com/aviskase/trucs/blob/master/api101.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the main deck</a>
and <a href="https://github.com/aviskase/trucs/blob/master/api_salad.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">supplementary deck</a> left from dev lunch&amp;learn.
Anyone is free to use it and if you have questions just ping me somewhere. They don&rsquo;t have notes, so can be pretty
cryptic, but I am inclined to continue improving them to use for new hires.</p>
<p>The most important feedback was from members of marketing and tech writing teams. I failed to properly address &ldquo;why&rsquo;s&rdquo;
and they felt a bit lost. Which is a great reminder that by being constantly in the &ldquo;dev soup,&rdquo; you falsely assume that everyone
understands how immense APIs&rsquo; power and impact are.</p>
<h2 id="readings" >
  <a class="group relative" href="#readings">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Readings</a>
</h2>
<p><a href="https://www.canada.ca/en/government/system/digital-government/modern-emerging-technologies/government-canada-standards-apis.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Government of Canada published standards on APIs</a>.
Not perfect, but it&rsquo;s great to see not only corporates showing their development practices but also the public sector.</p>
<p>Curity suggested a simple <a href="https://curity.io/resources/architect/api-security/the-api-security-maturity-model/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;API security maturity model</a>.
All models are wrong, but some are useful, including this one.</p>
<p>While <a href="https://www.a-sisyphean-task.com/2020/01/why-we-need-to-get-rid-of-thought.html?goal=0_02cca1920b-49fb91397f-289479173&amp;mc_cid=49fb91397f&amp;mc_eid=8933fe8877" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Why we need to get rid of thought leaders&rdquo;</a>
article by Adam Knight makes interesting points, I actually hoped it to cover &ldquo;the leaders&rdquo; problem. And this segues us
to the next section&hellip;</p>
<h2 id="leaders-and-their-followers" >
  <a class="group relative" href="#leaders-and-their-followers">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Leaders and their followers</a>
</h2>
<p>Perhaps I&rsquo;m stating the obvious fact, but here it is: do not ever assume that appreciating content created
by the person correlates with wanting to be/stay a part of their community. Because true meanings are shown in
<a href="https://www.ted.com/talks/derek_sivers_how_to_start_a_movement/transcript?language=en" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the interactions between the leader and the followers</a>.</p>
<p>As I still have respect and hope for innovations from those people, I will keep it general. There are two communities,
both sparkled by well-known persons. I was eager to join both and quickly enough found them almost at odds. And
while one is chill and mildly sarcastic about it, the other keeps being almost aggressive. The biggest
problem with the second community <em>for me</em> is that the most vocal followers act as non-debatable intellectuals
who paint everything in absolutes and this behavior is <em>supported by their leaders.</em>  Well. You never know until you
dive in.</p>
]]></content>
  </entry>
  <entry>
    <title>API testing in Python: requests vs bravado</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/02/07/api-testing-in-python-requests-vs-bravado/" hreflang="en"/>
    <published>2020-02-07T23:40:44Z</published>
    <updated>2020-02-07T23:40:44Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-02-07:/articles/2020/02/07/api-testing-in-python-requests-vs-bravado/</id>
    
    <summary type="html"><![CDATA[<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>This article is written as a result of collaboration with <a href="https://testproject.io/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">TestProject</a>.
While many of you know me as <a href="https://www.aviskase.com/articles/2019/11/25/why-i-dont-use-postman/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a GUI-driven tools hater</a>,
that&rsquo;s just my preference, so if something works for you and your company, that&rsquo;s the only thing
that matters. There are no best practices and there are no best tools for everyone.</p>]]></summary>
    <content type="html"><![CDATA[<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>This article is written as a result of collaboration with <a href="https://testproject.io/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">TestProject</a>.
While many of you know me as <a href="https://www.aviskase.com/articles/2019/11/25/why-i-dont-use-postman/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a GUI-driven tools hater</a>,
that&rsquo;s just my preference, so if something works for you and your company, that&rsquo;s the only thing
that matters. There are no best practices and there are no best tools for everyone.</p>
<p>What I really admire the TestProject team for is their strategy of creating a knowledge-sharing community.
And their product has a totally free usage tier. You don&rsquo;t see such combo often.</p></div>
<p>API testing is not an uncommon topic and you can find a gazillion of articles about it. If you check tutorials in
Java or JavaScript, you’ll notice that they use a plethora of diverse libraries. Yet for Python
<a href="https://www.dowen.me.uk/Automated-rest-api-testing-with-python/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">tutorials</a> are usually based on general-purpose
<a href="https://requests.kennethreitz.org" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">requests</a> library. In this article, I would like to suggest a different approach.</p>
<p>Warning: all code examples are written and checked in Python 3.7.
<a href="https://github.com/aviskase/testproject-api-example" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">You can find the source code here</a>.</p>
<p>TestProject has an API based <a href="https://api.testproject.io/docs/v2/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">on OpenAPI 2.0 specification</a>.
I’ll use it as an example. If you want to try yourself, don’t forget to create an API key!</p>
<p>Let’s start with the plain old <em>requests</em> first. But before diving into coding, I suggest <strong>thinking</strong> about what your
framework should be capable of. Don’t spend too much time on the design though, premature overengineering is harmful.</p>
<p>TestProject API is structured around different resources and methods. For example, to get information about a specific
project you should use <code>projects/{identifier}</code> endpoint with method GET. You’ll probably soon get tired writing
<code>request.get(&lt;params&gt;)</code> all the time, so let’s create a custom function (or method).</p>
<p>The next commonly used piece is authorization. All calls to API require <code>Authorization</code> header with your API key.
But sometimes you want to pass additional headers, so your framework should support that as well.</p>
<p>This is an example class I wrote:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">import</span> requests
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">APITestProject</span>:
</span></span><span style="display:flex;"><span>    endpoint <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;https://api.testproject.io/v2&#39;</span>
</span></span><span style="display:flex;"><span>    auth_headers <span style="color:#ff79c6">=</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> __init__(self, api_key<span style="color:#ff79c6">=</span><span style="color:#ff79c6">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Sometimes we don&#39;t want to authorize requests</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> api_key:
</span></span><span style="display:flex;"><span>            self<span style="color:#ff79c6">.</span>auth_headers <span style="color:#ff79c6">=</span> {<span style="color:#f1fa8c">&#39;Authorization&#39;</span>: api_key}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">_construct_headers</span>(self, headers):
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Allows to combine authorization header with per-request custom headers</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> <span style="color:#8be9fd;font-style:italic">isinstance</span>(headers, <span style="color:#8be9fd;font-style:italic">dict</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#ff79c6">return</span> {<span style="color:#ff79c6">**</span>self<span style="color:#ff79c6">.</span>auth_headers, <span style="color:#ff79c6">**</span>headers}
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> self<span style="color:#ff79c6">.</span>auth_headers
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> <span style="color:#50fa7b">get_specific_project</span>(self, identifier, headers<span style="color:#ff79c6">=</span><span style="color:#ff79c6">None</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">return</span> requests<span style="color:#ff79c6">.</span>get(<span style="color:#f1fa8c">f</span><span style="color:#f1fa8c">&#39;</span><span style="color:#f1fa8c">{</span>self<span style="color:#ff79c6">.</span>endpoint<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">/projects/</span><span style="color:#f1fa8c">{</span>identifier<span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#39;</span>, headers<span style="color:#ff79c6">=</span>self<span style="color:#ff79c6">.</span>_construct_headers(headers))
</span></span></code></pre></div><p>Now it’s time to write simple tests. I use <em>pytest</em> as a test runner because of its versatility and pluggability.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">import</span> pytest
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> requests_client.api_testproject <span style="color:#ff79c6">import</span> APITestProject
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@pytest.fixture(scope<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#39;module&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">api</span>(api_key):
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> APITestProject(api_key)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">test_get_specific_project</span>(api, existing_project):
</span></span><span style="display:flex;"><span>    response <span style="color:#ff79c6">=</span> api<span style="color:#ff79c6">.</span>get_specific_project(existing_project)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">assert</span> response<span style="color:#ff79c6">.</span>status_code <span style="color:#ff79c6">==</span> <span style="color:#bd93f9">200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">test_get_nonexisting_project</span>(api):
</span></span><span style="display:flex;"><span>    response <span style="color:#ff79c6">=</span> api<span style="color:#ff79c6">.</span>get_specific_project(<span style="color:#f1fa8c">&#39;iZyZmrbAAkuHyqdB3O6fHd&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">assert</span> response<span style="color:#ff79c6">.</span>status_code <span style="color:#ff79c6">==</span> <span style="color:#bd93f9">404</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">test_get_specific_project_accept_html</span>(api, existing_project):
</span></span><span style="display:flex;"><span>    response <span style="color:#ff79c6">=</span> api<span style="color:#ff79c6">.</span>get_specific_project(existing_project, headers<span style="color:#ff79c6">=</span>{<span style="color:#f1fa8c">&#39;Accept&#39;</span>: <span style="color:#f1fa8c">&#39;text/html&#39;</span>})
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">assert</span> response<span style="color:#ff79c6">.</span>status_code <span style="color:#ff79c6">==</span> <span style="color:#bd93f9">406</span>
</span></span></code></pre></div><p>If you are not familiar with pytest fixtures, you can read about them in
<a href="https://docs.pytest.org/en/latest/fixture.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the official documentation</a>. In short, here I have three fixtures:</p>
<ul>
<li><code>api_key</code> — defined in <code>conftest.py</code> and returns a string with my API key</li>
<li><code>existing_project</code> — defined in <code>conftest.py</code> and returns a string with id of one of my project</li>
<li><code>api</code> — constructs a default client for API using an API key</li>
</ul>
<p>Tests are pretty straightforward:</p>
<ul>
<li>Retrieve information about the existing project.</li>
<li>Attempt to get information using non-existing project id.</li>
<li>Attempt to retrieve information about the existing project while asking to send information in the HTML format.</li>
</ul>
<p>They assert only responses’ status codes (not the best tests ever). But take a look at the last test. At the time
of writing the only officially supported response content types were: <code>application/json</code>, <code>text/json</code>, <code>text/plain</code>, and
<code>application/json-patch+json</code>. Though, if you take a careful look at the description doc, you’ll notice that
<code>application/xml</code> is supported too. Anyway, with <code>Accept: text/html</code> you’d expect server to respond with
<code>406 Not Acceptable</code>. Yet, that’s not the case: the current version responds with 200 code and plain text json body.
It&rsquo;s not a serious issue, but it&rsquo;s worth exploring because it means that there are places where server capabilities
don&rsquo;t match the published description doc. I suspect it&rsquo;s a sign of a design-first approach (which I like!), but it can
be hard to manage.</p>
<p>As you noticed, for creating API tests using requests library we need to write a lot of boilerplate code:</p>
<ul>
<li>Wrappers for headers and query string managements.</li>
<li>Methods/functions written in business terms rather than GET/POST/etc way.</li>
<li>Constructing endpoints path (concatenating the main URL with paths, ids, and query parameters).</li>
</ul>
<p>Basically, you create a whole API client. And we haven’t even touched data models. Oh, if only this could be
simplified and automated, right? And it can! Welcome to the brave <em>old</em> world of client generation based on API
description docs. TestProject doesn&rsquo;t just provide endpoints but also has a description doc to describe their API.
Currently, it’s based on Open API 2.0, or, as many people still call it, Swagger. This description doc is used to
generate a documentation UI with &ldquo;Try out&rdquo; capabilities, and it also can be used for client generation. Personally, I
ended up using <a href="https://github.com/Yelp/bravado" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">bravado</a> library for this task.</p>
<p>Here is how our small class will look with bravado:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">import</span> json
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> pathlib <span style="color:#ff79c6">import</span> Path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> bravado.client <span style="color:#ff79c6">import</span> SwaggerClient
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> bravado.requests_client <span style="color:#ff79c6">import</span> RequestsClient
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">class</span> <span style="color:#50fa7b">APITestProject</span>:
</span></span><span style="display:flex;"><span>    host <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;api.testproject.io&#39;</span>
</span></span><span style="display:flex;"><span>    swagger_spec <span style="color:#ff79c6">=</span> <span style="color:#f1fa8c">&#39;https://api.testproject.io/docs/v2/swagger.json&#39;</span>
</span></span><span style="display:flex;"><span>    swagger_file <span style="color:#ff79c6">=</span> Path(__file__)<span style="color:#ff79c6">.</span>parent <span style="color:#ff79c6">/</span> <span style="color:#f1fa8c">&#39;swagger.json&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">def</span> __init__(self, api_key<span style="color:#ff79c6">=</span><span style="color:#ff79c6">None</span>):
</span></span><span style="display:flex;"><span>        http_client <span style="color:#ff79c6">=</span> RequestsClient()
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">if</span> api_key:
</span></span><span style="display:flex;"><span>            http_client<span style="color:#ff79c6">.</span>set_api_key(self<span style="color:#ff79c6">.</span>host, api_key, param_name<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#39;Authorization&#39;</span>, param_in<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#39;header&#39;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># Usually I&#39;ll use `from_url` generation, but current version of specification is not valid OpenAPI 2.0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#6272a4"># self.client = SwaggerClient.from_url(self.swagger_spec, http_client=http_client)</span>
</span></span><span style="display:flex;"><span>        swagger_spec <span style="color:#ff79c6">=</span> json<span style="color:#ff79c6">.</span>load(self<span style="color:#ff79c6">.</span>swagger_file<span style="color:#ff79c6">.</span>open())
</span></span><span style="display:flex;"><span>        self<span style="color:#ff79c6">.</span>client <span style="color:#ff79c6">=</span> SwaggerClient<span style="color:#ff79c6">.</span>from_spec(swagger_spec, http_client<span style="color:#ff79c6">=</span>http_client)
</span></span></code></pre></div><p>There are two ways to generate a client with bravado: pointing either to URL where description doc is hosted or to
the local file. The example uses local file because bravado doesn&rsquo;t just simply generate client, but also can
perform validation, and unfortunately at the time of writing TestProject API description doc contains some invalid
attributes. But that’s a great thing! Even though developers should be using linters to check for such problems, it
is still a good idea to recheck during integration tests. Another nice feature is that bravado performs requests and
response validation, which can help find dynamic problems. For example, if the description doc says that the field in
the response should be an integer, yet you received a string, you’ll get an exception even if there were no explicit
assertions for that field in the test. Of course, you can disable all validations, though, I wouldn&rsquo;t recommend that.</p>
<p>So, let’s go back to the tests and see how they look with bravado based client:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">import</span> pytest
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> bravado.exception <span style="color:#ff79c6">import</span> HTTPNotFound, HTTPNotAcceptable
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> bravado_client.api_testproject <span style="color:#ff79c6">import</span> APITestProject
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@pytest.fixture(scope<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#39;module&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">api</span>(api_key):
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">return</span> APITestProject(api_key)<span style="color:#ff79c6">.</span>client
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">test_get_specific_project</span>(api, existing_project):
</span></span><span style="display:flex;"><span>    response <span style="color:#ff79c6">=</span> api<span style="color:#ff79c6">.</span>Projects<span style="color:#ff79c6">.</span>Projects_GetProject(projectId<span style="color:#ff79c6">=</span>existing_project)<span style="color:#ff79c6">.</span>response()
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">assert</span> response<span style="color:#ff79c6">.</span>metadata<span style="color:#ff79c6">.</span>status_code <span style="color:#ff79c6">==</span> <span style="color:#bd93f9">200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">test_get_nonexisting_project</span>(api):
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">with</span> pytest<span style="color:#ff79c6">.</span>raises(HTTPNotFound):
</span></span><span style="display:flex;"><span>        api<span style="color:#ff79c6">.</span>Projects<span style="color:#ff79c6">.</span>Projects_GetProject(projectId<span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#39;iZyZmrbAAkuHyqdB3O6fHd&#39;</span>)<span style="color:#ff79c6">.</span>response()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">def</span> <span style="color:#50fa7b">test_get_specific_project_accept_html</span>(api, existing_project):
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">with</span> pytest<span style="color:#ff79c6">.</span>raises(HTTPNotAcceptable):
</span></span><span style="display:flex;"><span>        api<span style="color:#ff79c6">.</span>Projects<span style="color:#ff79c6">.</span>Projects_GetProject(
</span></span><span style="display:flex;"><span>            projectId<span style="color:#ff79c6">=</span>existing_project,
</span></span><span style="display:flex;"><span>            _request_options<span style="color:#ff79c6">=</span>{<span style="color:#f1fa8c">&#39;headers&#39;</span>: {<span style="color:#f1fa8c">&#39;Accept&#39;</span>: <span style="color:#f1fa8c">&#39;text/html&#39;</span>}}
</span></span><span style="display:flex;"><span>        )<span style="color:#ff79c6">.</span>response()
</span></span></code></pre></div><p>Did you notice magic there? I don’t need to write code with GETs anymore. Bravado generates resources and methods
for them automagically. Usually, they are based on tag and <code>operationId</code>, so for getting a specific project:
<code>tag=Projects</code> and <code>operationId=Projects_GetProject</code>. Another difference is that bravado throws an exception if the
response code is not 2xx. In my view, <code>HTTPNotAcceptable</code> is more readable than a number 406.</p>
<p>Now it’s time to check how using client generation library helps to improve on a barebone approach with requests:</p>
<ul>
<li>No need for custom headers and query string management, it’s already written by library developers.
With bravado you can have default headers for each request as well as per request custom headers.</li>
<li>Methods/functions are generated and sound more domain-specific (though, it depends on how accurate was
naming of operationIds).</li>
<li>The only endpoint you should worry about is where the description doc is hosted, or, if using the local file,
the <code>host</code> attribute.</li>
</ul>
<p>Don’t forget, all magic comes with a price. Client generators are not perfect for everyone:</p>
<ul>
<li>Autogeneration is useless for constantly changing APIs. Though, it’s considered a bad practice,
because real customers also use client generators and each breaking change is a pain for them.</li>
<li>Sometimes you want to make invalid requests. In some cases, you can simply turn off request validation,
but usually making real fuzzy tests is easier with general-purpose HTTP libraries.</li>
<li>Not your code. There could be bugs. Be careful when selecting a library, it’s better to be open source with
fresh contributions. Also, pay attention to supported specifications: bravado does not support OpenAPI 3.0 =(</li>
</ul>
<p>The world of API related tools and libraries is enormous. Some people prefer GUI-driven tools like Postman or
TestProject, others prefer to code. Next time you’ll be writing automation, don’t feel restricted to common generic
libraries and consider different alternatives.</p>
]]></content>
  </entry>
  <entry>
    <title>Hmms: January</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2020/02/01/hmms-january/" hreflang="en"/>
    <published>2020-02-01T23:16:38Z</published>
    <updated>2020-02-01T23:16:38Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-02-01:/articles/2020/02/01/hmms-january/</id>
    
    <summary type="html"><![CDATA[<p>Hi! Weekly hmms are transformed into monthly hmms, mostly because writing mandatory weekly posts is too cumbersome
and leaves no time to do more thematic writing. Of course, there are other reasons too. Almost all winter holidays
I had a cold (TWICE!) and being ill isn&rsquo;t the best motivation ever.</p>]]></summary>
    <content type="html"><![CDATA[<p>Hi! Weekly hmms are transformed into monthly hmms, mostly because writing mandatory weekly posts is too cumbersome
and leaves no time to do more thematic writing. Of course, there are other reasons too. Almost all winter holidays
I had a cold (TWICE!) and being ill isn&rsquo;t the best motivation ever.</p>
<h2 id="knowledge-bits" >
  <a class="group relative" href="#knowledge-bits">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Knowledge bits</a>
</h2>
<p>I didn&rsquo;t read or watch much, but some of the interesting findings were:</p>
<ul>
<li><a href="https://servicemesh.io/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">A good site&amp;article about service meshes</a> Be wary though, the author is quite opinionated.</li>
<li><a href="https://www.youtube.com/watch?v=O8Hx4tFW4PU" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Crafting effective 1:1s for distributed teams&rdquo;</a> talk by Spencer Norman.</li>
<li><a href="https://phil.tech/api/2019/12/28/modern-web-api-frameworks/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What Phil Sturgeon expects from modern Web API frameworks</a>. He expects a lot =)</li>
<li>Great summary about <a href="https://martinfowler.com/articles/on-pair-programming.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">pair programming by Birgitta Böckeler and Nina Siessegger</a>.</li>
<li>A very old article <a href="https://pdfs.semanticscholar.org/7eee/629b22cd3db63296cac13a0c37cb0a7235f6.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">by Robert L. Glass on fundamental software engineering facts</a>. Perhaps some of the facts are questionable, but &ldquo;Reviews and inspections&rdquo; section is awesome.</li>
</ul>
<h2 id="work-things" >
  <a class="group relative" href="#work-things">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Work things</a>
</h2>
<p>The company I work for was recognized as one of <a href="https://reviews.canadastop100.com/top-employer-netgovern" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Montreal&rsquo;s top employers</a>.
While I&rsquo;m quite skeptical of such ratings and rewards, I know for sure that <em>we are better than some other winners.</em></p>
<h2 id="gaming" >
  <a class="group relative" href="#gaming">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Gaming</a>
</h2>
<p>Ouch. Even though I was near computers from birth, I never was a gamer. I played only:</p>
<ul>
<li>old Tomb Raiders (up until missions with driving: I suck at it),</li>
<li>Lineage2 (started playing because classmates were talking about it, but it&rsquo;s impossible to solo there)</li>
<li>Dofus / Wakfu (to learn French)</li>
</ul>
<p>Strictly speaking, my approach is more of a &ldquo;watcher.&rdquo; I watched my father play Wolfenstein, Doom, and Quake. And I&rsquo;m
subscribed to <a href="https://www.youtube.com/user/SovietWomble" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">SovietWomble channel</a>. BTW, it&rsquo;s really awesome, once you watch
one or two videos and understand relationships between Soviet, Cy, and others, you&rsquo;d perceive these videos not as some
gaming stream cuts, but as a real-life sitcom. Honestly, way funnier than TBBT.</p>
<p>Recently I&rsquo;ve read an article about space/volume perception. Usually, you learn how to properly calculate your own
&ldquo;body volume&rdquo; and other objects&rsquo; during childhood. In my case, it didn&rsquo;t work out well, so I still have trouble navigating
narrow spaces. Combined with slow conscious reaction time it&rsquo;s a no-no for driving. Yet, apparently, computer games
prove to be very effective in improving volume perception and reaction times for adults.</p>
<p>I also wanted to do something other than watching YouTube during the braindead moments. So, I&rsquo;ve decided to find a
solo-friendly game, with a big open world, not hardcore,
and preferable MMO: even though I prefer to play by myself, there is something comforting in seeing real people
around and occasionally helping others (or receiving help). The perfect choice is The Elder Scrolls Online. The other
recommended game is Star Wars: The Old Republic, but it&rsquo;s too much Star Wars today. And TES has great lore.
Even though I never played Skyrim or Morrowind, TES wiki is an awesome read for people interested in sci-fi &amp; fantasy genres.</p>
<p>FYI, I play on the PC NA server ;)</p>
]]></content>
  </entry>
  <entry>
    <title>Lunch&amp;Learn: linting OpenAPI description docs</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/12/26/lunchlearn-linting-openapi-description-docs/" hreflang="en"/>
    <published>2019-12-26T19:21:00Z</published>
    <updated>2019-12-26T19:21:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-12-26:/articles/2019/12/26/lunchlearn-linting-openapi-description-docs/</id>
    
    <summary type="html"><![CDATA[<p>Last yearly company retrospective showed that we want to be better at knowledge sharing. One of the suggested formats is Lunch&amp;Learn, kinda like Google&rsquo;s <a href="https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Testing on the Toilet</a>: short non-mandatory meeting during the lunchtime (30min) with shared recording later.</p>
<p>I&rsquo;ve started to use them for API related topics. Tools, terminology, and other small but important things that would be beneficial to most of the development team (FYI, <em>testers are part of the dev team, duh</em>). Also, it&rsquo;s an opportunity to organize my brain, so I&rsquo;ll be posting notes here for future reference. One thing though, <strong>these posts are not supposed to be comprehensive:</strong> there is only information applicable to my team!</p>]]></summary>
    <content type="html"><![CDATA[<p>Last yearly company retrospective showed that we want to be better at knowledge sharing. One of the suggested formats is Lunch&amp;Learn, kinda like Google&rsquo;s <a href="https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Testing on the Toilet</a>: short non-mandatory meeting during the lunchtime (30min) with shared recording later.</p>
<p>I&rsquo;ve started to use them for API related topics. Tools, terminology, and other small but important things that would be beneficial to most of the development team (FYI, <em>testers are part of the dev team, duh</em>). Also, it&rsquo;s an opportunity to organize my brain, so I&rsquo;ll be posting notes here for future reference. One thing though, <strong>these posts are not supposed to be comprehensive:</strong> there is only information applicable to my team!</p>
<h2 id="validation-vs-linting" >
  <a class="group relative" href="#validation-vs-linting">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Validation vs. linting</a>
</h2>
<p>Anyone remotely familiar with coding knows that validators and linters are important for successful development. Shortly, validators check &ldquo;does X conform to the standards/specification,&rdquo; whereas linters complain about style and design issues. Usually, tools combine both in some way.</p>
<p>Here I&rsquo;ll cover linters for OpenAPI description documents. But you can use linting for everything, from obvious source code files to shell scripts or markdown documents.</p>
<h2 id="why-we-need-a-linter-for-openapi-description-docs" >
  <a class="group relative" href="#why-we-need-a-linter-for-openapi-description-docs">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Why we need a linter for OpenAPI description docs</a>
</h2>
<p>We&rsquo;ve started writing style guidelines for our APIs. Usually, I am that nitpicky person to review description docs; but I am lazy. <em>I choose to automate myself out of the job.</em> I don&rsquo;t want to spend time checking for obvious style violations like capitalization or error definitions. And by the way, it would speed up the process.</p>
<p>Because of that, our current requirements for the linter are:</p>
<ul>
<li>easy to set up and run locally (so that devs and testers could use it without pain)</li>
<li>can be run via Jenkins</li>
<li>possible to customize with our own rules</li>
<li>support for OpenAPI 2</li>
<li>has a future: development is active and there is at least the possibility of OpenAPI 3 support</li>
</ul>
<h2 id="current-implicit-validation" >
  <a class="group relative" href="#current-implicit-validation">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Current implicit validation</a>
</h2>
<p>Right now we have description docs validation during integration tests, where we use <a href="https://github.com/Yelp/bravado" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">bravado</a> library for client generation. By default, it has some validation on doc load, and if the doc is invalid, bravado will complain. Internally it uses <a href="https://github.com/Yelp/swagger_spec_validator" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">swagger_spec_validator</a>. Here is a small script to show how it&rsquo;s typical <em>exceptional</em> output looks like.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#ff79c6">import</span> argparse
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> pathlib <span style="color:#ff79c6">import</span> Path
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">from</span> swagger_spec_validator <span style="color:#ff79c6">import</span> validate_spec_url
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>parser <span style="color:#ff79c6">=</span> argparse<span style="color:#ff79c6">.</span>ArgumentParser()
</span></span><span style="display:flex;"><span>parser<span style="color:#ff79c6">.</span>add_argument(
</span></span><span style="display:flex;"><span>    <span style="color:#f1fa8c">&#34;openapi_spec&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#8be9fd;font-style:italic">type</span><span style="color:#ff79c6">=</span><span style="color:#ff79c6">lambda</span> p: Path(p)<span style="color:#ff79c6">.</span>absolute()<span style="color:#ff79c6">.</span>as_uri()
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>p <span style="color:#ff79c6">=</span> parser<span style="color:#ff79c6">.</span>parse_args()
</span></span><span style="display:flex;"><span>validate_spec_url(p<span style="color:#ff79c6">.</span>openapi_spec)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>➜ python validate.py  api.json
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/common.py&#34;, line 24, in wrapper
</span></span><span style="display:flex;"><span>    return method(*args, **kwargs)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/util.py&#34;, line 60, in validate_spec_url
</span></span><span style="display:flex;"><span>    validator.validate_spec(spec_json, spec_url)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&#34;, line 170, in validate_spec
</span></span><span style="display:flex;"><span>    validate_apis(apis, bound_deref)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&#34;, line 376, in validate_apis
</span></span><span style="display:flex;"><span>    validate_unresolvable_path_params(api_name, all_path_params)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&#34;, line 602, in validate_unresolvable_path_params
</span></span><span style="display:flex;"><span>    raise SwaggerValidationError(msg)
</span></span><span style="display:flex;"><span>swagger_spec_validator.common.SwaggerValidationError: Path parameter &#39;tenantID&#39; used is not documented on &#39;/{tenantID}/administrators/&#39;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>During handling of the above exception, another exception occurred:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File &#34;validate.py&#34;, line 12, in &lt;module&gt;
</span></span><span style="display:flex;"><span>    validate_spec_url(p.openapi_spec)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/common.py&#34;, line 29, in wrapper
</span></span><span style="display:flex;"><span>    sys.exc_info()[2])
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/six.py&#34;, line 695, in reraise
</span></span><span style="display:flex;"><span>    raise value.with_traceback(tb)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/common.py&#34;, line 24, in wrapper
</span></span><span style="display:flex;"><span>    return method(*args, **kwargs)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/util.py&#34;, line 60, in validate_spec_url
</span></span><span style="display:flex;"><span>    validator.validate_spec(spec_json, spec_url)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&#34;, line 170, in validate_spec
</span></span><span style="display:flex;"><span>    validate_apis(apis, bound_deref)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&#34;, line 376, in validate_apis
</span></span><span style="display:flex;"><span>    validate_unresolvable_path_params(api_name, all_path_params)
</span></span><span style="display:flex;"><span>  File &#34;&lt;...&gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&#34;, line 602, in validate_unresolvable_path_params
</span></span><span style="display:flex;"><span>    raise SwaggerValidationError(msg)
</span></span><span style="display:flex;"><span>swagger_spec_validator.common.SwaggerValidationError: (&#34;Path parameter &#39;tenantID&#39; used is not documented on &#39;/{tenantID}/administrators/&#39;&#34;, SwaggerValidationError(&#34;Path parameter &#39;tenantID&#39; used is not documented on &#39;/{tenantID}/administrators/&#39;&#34;))
</span></span></code></pre></div><p>Also, bravado performs bits of contract testing: by default, it validates incoming responses against description docs.</p>
<p>It serves us nice, but feedback is slow. At least we know when our spec is blatantly broken (beloved duplication of <code>operationId</code>s).</p>
<h2 id="zally" >
  <a class="group relative" href="#zally">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Zally</a>
</h2>
<p><a href="https://github.com/zalando/zally" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Zally</a> is a linter from Zalando, which is famous for its open-sourced <a href="https://opensource.zalando.com/restful-api-guidelines/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API guidelines</a>.</p>
<p>It ticks all our requirements except for the ease of setup: Zally is written in Kotlin. I was too lazy even to try running it. I&rsquo;m sure it&rsquo;s an excellent tool, but not for us.</p>
<p>BTW, it has nice UI:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/12/26/lunchlearn-linting-openapi-description-docs/zally_hu_a0d9b5d0165b8cf6.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/12/26/lunchlearn-linting-openapi-description-docs/zally.png" alt="Zally web UI with violations highlighting and links" defer>
	</picture>
	
</figure></p>
<h2 id="speccy" >
  <a class="group relative" href="#speccy">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Speccy</a>
</h2>
<p>Welcome to JavaScript galore. <a href="https://github.com/wework/speccy" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Speccy</a> and all next linters are run using node.js. Even though I&rsquo;m not a fan of JS, it&rsquo;s easy to use.</p>
<p>So, back to Speccy. It was a popular tool once, but won&rsquo;t work in our company:</p>
<ul>
<li>no support for OpenAPI 2</li>
<li>is (was?) developed by WeWork. Ouch.</li>
</ul>
<h2 id="ibm-openapi-validator" >
  <a class="group relative" href="#ibm-openapi-validator">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>IBM OpenAPI validator</a>
</h2>
<p><a href="https://github.com/IBM/openapi-validator" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The next candidate is from IBM</a>. Respectable origin.  I like how it reports problems with the exact origins of errors:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>➜ npx ibm-openapi-validator -e api.json
</span></span><span style="display:flex;"><span>npx: installed 244 in 5.108s
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>errors
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Message :   PUT and POST operations must have a non-empty `consumes` field.
</span></span><span style="display:flex;"><span>  Path    :   paths./{tenantID}/saml/{SAMLApplicationID}/metadata.xml.post.consumes
</span></span><span style="display:flex;"><span>  Line    :   20
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  Message :   operationIds must be unique
</span></span><span style="display:flex;"><span>  Path    :   paths./{tenantID}/saml/{SAMLApplicationID}/metadata.xml.post.operationId
</span></span><span style="display:flex;"><span>  Line    :   20
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>Unfortunately, it&rsquo;s not customizable enough. You can only tweak existing rules, change severity, or disable them.</p>
<h2 id="spectral" >
  <a class="group relative" href="#spectral">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Spectral</a>
</h2>
<p>And the last one, <a href="https://stoplight.io/p/docs/gh/stoplightio/spectral" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Spectral</a>. As far as I know, a clear winner:</p>
<ul>
<li>core devs are also contributors to OpenAPI and JSON Schema</li>
<li>the most flexible, adding new rules is easy (<a href="https://github.com/openapi-contrib/style-guides" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">examples</a>)</li>
</ul>
<p>The one smallish problem I see is that the CLI report is not as fun as IBM&rsquo;s, just line numbers.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>➜ npx @stoplight/spectral lint -DF error api.json
</span></span><span style="display:flex;"><span>OpenAPI 2.0 (Swagger) detected
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>/&lt;...&gt;/api.json
</span></span><span style="display:flex;"><span>  3972:24  error  operation-operationId-unique   Every operation must have a unique `operationId`.
</span></span><span style="display:flex;"><span>  4024:24  error  operation-operationId-unique   Every operation must have a unique `operationId`.
</span></span><span style="display:flex;"><span>  5029:17  error  oas2-valid-definition-example  `example` property type should be object
</span></span><span style="display:flex;"><span> 11602:26  error  no-$ref-siblings               $ref cannot be placed next to any other properties
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>You can either use Stoplight Studio or integrate with your IDE of choice to click lazily on an error to go to its source: I did with Sublime and SublimeLinter plugin, worked fine. PyCharm (and other IDEAs) are ok too.</p>
]]></content>
  </entry>
  <entry>
    <title>Weekly hmms: API practices, Yegor Bugaenko, culture</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/12/21/weekly-hmms-api-practices-yegor-bugaenko-culture/" hreflang="en"/>
    <published>2019-12-21T19:33:46Z</published>
    <updated>2019-12-21T19:33:46Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-12-21:/articles/2019/12/21/weekly-hmms-api-practices-yegor-bugaenko-culture/</id>
    
    <summary type="html"><![CDATA[<h2 id="api-practices-if-you-hate-your-customers" >
  <a class="group relative" href="#api-practices-if-you-hate-your-customers">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>API practices if you hate your customers</a>
</h2>
<p>A fun <a href="https://queue.acm.org/detail.cfm?ref=rss&amp;id=3375635" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">article from ACM Queue magazine</a> about how to alienate
customers from using your API. I like an <a href="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;anti-tutorial&rdquo; form</a>,
it is easier to recall bad patterns and behaviors.</p>]]></summary>
    <content type="html"><![CDATA[<h2 id="api-practices-if-you-hate-your-customers" >
  <a class="group relative" href="#api-practices-if-you-hate-your-customers">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>API practices if you hate your customers</a>
</h2>
<p>A fun <a href="https://queue.acm.org/detail.cfm?ref=rss&amp;id=3375635" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">article from ACM Queue magazine</a> about how to alienate
customers from using your API. I like an <a href="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;anti-tutorial&rdquo; form</a>,
it is easier to recall bad patterns and behaviors.</p>
<blockquote>
<p>One such form I filled out required me to describe the application I planned to write. &lt;&hellip;&gt;
Sadly, I didn&rsquo;t have a particular application in mind. I was going to explore the API and write a few simple
Python-based utilities to automate some daily tasks. I didn&rsquo;t want to explain all that, however, for fear that
my answer would not be good enough for whoever was judging my application.
In a panic, I simply described my application as &ldquo;dark purple with white highlights.&rdquo;
A few weeks later my application was approved. So far, I haven&rsquo;t been visited by any auditor SWAT teams,
but as a precaution my code editor has been themed in dark purple with white highlights ever since.</p>
</blockquote>
<p>This particular quote hit hard:</p>
<blockquote>
<p>Nothing says &ldquo;we don&rsquo;t actually want you to use our API&rdquo; like making your API documentation invisible
to search engines. The &ldquo;build, run, debug&rdquo; cycle of decades ago has been replaced by &ldquo;run, crash, Google, fix.&rdquo;</p>
</blockquote>
<p>Once we tried to research our competitors and we couldn&rsquo;t find even screenshots. How the hell
a potential customer is supposed to evaluate your product if you hide <strong>everything</strong>?</p>
<h2 id="yegor-bugaenko-on-qa-vs-testing" >
  <a class="group relative" href="#yegor-bugaenko-on-qa-vs-testing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Yegor Bugaenko on QA vs testing</a>
</h2>
<p>Yegor Bugaenko presented <a href="https://www.youtube.com/watch?v=jZitXMQaXvE" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Quality Assurance vs. Testing&rdquo; on QA Fest 2019</a>.</p>
<p>And I am disappointed.</p>
<p>For those who don&rsquo;t know Yegor, he is famous for controversial <a href="https://www.xdsd.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">eXtremely Distributed Software Development</a>
methodology. One of the ideas is to pay only for closed tasks.</p>
<p>So, I grabbed popcorn and expected blood and gore. Didn&rsquo;t happen, it was dull, except for one or two topics.
The talk started with an obvious difference between QA and testing and moved to explain the importance of
quantitative metrics to measure tester&rsquo;s productivity. Unfortunately, he suggested the most stupid metric ever: the
number of bugs logged. I also was annoyed by his notion that testers should not talk to devs much and must log every issue.
My practice shows that working with dev together and fixing bugs as we go is way more productive and requires less time.
Perhaps, his ideas works in XDSD, where everyone is expendable, but I hope others won&rsquo;t borrow them into normal agile teams.</p>
<h2 id="cultures-and-sci-fi" >
  <a class="group relative" href="#cultures-and-sci-fi">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Cultures and sci-fi</a>
</h2>
<p>Speaking of teams.</p>
<p>Prelude: I&rsquo;m a fan of space sci-fi series. Not a nerd, but I watched my share:</p>
<ul>
<li>Star Trek: TOS (bits), TNG, DS9, Voyager, Enterprise</li>
<li>LEXX</li>
<li>Battlestar Galactica (with spin-offs, except Caprica)</li>
<li>Firefly</li>
<li>Babylon 5 (and all spin-offs)</li>
<li>Farscape</li>
<li>Andromeda</li>
<li>Stargate SG-1 (in progress)</li>
</ul>
<p>As you may notice, there is no Expanse, Orville, or new Star Treks (Discovery, Short Trek). We watch only
finished stuff. I hope to avoid spoilers, but it&rsquo;s impossible with the new Star Treks. Also, I doubt I would even
want to watch them (mushroom drives? horrid Klingons??).</p>
<p>This week I stumbled upon a <a href="https://www.youtube.com/watch?v=rnlxugk3Qb0" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">comparison between TNG and Short Trek</a>.
How this is related to teams and culture? Well, the basic problem is the same for both series: a crew member with a quirky
behavior who doesn&rsquo;t fit a team.</p>
<p>TNG solved the problem by trying to help Lieutenant Barclay to overcome his anxiety and integrate into the team.
While he remained awkward for the rest of the series, some of his quirks were channeled into a productive direction and
helped to save the crew numerous times.</p>
<p>Short Trek&rsquo;s approach was&hellip; different. Edward Larkin died and was called an idiot by his <em>&ldquo;competent&rdquo;</em> captain.
Just watch it. The captain wanted to transfer that scientist even <em>before he made a mistake.</em> Show defenders say that
it&rsquo;s just a comedy, but these series are not marketed as a parody show.  It&rsquo;s a canon now. Which means,
that obnoxious and demeaning conduct of the captain is considered ok in that universe. No one reprimanded her for
causing an ecological disaster, and she never showed any remorse for the &ldquo;idiot&rsquo;s&rdquo; death.</p>
<p>I understand that showrunners are just money hoarders and want to have a comedy because it&rsquo;s profitable. They
probably never consider how it affects existing canon.</p>
<p>Still. I wonder, what this <em>modern</em> approach tells about our society?</p>
]]></content>
  </entry>
  <entry>
    <title>Weekly hmms: advent of code, NGINX, APIs</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/12/14/weekly-hmms-advent-of-code-nginx-apis/" hreflang="en"/>
    <published>2019-12-14T22:32:58Z</published>
    <updated>2019-12-14T22:32:58Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-12-14:/articles/2019/12/14/weekly-hmms-advent-of-code-nginx-apis/</id>
    
    <summary type="html"><![CDATA[<h2 id="advent-of-code" >
  <a class="group relative" href="#advent-of-code">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Advent of code</a>
</h2>
<p>Last week I forgot to mention that I started solving the <a href="https://adventofcode.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Advent of Code</a> challenges. This is my first year, so I don&rsquo;t even try to have elegant solutions. Old trusty Python, <a href="https://github.com/aviskase/advent-of-code" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">lists&rsquo; and dicts&rsquo; galore</a>.</p>]]></summary>
    <content type="html"><![CDATA[<h2 id="advent-of-code" >
  <a class="group relative" href="#advent-of-code">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Advent of code</a>
</h2>
<p>Last week I forgot to mention that I started solving the <a href="https://adventofcode.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Advent of Code</a> challenges. This is my first year, so I don&rsquo;t even try to have elegant solutions. Old trusty Python, <a href="https://github.com/aviskase/advent-of-code" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">lists&rsquo; and dicts&rsquo; galore</a>.</p>
<p>The reason is simple: the goal is to go through all 25 days. Being consistent is not easy, and today I had to solve two days because of yesterday&rsquo;s Christmas party.</p>
<h2 id="nginx" >
  <a class="group relative" href="#nginx">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>NGINX</a>
</h2>
<p><a href="https://meduza.io/en/feature/2019/12/13/what-s-yours-is-ours" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The news about police raids in NGINX office</a> is at the same time surprising and not. Before there were VKontakte and Euroset; for some reason being honestly successful is not allowed in Russia.</p>
<h2 id="apis" >
  <a class="group relative" href="#apis">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>APIs</a>
</h2>
<p><a href="https://idratherbewriting.com/blog/api-design-usability-arnaud-lauret-podcast/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Tom Johnson released a podcast with Arnaud Lauret</a>. Even though it&rsquo;s a tech writing perspective, I strongly recommend testers to check it out. Laments about not being able to influence design are fun to hear: it&rsquo;s almost like Agile, DevOps, WhatNotOps missed out tech writers.</p>
<p>Also, I found two interesting API related newsletters: <a href="https://apideveloperweekly.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;API Developer Weekly&rdquo;</a> and<a href="https://tinyletter.com/NetAPINotes/archive" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Net API Notes&rdquo;</a>. If you look at the signup page for the first one, I bet you will notice that it doesn&rsquo;t mention testers. I wonder, is it because their team follows MT-like approach and includes testers into dev set? Hope so.</p>
]]></content>
  </entry>
  <entry>
    <title>Weekly hmms: communities, laptops &amp; Linux</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/12/07/weekly-hmms-communities-laptops-linux/" hreflang="en"/>
    <published>2019-12-07T23:50:35Z</published>
    <updated>2019-12-07T23:50:35Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-12-07:/articles/2019/12/07/weekly-hmms-communities-laptops-linux/</id>
    
    <summary type="html"><![CDATA[<p>This time, the proper title would be &ldquo;Weekly Arghs.&rdquo;</p>
<h2 id="testing-communities" >
  <a class="group relative" href="#testing-communities">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Testing communities</a>
</h2>
<p>When I decided to become a tester, the first-ever topic I encountered was <del>discussions</del> rants about &ldquo;ISO/IEC/IEEE 29119 Software Testing&rdquo; set of standards. I was fresh out of the university, so I couldn&rsquo;t have legal access to these documents, and naturally, I sided with opponents. Good or bad (mostly bad), I don&rsquo;t care: if you wish to have guidelines or standards for the profession, it must be freely accessible to everyone. The end.</p>]]></summary>
    <content type="html"><![CDATA[<p>This time, the proper title would be &ldquo;Weekly Arghs.&rdquo;</p>
<h2 id="testing-communities" >
  <a class="group relative" href="#testing-communities">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Testing communities</a>
</h2>
<p>When I decided to become a tester, the first-ever topic I encountered was <del>discussions</del> rants about &ldquo;ISO/IEC/IEEE 29119 Software Testing&rdquo; set of standards. I was fresh out of the university, so I couldn&rsquo;t have legal access to these documents, and naturally, I sided with opponents. Good or bad (mostly bad), I don&rsquo;t care: if you wish to have guidelines or standards for the profession, it must be freely accessible to everyone. The end.</p>
<p>But that&rsquo;s not the thing I want to talk about. It&rsquo;s just an example of my first deep dive into testing: it was a sign of what to come. Basically, everything is dividing our community: terminology, schools of thoughts, views. Dammit, testing in itself is a tiny thingy, we mostly reuse and apply knowledge and methods from other fields. Nevertheless, we keep constantly bickering with each other.</p>
<p>I&rsquo;m not a saint either. I rant, joke, correct, discuss, persuade, and roll my eyes. Maybe it comes with the profession. Or it&rsquo;s a normal thing for any community. What amazes me, that this much concentration of disagreements exists around the pettiest and smallish topics. Sometimes people even talk about the same ideas but with different examples, and it results in confrontations (direct or indirect).</p>
<p>Giving recent cases wouldn&rsquo;t be humanly correct in regard to individuals involved. Let&rsquo;s just say: I participate in several slack workspaces. And it&rsquo;s quite common to a discussion in one to provoke posts in others with opposite reactions like &ldquo;good work&rdquo; and &ldquo;it drives me insane.&rdquo;</p>
<p>Though, I want to quote one:</p>
<blockquote>
<p>Testing vs Checking is like Russian revolution &mdash; senseless and merciless.</p>
</blockquote>
<p>You can replace &ldquo;testing vs checking&rdquo; with whatever you want, and it will hold true to a lot of prevalent discussions.</p>
<h2 id="laptops--linux" >
  <a class="group relative" href="#laptops--linux">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Laptops &amp; Linux</a>
</h2>
<p>I&rsquo;ve got a new laptop: Dell XPS15 7590. My old one is a Lenovo G560, almost 9 years old. It served me well, but it&rsquo;s got too hard to keep even just Pycharm and Firefox running side by side. I squeezed every last bit out if it: maxing out memory to 8GB, adding SSD, using Fedora with a lighter desktop environment (XFCE). Still, its time has come.</p>
<p>XPS is a good choice for several reasons:</p>
<ul>
<li>extensible: I&rsquo;ll be able to add more memory (32GB), change SSD or WiFi card, add HDD (but with a smaller battery)</li>
<li>Linux friendly</li>
<li>good battery</li>
<li>there was an awesome discount which is significant because I didn&rsquo;t want to go wild with work budget</li>
</ul>
<p>But there are some disappointments. Let&rsquo;s start with the objective one: keyboard.</p>
<p>This is my old keyboard: it has Numpad, all keys, and even separate volume controls.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/12/07/weekly-hmms-communities-laptops-linux/lenovo_keyboard_hu_23e350250a8ae445.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/12/07/weekly-hmms-communities-laptops-linux/lenovo_keyboard.jpg" alt="Lenovo G560 keyboard" defer>
	</picture>
	
</figure></p>
<p>This is the new one:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/12/07/weekly-hmms-communities-laptops-linux/dell_keyboard_hu_7dfe503e98e253e2.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/12/07/weekly-hmms-communities-laptops-linux/dell_keyboard.jpg" alt="Dell XPS15 keyboard" defer>
	</picture>
	
</figure></p>
<p>I begrudgingly accepted not to have a Numpad and volume control keys, yet I didn&rsquo;t even consider that there wouldn&rsquo;t be separate Home, End, PgUp, and PgDn! Also, no right Fn key. Wow. What bewilders me more is that a previous model did have separate keys: but <a href="https://www.dell.com/community/XPS/Control-Home-Control-End-Keys/td-p/6212592" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">people complained about it on the Dell forum</a>. You, guys, I hate you. You&rsquo;re exactly like <a href="https://xkcd.com/1172/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">from that XKCD comic strip</a>.</p>
<p>Next disappointment is a display. Beware, this will be unexpected&hellip; I don&rsquo;t like HiDPI. I&rsquo;m so accustomed to shitty displays, that better ones feel wrong and uncomfortable. Colors and images are fine, but text, yikes. Letters are not crisp enough, there is something smudgy about them.</p>
<p>I can already hear that it&rsquo;s because I&rsquo;m on Linux. NOPE. This laptop came with Windows 10 (I left it in a dual boot), but the text is blurry too. Even more, I think Linux actually does better jobs with antialiasing, because old Windows apps look particularly horrible.</p>
<p>Maybe someone will say that I should try 4k or Mac with Retina. Thanks, but no. I saw those displays too. First, I don&rsquo;t understand, why people keep using them without any scaling: font size is unbearably small. Second, I still don&rsquo;t like it.</p>
<p>So yeah, completely subjective feelings with physical problems: my eyes are way more strained now. Habits die hard.</p>
<p>Oh, and I also switched from XFCE to Gnome, and this drives me crazy even more. My first  Linux was Ubuntu with Gnome 2, and, surprisingly, UX in XFCE is closer to it than in Gnome 3. I&rsquo;m too lazy to reinstall again, so, I guess, I&rsquo;ll try to relearn.</p>
]]></content>
  </entry>
  <entry>
    <title>Weekly hmms: watching, reading, learning</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/11/30/weekly-hmms-watching-reading-learning/" hreflang="en"/>
    <published>2019-11-30T19:13:56Z</published>
    <updated>2019-11-30T19:13:56Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-30:/articles/2019/11/30/weekly-hmms-watching-reading-learning/</id>
    
    <summary type="html"><![CDATA[<h2 id="watching" >
  <a class="group relative" href="#watching">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Watching</a>
</h2>
<p>During lunch, I watch videos from conferences. This week my favorites were:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=yYEne30CWUQ" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Mike Kistler: The Importance of API Design Guidelines</a></li>
<li><a href="https://www.youtube.com/watch?v=qCdpTji8nxo" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Kevin Lacker: How to Design Great APIs</a></li>
</ul>
<p>The second one has a nice quotable passage:</p>]]></summary>
    <content type="html"><![CDATA[<h2 id="watching" >
  <a class="group relative" href="#watching">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Watching</a>
</h2>
<p>During lunch, I watch videos from conferences. This week my favorites were:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=yYEne30CWUQ" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Mike Kistler: The Importance of API Design Guidelines</a></li>
<li><a href="https://www.youtube.com/watch?v=qCdpTji8nxo" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Kevin Lacker: How to Design Great APIs</a></li>
</ul>
<p>The second one has a nice quotable passage:</p>
<blockquote>
<p>A good API will let you be lazy.</p>
<p>A great API will empower you to be <em>really lazy</em>.</p>
</blockquote>
<h2 id="reading" >
  <a class="group relative" href="#reading">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Reading</a>
</h2>
<p>Started reading:</p>
<ul>
<li>
<p><a href="https://www.manning.com/books/the-design-of-web-apis" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The Design of Web APIs</a> by Arnaud Lauret. I&rsquo;ve got a hard copy, yay!</p>
</li>
<li>
<p><a href="https://www.amazon.ca/Universal-Principles-Design-William-Lidwell/dp/1592530079" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Universal Principles of Design</a> by William Lidwell, Kritina Holden, and Jill Butler. There is a newer shorter edition, but I decided to try out the original one first. It was available in the local library, but I had to wait almost two months in the request queue: the book is old yet still relevant.</p>
</li>
</ul>
<h2 id="learning" >
  <a class="group relative" href="#learning">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Learning</a>
</h2>
<p><a href="https://www.angryweasel.com/ABTesting/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Alan and Brent</a> talk a lot about basing feature development on testable hypotheses. Brent mentioned that he doesn&rsquo;t even use the word &ldquo;requirements&rdquo; anymore.</p>
<p>And just in time came a Coursera&rsquo;s newsletter with the link to
<a href="https://www.coursera.org/learn/uva-darden-agile-testing" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Hypothesis-Driven Development</a> course, which is a part four out of five in the agile development specialization. So, ideally, you shouldn’t start with it. Nevertheless, I’ve finished the first week’s materials and looks like time spent will be worthwhile.</p>
<p>Though, there are some problems:</p>
<ul>
<li>The instructor seems to sell his &ldquo;venture design process.&rdquo; That doesn&rsquo;t make that methodology inherently bad, but keep it in mind.</li>
<li>The way he talks makes hard for me to concentrate. Too choppy.</li>
</ul>
<p>The course is short, so I&rsquo;ll give it a chance (perhaps to the whole specialization).</p>
]]></content>
  </entry>
  <entry>
    <title>Why I don’t use Postman</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/11/25/why-i-dont-use-postman/" hreflang="en"/>
    <published>2019-11-25T01:20:58Z</published>
    <updated>2019-11-25T01:20:58Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-25:/articles/2019/11/25/why-i-dont-use-postman/</id>
    
    <summary type="html"><![CDATA[<p>Being an API person, many people would expect me to use Postman. It&rsquo;s the most well-known tool for HTTP-based APIs and it&rsquo;s so ubiquitous that some use it even for SOAP (not the best idea ever).</p>
<p><em>I did use Postman.</em> <a href="https://gist.github.com/aviskase/e642248c35e400b56e2489430952369f" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">My gist with installation scripts for Linux</a> was so popular that Postman support team reached me out when it started causing non-obvious issues with updates. I also used this tool for internship courses. Yet I won&rsquo;t do it anymore and let me explain why.</p>]]></summary>
    <content type="html"><![CDATA[<p>Being an API person, many people would expect me to use Postman. It&rsquo;s the most well-known tool for HTTP-based APIs and it&rsquo;s so ubiquitous that some use it even for SOAP (not the best idea ever).</p>
<p><em>I did use Postman.</em> <a href="https://gist.github.com/aviskase/e642248c35e400b56e2489430952369f" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">My gist with installation scripts for Linux</a> was so popular that Postman support team reached me out when it started causing non-obvious issues with updates. I also used this tool for internship courses. Yet I won&rsquo;t do it anymore and let me explain why.</p>
<h2 id="im-not-a-tech-writer" >
  <a class="group relative" href="#im-not-a-tech-writer">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>I&rsquo;m not a tech writer</a>
</h2>
<p>Postman isn&rsquo;t just a tool for testing: it&rsquo;s often used for writing documentation. I&rsquo;m a tester, thus, this use case does not apply to my day-to-day work. Maybe it can be useful for your organization, though I don&rsquo;t approve of the inability to self-host.</p>
<h2 id="im-confused-by-gui-driven-tools" >
  <a class="group relative" href="#im-confused-by-gui-driven-tools">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>I&rsquo;m confused by GUI-driven tools</a>
</h2>
<p>I still have PTSD from SoapUI. It&rsquo;s the best exploratory testing tool for SOAP services, but, damn, scenarios more difficult than request+response are brain busters. Many people don&rsquo;t have problems with GUI-driven stuff:</p>
<ul>
<li>JMeter for load testing</li>
<li>UI git apps</li>
<li>Point&amp;click tools for web automation</li>
</ul>
<p>For me, all these are torture devices for anything more involved than two clicks. <em>It&rsquo;s something psychological,</em> because if GUI tool requires tinkering with LEGO-like loop/if steps or  pre/post-scripts, my nerve cells start audibly screeching. I&rsquo;m not a command line nerd and I use these tools for certain activities, but not for complex automation.</p>
<h2 id="i-can-code" >
  <a class="group relative" href="#i-can-code">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>I can code</a>
</h2>
<p>Here we go to the obvious part: I am comfortable with code. Yeah, shitty smelling code, nevertheless, I find it way more intuitive to write a for loop <em>purely</em> in a programming language than to glue together pieces of JavaScript with GUI-level bits.</p>
<p>My language of choice is Python because it&rsquo;s very easy to scribble down a working script. It also has packages for any API needs imaginable, be it <a href="https://requests.kennethreitz.org/en/master/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Requests</a>, <a href="https://github.com/Yelp/bravado" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Bravado</a>, <a href="https://python-zeep.readthedocs.io/en/master/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Zeep</a>, or <a href="https://github.com/yandex/yandex-tank" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Yandex.Tank</a>.</p>
<h2 id="i-use-insomnia" >
  <a class="group relative" href="#i-use-insomnia">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>I use Insomnia</a>
</h2>
<p>Until recently I still used Postman a bit. I switched to Insomnia for mostly emotional reasons:</p>
<ul>
<li>Insomnia is open-source.</li>
<li>Postman is bloated with features I don&rsquo;t need.</li>
<li>There is <em>too much</em> Postman around. They even organize a conference now! I wonder is there a certification somewhere already.</li>
</ul>
<p>Insomnia is a case where <em>less is more.</em> I hope its recent acquisition by a bigger company won&rsquo;t be detrimental, but being open-source we can always fork it.</p>
<p>Though it&rsquo;s not the only tool I use for exploratory API testing. My general patterns are:</p>
<ul>
<li>Rapid data creation or testing simple requests: curl</li>
<li>Requests with bigger payloads: SwaggerUI or Insomnia</li>
<li>Chained, looped, or other complex stuff: reusing bravado-based adapters from automation framework</li>
</ul>
<p>And for actual automation, it&rsquo;s code and code only.</p>
<hr>
<p>Your brain is your brain. Your context is your context. Mine resulted in avoiding GUI-driven tools. Research, try different approaches, and don&rsquo;t simply default to the most popular choice.</p>
]]></content>
  </entry>
  <entry>
    <title>Weekly hmms: Fowler, collaborations, HTML, and CTS</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/11/23/weekly-hmms-fowler-collaborations-html-and-cts/" hreflang="en"/>
    <published>2019-11-23T02:45:30Z</published>
    <updated>2019-11-23T02:45:30Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-23:/articles/2019/11/23/weekly-hmms-fowler-collaborations-html-and-cts/</id>
    
    <summary type="html"><![CDATA[<p>New week, new hmms!</p>
<h2 id="martin-fowler-and-exploratory-testing" >
  <a class="group relative" href="#martin-fowler-and-exploratory-testing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Martin Fowler and exploratory testing</a>
</h2>
<p><em>All</em> testers&rsquo; slack groups, forums, and blogs erupted this week with the tidings of joy: <a href="https://martinfowler.com/bliki/ExploratoryTesting.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Martin Fowler wrote a post about exploratory testing</a>. Of course, it seems a bit <em>late</em> and <em>cursory,</em> but at least now we have <em>a very respected source</em> to point to.</p>]]></summary>
    <content type="html"><![CDATA[<p>New week, new hmms!</p>
<h2 id="martin-fowler-and-exploratory-testing" >
  <a class="group relative" href="#martin-fowler-and-exploratory-testing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Martin Fowler and exploratory testing</a>
</h2>
<p><em>All</em> testers&rsquo; slack groups, forums, and blogs erupted this week with the tidings of joy: <a href="https://martinfowler.com/bliki/ExploratoryTesting.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Martin Fowler wrote a post about exploratory testing</a>. Of course, it seems a bit <em>late</em> and <em>cursory,</em> but at least now we have <em>a very respected source</em> to point to.</p>
<h2 id="collaborations" >
  <a class="group relative" href="#collaborations">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Collaborations</a>
</h2>
<h3 id="mob-programming" >
  <a class="group relative" href="#mob-programming">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Mob programming</a>
</h3>
<p>Finally found time to read a <a href="https://mobprogrammingguidebook.xyz/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Mob Programming Guidebook&rdquo; by Maaret Pyhäjärvi</a>. I&rsquo;m not entirely sure about applying it at the moment, but it looks like an interesting method for knowledge sharing facilitation.</p>
<p>And contributions style roles can be reused as hats in other activities:</p>
<ul>
<li>driver (intelligent input device)</li>
<li>sponsor (supporting others from a unique position)</li>
<li>nose (noticing things about the code)</li>
<li>navigator (translating ideas into code)</li>
<li>researcher (having better information available)</li>
<li>automationist (recognizing repetition)</li>
<li>conductor (enhancing others contributions)</li>
<li>mobber (always contributing in different  ways)</li>
<li>rear admiral (helping designated navigator do better and learn)</li>
<li>archivist (improving team visibility)</li>
</ul>
<h3 id="tips-for-code-review" >
  <a class="group relative" href="#tips-for-code-review">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Tips for code review</a>
</h3>
<p>Google Testing blog is still alive and has posted a nice <a href="https://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">short guide about being a good code reviewer</a>. The best thing is that there are not only tips for reviewers but also <em>for authors.</em> Likewise, they could and should be applied for issue reports and other communications.</p>
<h2 id="validation-for-email-inputs" >
  <a class="group relative" href="#validation-for-email-inputs">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Validation for email inputs</a>
</h2>
<p>Standards are weird. We had a tiny funny problem this week with an OpenAPI spec and a <code>format: email.</code> The context:</p>
<ul>
<li>SwaggerUI generates <code>input</code> fields, and with this format it will have <code>type=email</code>.</li>
<li>When I don&rsquo;t care about cross-browser stuff, I use Chrome.</li>
<li>Our middleware seems to validate email formats, somewhere very deep in dependencies.</li>
<li>We also have a custom validation.</li>
</ul>
<p>First, I checked a request with a garbage email. It failed on the middleware layer. Then I checked an email with non-ASCII characters, but our validation failed. That meant that validation in middleware was passing; therefore, its validation checks were better than ours.</p>
<p>The dev who worked on fixing the bug noticed an interesting behavior. If you use Firefox to open SwaggerUI, it will add a red highlighting for an email input field when a value contains non-ASCII characters. According to the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">MDN docs</a>, this is a known problem due to <a href="https://github.com/whatwg/html/issues/4562" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">HTML5 issue</a>. The specification proposes using a simple regex for validation!</p>
<p>Chrome does not complain about internationalized values. And it means that Firefox implemented HTML5 spec <em>too well,</em> introducing a confusing behavior. Oops.</p>
<h2 id="carpal-tunnel-syndrome" >
  <a class="group relative" href="#carpal-tunnel-syndrome">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Carpal tunnel syndrome</a>
</h2>
<p>I wasn&rsquo;t diagnosed with CTS (yet), but my posture at home is awful, so my right hand <em>hurts.</em> I don&rsquo;t have a proper desk and usually I sit with a laptop at a <em>round table.</em> Thus, there is not enough room to position a &ldquo;mouse&rdquo; hand.</p>
<p>A year ago I bought a cheap <a href="https://www.amazon.ca/Anker-Wireless-Vertical-Ergonomic-Optical/dp/B00FGI2QVC" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Anker vertical mouse</a>. It&rsquo;s great, even with my shitty habits I have had no pain. But it&rsquo;s wired, and soon I&rsquo;ll need a wireless one. Logitech is always my first choice in this case because it doesn&rsquo;t drain batteries too fast. Unfortunately, their only vertical mouse is unreasonably expensive, so I&rsquo;ve decided to experiment with their <a href="https://www.amazon.ca/Logitech-910-001799-M570-Wireless-Trackball/dp/B0043T7FXE/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">M570 trackball</a>.</p>
<p>It&rsquo;s cool that you don&rsquo;t need to move your hand at all, but <em>the pain has returned:</em> it looks like vertical mouse works better for small spaces. For a trackball, you should be able to lay down your hand somewhere fully. Though, the more expensive trackball model can be vertically adjusted. Anyway, I&rsquo;ll get a real own desk soon, will see how it goes.</p>
]]></content>
  </entry>
  <entry>
    <title>Weekly hmms: valuations, job titles, conferences, APIs</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/11/16/weekly-hmms-valuations-job-titles-conferences-apis/" hreflang="en"/>
    <published>2019-11-16T02:53:21Z</published>
    <updated>2019-11-16T02:53:21Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-16:/articles/2019/11/16/weekly-hmms-valuations-job-titles-conferences-apis/</id>
    
    <summary type="html"><![CDATA[<p>To assume I could push anything on Fridays was too optimistic. Thus, I&rsquo;ll commit to Saturdays.</p>
<p>Let&rsquo;s start.</p>
<h2 id="saas-valuations" >
  <a class="group relative" href="#saas-valuations">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>SaaS valuations</a>
</h2>
<p>My current company, <a href="https://www.netgovern.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">NetGovern</a>, operates with an open-book management mindset. Apart from other information, all employees know company finances so we can better understand what is our real position and where we plan to go next.</p>]]></summary>
    <content type="html"><![CDATA[<p>To assume I could push anything on Fridays was too optimistic. Thus, I&rsquo;ll commit to Saturdays.</p>
<p>Let&rsquo;s start.</p>
<h2 id="saas-valuations" >
  <a class="group relative" href="#saas-valuations">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>SaaS valuations</a>
</h2>
<p>My current company, <a href="https://www.netgovern.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">NetGovern</a>, operates with an open-book management mindset. Apart from other information, all employees know company finances so we can better understand what is our real position and where we plan to go next.</p>
<p>It&rsquo;s tough to wrap your head around balance sheets or cash flows, especially for me: I was born in 1992, a year after Kazakhstan declared independence from the Soviet Union. Suddenly, generations raised in the planned economy plunged into the free market (didn&rsquo;t go well). I&rsquo; came from the culture of mixed and uncertain economic literacy, hence, all these stocks, investing, growth rates and margins don&rsquo;t flow naturally into my brain.</p>
<p>Nevertheless, I don&rsquo;t shy away from these topics because <strong>learning anything is the best hobby.</strong> This week, we read a paper explaining how to valuate typical SaaS companies (how to calculate a price).</p>
<p>I&rsquo;ve created a <a href="https://www.mindomo.com/mindmap/saas-company-valuation-59d6caef92ab298681a766bc9aa5f367" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">mind map</a> (or an <a href="https://www.mindomo.com/outline/saas-company-valuation-59d6caef92ab298681a766bc9aa5f367" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">outline</a>, Mindomo supports both at the same time) with the main info:</p>
<!-- raw HTML omitted -->
<h2 id="some-tech-writers-avoid-the-word-writer-in-their-titles" >
  <a class="group relative" href="#some-tech-writers-avoid-the-word-writer-in-their-titles">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Some tech writers avoid the word &ldquo;writer&rdquo; in their titles</a>
</h2>
<p>The last myth from <a href="https://idratherbewriting.com/blog/ten-myths-about-api-documentation/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the podcast &ldquo;10 myths about API documentation&rdquo;</a> is: <em>people will respect you more if the word &ldquo;writer&rdquo; isn&rsquo;t in your job title.</em></p>
<p>Insecure tech writers prefer to call themselves:</p>
<ul>
<li>Information developers</li>
<li>User assistance developers</li>
<li>Information strategists</li>
<li>Content strategists</li>
<li>Technical communications professionals</li>
<li>Content engineers</li>
</ul>
<p>First, these are so funny. Second, the testing field has the same tendency. My official job title is &ldquo;QA &amp; escalations analyst,&rdquo; whatever this means. Testers don&rsquo;t avoid the word &ldquo;test,&rdquo; but they do try to shoehorn hardcoreness with words &ldquo;developer,&rdquo; &ldquo;engineer,&rdquo; or &ldquo;analyst.&rdquo;</p>
<h2 id="onlinetestconf" >
  <a class="group relative" href="#onlinetestconf">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>OnlineTestConf</a>
</h2>
<p>It&rsquo;s not a secret that I&rsquo;m not a fan of testing-only conferences. Not rolling your eyes is impossible when you see mind-blowing prices for the STAR conference and find there <em>popular</em> workshops like &ldquo;Learning Git.&rdquo; Pass.</p>
<p>Still, I checkout out some occasionally. Heisenbug is amazing. But most of the talks are in Russian, sorry folks.</p>
<p>The next available conference is <a href="https://www.onlinetestconf.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OnlineTestConf</a>, December 3rd-4th 2019. The previous one was passable, this one seems to have a similar structure. Still, nothing beats free and online. There will be big names, yet what caught my eye was the &ldquo;Adidas Testing Platform&rdquo; talk. Adidas API guidelines are awesome, and learning more about their processes would be cool.</p>
<h2 id="me-and-apis" >
  <a class="group relative" href="#me-and-apis">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Me and APIs</a>
</h2>
<p>Should this be a regular rubric? Perhaps.</p>
<p>Though <strong>I love APIs,</strong> my knowledge is unsatisfactory and insufficient to be confident in <em>my new undertaking: writing API design guidelines.</em> Without this document, your APIs will soon become an inconsistent mess. You need to have conventions on even the most basic stuff like capitalization or pluralization. We should have created this doc a year ago; doing consolidation and standardization will require painful fixing of existing clients, but better sooner than later.</p>
<p>As I said, I&rsquo;m not an expert on API design. And I&rsquo;m not a good writer either. I&rsquo;m a tester whose job description is to <em>find ways to improve quality.</em> Next months will be fun: doing research, poking devs with sticks, and asking stupid questions in the &ldquo;APIs You Won&rsquo;t Hate&rdquo; slack group.</p>
]]></content>
  </entry>
  <entry>
    <title>Weekly hmms: __init__</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/11/11/weekly-hmms-__init__/" hreflang="en"/>
    <published>2019-11-11T03:40:16Z</published>
    <updated>2019-11-11T03:40:16Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-11:/articles/2019/11/11/weekly-hmms-__init__/</id>
    
    <summary type="html"><![CDATA[<h2 id="__init__" >
  <a class="group relative" href="#__init__">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>__init__</a>
</h2>
<p>This post initializes a series of weekly ponderings, interesting links, and other <em>hmms.</em> Think of it as typical a &ldquo;Five for Friday,&rdquo; but without number constraint and more emphasis on effects on my thought process. These posts should come out on Fridays, but because <em>I forgot to commit,</em> this one is late.</p>]]></summary>
    <content type="html"><![CDATA[<h2 id="__init__" >
  <a class="group relative" href="#__init__">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>__init__</a>
</h2>
<p>This post initializes a series of weekly ponderings, interesting links, and other <em>hmms.</em> Think of it as typical a &ldquo;Five for Friday,&rdquo; but without number constraint and more emphasis on effects on my thought process. These posts should come out on Fridays, but because <em>I forgot to commit,</em> this one is late.</p>
<p>Oh, and if you have no idea what <code>__init__</code> is, that&rsquo;s <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">from Python</a>.</p>
<h2 id="write-the-docs-podcast-episode-25" >
  <a class="group relative" href="#write-the-docs-podcast-episode-25">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>&ldquo;Write the Docs&rdquo; podcast: episode 25</a>
</h2>
<p>I&rsquo;ve just started plunging in and out tech writers&rsquo; media, and so far it keeps amusing me. <a href="https://podcast.writethedocs.org/2019/10/20/episode-25-how-devs-use-api-documentation-andrew-head/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">WTD #25</a> is interesting for two things.</p>
<p>First, this episode covers research on how developers use API documentation. Unlike predominant web services based papers, this research focuses on C++. One discovery was that developers prefer checking header files (aka interface definitions) to implementation or documentation.</p>
<p>Second, I noticed again that we, testers, and API tech writers have a common identity crisis: given enough time, developers can do our work. One guy from the podcast sounded relieved when he heard that not all the docs and comments in Google are written by devs. Maybe Alan and Brent should pitch modern testing principles to tech writers too?</p>
<h2 id="read-the-damn-code" >
  <a class="group relative" href="#read-the-damn-code">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Read the damn code</a>
</h2>
<p>This week testing slack group had an almost holy war about testers looking at code. The consensus seemed to be &ldquo;access to code is awesome,&rdquo; nevertheless, there were other opinions:</p>
<blockquote>
<p>You should have a strong bias seeing the code. It will be more difficult to search for the unknowns.</p>
</blockquote>
<p>Oh my. I don&rsquo;t do it as often as I should, but <em>I love checking commits:</em></p>
<ul>
<li>Skimming through commit messages for the current build.</li>
<li>Checking what and how was touched for implemented tasks.</li>
<li>Reading commits associated with bug fixes.</li>
</ul>
<p>And every time I uncover some unknowns. Just very recent examples:</p>
<ul>
<li>Caught that the task for implementing API <em>blah-blah</em> also has commits for API <em>meh-meh.</em> Not only I wouldn&rsquo;t know about these changes without the Git God, but also those were scheduled with a different design for later.</li>
<li>Identified code duplication and asked the dev to fix the bug in the remaining dups or refactor the code (hehe, sorry, Eric).</li>
<li>Suspected that the bug fix was incomplete, asked dev, he confirmed and refixed. Not spending time on build&amp;install&amp;test is priceless.</li>
</ul>
<p>So, dear testers, <strong>read the damn code.</strong> Stop behaving like special snowflakes whose mind will be forever damaged if you&rsquo;ll learn to code a bit. I learned Pascal at school. My father taught himself on paper using journal articles. That&rsquo;s not rocket science. The way modern society goes, coding is close to become a part of common literacy. No one asks for enterprise-levels skill, but as long as your system isn&rsquo;t written in <a href="https://en.wikipedia.org/wiki/Brainfuck" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Brainfuck</a>, even basics should be fine.</p>
]]></content>
  </entry>
  <entry>
    <title>A tester’s guide on hunting for API related sources</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/10/26/a-testers-guide-on-hunting-for-api-related-sources/" hreflang="en"/>
    <published>2019-10-26T16:52:40Z</published>
    <updated>2019-10-26T16:52:40Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-10-26:/articles/2019/10/26/a-testers-guide-on-hunting-for-api-related-sources/</id>
    
    <summary type="html"><![CDATA[<p>You&rsquo;ve got interested in APIs. Or you&rsquo;re not a fan (yet) but you have to test it. Whatever the cause, you&rsquo;d want to develop a mental model of this vast field. And a model construction demands a generous supply of information to consume and digest.</p>
<p>I prefer to seek knowledge in these five areas:</p>]]></summary>
    <content type="html"><![CDATA[<p>You&rsquo;ve got interested in APIs. Or you&rsquo;re not a fan (yet) but you have to test it. Whatever the cause, you&rsquo;d want to develop a mental model of this vast field. And a model construction demands a generous supply of information to consume and digest.</p>
<p>I prefer to seek knowledge in these five areas:</p>
<ul>
<li>standards</li>
<li>dev experience</li>
<li>usability</li>
<li>tech writers</li>
<li>vendors and companies</li>
</ul>
<p>In this article, I&rsquo;ll explain a bit why each area matters and give a bunch of sources. I won’t go into details why I selected these sources in particular: some just came to my mind first. Treat them as examples, and if you know not mentioned <em>must-reads,</em> I&rsquo;m happy to learn about them.</p>
<h2 id="standards" >
  <a class="group relative" href="#standards">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Standards</a>
</h2>
<p>Standards are the foundation. And reading abridged explanations in Wikipedia or someone’s blog is never enough. True understanding requires the ability to read and reason based on original documents. Details do matter for APIs.</p>
<p>For web services, the most valuable sources are RFC, API description and schema specifications. While some of them are community-driven, others, like GraphQL or gRPC, are backed by companies.</p>
<ul>
<li><a href="https://tools.ietf.org/html/rfc7396" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">RFC 7396. JSON Merge Patch</a></li>
<li><a href="https://tools.ietf.org/html/rfc7807" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">RFC 7807. Problem Details for HTTP APIs</a></li>
<li><a href="https://tools.ietf.org/html/rfc8594" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">RFC 8594. The Sunset HTTP Header Field</a></li>
<li><a href="https://swagger.io/specification/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">OpenAPI</a></li>
<li><a href="https://raml.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">RAML</a></li>
<li><a href="https://json-schema.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">JSON Schema</a></li>
<li><a href="https://grpc.io/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">gRPC</a></li>
<li><a href="https://graphql.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">GraphQL</a></li>
</ul>
<h2 id="dev-experience" >
  <a class="group relative" href="#dev-experience">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Dev experience</a>
</h2>
<p>Barebone foundation is important, but let&rsquo;s add some meat. While you can try to speculate about practical differences between GraphQL and REST+HTTP/2, you&rsquo;ll learn faster from those who develop and use APIs as their career. I&rsquo;m talking about developers, of course. For some inexplicable reason, some so-called &ldquo;professionals&rdquo; still perpetuate a myth about testers not being able to understand devs&rsquo; books and articles, so prove those haters wrong!</p>
<ul>
<li><a href="https://martinfowler.com" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Martin Fowler</a></li>
<li><a href="https://www.mnot.net/blog/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Mark Nottingham</a></li>
<li><a href="https://phil.tech/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Phil Sturgeon</a></li>
<li><a href="https://apisyouwonthate.com" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">APIs You Won&rsquo;t Hate</a></li>
</ul>
<h2 id="usability" >
  <a class="group relative" href="#usability">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Usability</a>
</h2>
<p>I <a href="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">like API usability</a> <a href="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">very much</a>. Compared to performance or security, this theme is often overlooked. HCI is the whole field of study with real research and statistics magic, which may feel overwhelming at first. <a href="https://docsbydesign.com/2017/09/20/a-brief-history-of-api-docs/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Here is a selection of papers to begin with</a>.</p>
<p>By the way, there is a term in HCI: developer&rsquo;s experience. DX is like UX, but when a user is a developer.</p>
<h2 id="tech-writers" >
  <a class="group relative" href="#tech-writers">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Tech writers</a>
</h2>
<p>I insist that without proper documentation an otherwise perfect API is still a shit. And who knows about docs better than technical writers? APIs are a hot topic for them, simply because that&rsquo;s higher-paying field.</p>
<ul>
<li><a href="https://docsbydesign.com" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;Docs by Design&rdquo; by Bob Watson</a></li>
<li><a href="https://idratherbewriting.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">&ldquo;I&rsquo;d Rather Be Writing&rdquo; by Tom Johnson </a></li>
</ul>
<p>On the side note, it&rsquo;s curious from the tester&rsquo;s viewpoint that tech writers have the same holy war about how &ldquo;technical&rdquo; they should be. Cute, isn&rsquo;t it?</p>
<h2 id="vendors-and-companies" >
  <a class="group relative" href="#vendors-and-companies">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Vendors and companies</a>
</h2>
<p>Almost all IT companies now have blogs and even conferences, and those prove to be an excellent source. I&rsquo;d suggest paying attention to:</p>
<ul>
<li>vendors who create tools to work with API:
<ul>
<li><a href="http://blog.getpostman.com" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Postman</a></li>
<li><a href="https://stoplight.io/blog/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Stoplight</a></li>
</ul>
</li>
<li>companies whose main business is to provide or consume APIs:
<ul>
<li><a href="https://zapier.com/engineering/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The Zapier Engineering</a></li>
<li><a href="https://stripe.com/en-ca/blog/engineering" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Stripe Engineering</a></li>
</ul>
</li>
</ul>
<p>Though, be skeptical. The former tries to sell their tools, whereas the latter tend to show-off.</p>
<h2 id="testers" >
  <a class="group relative" href="#testers">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Testers</a>
</h2>
<p>Some of you are probably asking where are recommendations on testers? Well&hellip; <strong>fuck testers.</strong></p>
<p><em>Don&rsquo;t even bother reading <strong>attentively</strong> testers&rsquo; blogs about API.</em> Don&rsquo;t make my mistake! I&rsquo;ve lost an unimaginable amount of time doing that: oftentimes, all of them can be divided into three categories:</p>
<ol>
<li>How to apply well-known testing methods and techniques to APIs.</li>
<li>Basic theory on how APIs work.</li>
<li>Tutorials on using <code>&lt;insert a library or a tool name&gt;</code> to test API. All those RestAssured, Karate, you name it.</li>
</ol>
<p>Don&rsquo;t get me wrong, I do understand that I&rsquo;m also an offender and write similar articles. There is some value in them. For me, it&rsquo;s a way to sort my thoughts. And reading still helps making sense on what to look for. Moreover, if you&rsquo;ve just started your tester&rsquo;s journey, perhaps you&rsquo;re not so comfortable with test theory, then <a href="https://www.developsense.com/blog/2018/07/exploratory-testing-on-an-api-part-1/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">stories about its application</a> are useful. Nevertheless, I can go on a day-long rant about how <em>learning <strong>only</strong> from testers stupefies you.</em></p>
<p>So, heed my advice. I bet you already follow all those testers and see API related stuff from them once in a while. Skim through, there could be some interesting info, but don&rsquo;t rely on them. Fun fact: the most popular talks on the <a href="https://heisenbug.ru/en/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Heisenbug conference</a> are from non-testers. Testing can never be an idea by itself; you need a practical application to other fields to give testing a sense and direction. That&rsquo;s why studying those fields proves to be productive and enlightening. <strong>Always hunt for other sources!</strong></p>
]]></content>
  </entry>
  <entry>
    <title>How to test API usability: part 2</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/" hreflang="en"/>
    <published>2019-10-19T00:00:00Z</published>
    <updated>2019-10-19T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-10-19:/articles/2019/10/19/how-to-test-api-usability-part-2/</id>
    
    <summary type="html"><![CDATA[<p>This is part two of a two-parter. Check out <a href="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">part one</a>.</p>
<h2 id="empirical-methods" >
  <a class="group relative" href="#empirical-methods">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Empirical methods</a>
</h2>
<p>The distinction between analytical and empirical methods is that the latter investigates how real users will use the product.</p>
<p>But don&rsquo;t assume that empirical methods are by default better than analytical: both are important because they discover different problems. <a href="https://link.springer.com/content/pdf/10.1007%2F978-3-642-34347-6_10.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">This research</a> showed that heuristics were more efficient in finding documentation and structural problems, whereas empirical methods were more useful in finding UX and runtime specific issues.</p>]]></summary>
    <content type="html"><![CDATA[<p>This is part two of a two-parter. Check out <a href="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">part one</a>.</p>
<h2 id="empirical-methods" >
  <a class="group relative" href="#empirical-methods">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Empirical methods</a>
</h2>
<p>The distinction between analytical and empirical methods is that the latter investigates how real users will use the product.</p>
<p>But don&rsquo;t assume that empirical methods are by default better than analytical: both are important because they discover different problems. <a href="https://link.springer.com/content/pdf/10.1007%2F978-3-642-34347-6_10.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">This research</a> showed that heuristics were more efficient in finding documentation and structural problems, whereas empirical methods were more useful in finding UX and runtime specific issues.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/api_ux_barchart_hu_d93a77afd3a5923d.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/api_ux_barchart.png" alt="Barchart with comparison of different issue types found via different methods" defer>
	</picture>
	
</figure></p>
<h3 id="monitoring" >
  <a class="group relative" href="#monitoring">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Monitoring</a>
</h3>
<p>Monitoring is used to gather usage statistics. For web services, it&rsquo;s rather easy. For instance, you can discover that one API endpoint is never called. Hence, you should consider the causes: is it missing in the documentation or not needed to anyone? Monitoring also helps to map scenarios: what kind of requests, to which services, and in what order happen most often.</p>
<p>And don&rsquo;t forget to monitor not only successful requests but also failures. Imagine, some business errors are stockpiling: maybe you need to reconsider API design or error handling?</p>
<p>Another thing to monitor is data volumes. Analysts from the project I worked on assumed that  type A documents should be more common than type B documents, so the service was better optimized for the first type. It was quite a surprise when we did a simple SQL count and found out that the number of type A documents were 600 thousand, while type B accounted for 80 million. After that discovery, we had to prioritize tasks related to service B way higher.</p>
<h3 id="support-tickets" >
  <a class="group relative" href="#support-tickets">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Support tickets</a>
</h3>
<p>If you have a support team, you&rsquo;re in luck: analyze tickets, pick out those related to usability, and identify the most serious issues. Previously I <a href="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">wrote about accidental Cyrillic symbols instead of English in service schema</a>: these problems resurfaced specifically via support.</p>
<p>Moreover, support tickets offer insight into the most common tools and workflows used to work with your API. Once we had an external developer who generated <code>soapAction</code> dynamically based on a root request structure by trimming the word <code>Request</code>. For example, <code>importHouseRequest</code> gave <code>importHouse</code>. But one of our services with a name <code>importPaymentDocumentRequest</code> expected <code>soapAction=importPaymentDocumentData</code> instead of <code>importPaymentDocument</code> (what the developer would expect). On the one hand, the user&rsquo;s solution was poor: you&rsquo;d better use WSDL. On the other hand, maybe they didn’t have a choice  and we probably should ask ourselves why naming wasn&rsquo;t consistent.</p>
<h3 id="surveys" >
  <a class="group relative" href="#surveys">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Surveys</a>
</h3>
<p>Not everyone has a support service. Or perhaps it doesn&rsquo;t give enough information. In that case, surveying API users is helpful. There is no point in giving examples: this topic is highly contextual. But you can start with the basics: &ldquo;What do you like?&rdquo;, &ldquo;What do you don&rsquo;t like?&rdquo;, and &ldquo;What would you like to change?&rdquo;.</p>
<h3 id="user-sessions" >
  <a class="group relative" href="#user-sessions">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>User sessions</a>
</h3>
<p>User sessions are the most expensive and cumbersome usability evaluation method. You need to find people based on a typical user profile, give them some tasks, watch the process, and analyze results.</p>
<p>Each company administers sessions in its own way. <a href="http://apiux.com/2014/06/10/usability-dropbox-api/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Some perform remote sessions</a>, <a href="http://blog.pamelafox.org/2012/03/api-usability-testing.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">others invite developers on site</a>. In both cases developers can use their own laptops and favorite IDEs: first, it&rsquo;s closer to real-world conditions, second, it minimizes stress from an unknown environment.</p>
<p>Yet, there are more exotic examples. A developer is led to the room with a one-way mirror (yup, like in movies). A usability expert sits behind the mirror and observes developer actions as well as what&rsquo;s happening on the dev&rsquo;s computer screen. The developer can ask questions, but the expert will answer only in rare cases. In my opinion, it&rsquo;s too sterile.</p>
<p>Generally, all API related user sessions have two phases. The first phase is <strong>a developer workshop</strong> with tasks like:</p>
<ul>
<li>Solve a problem in the notebook without an IDE (to get an idea of how developers would design API on their own).</li>
<li>Practical tasks for API usage (e.g., write a code for file upload using a service).</li>
<li>Read and review a code snippet to assess its clarity and readability (use printouts to make this task more challenging).</li>
<li>Debug a faulty code snippet (this helps to study how a user will handle and correct an error).</li>
</ul>
<p>The second phase is <strong>an interview</strong> where you ask:</p>
<ul>
<li>Name three biggest issues you encountered during the workshop and how did you overcome them (documentation, support, StackOverflow, a friend&rsquo;s help)?</li>
<li>How much time did you spend looking for additional information outside official documentation?</li>
<li>Did you encounter unexpected error messages? If yes, did they help you correct a problem?</li>
<li>Name at least three ways to improve official documentation.</li>
<li>Name at least three ways to improve API design.</li>
</ul>
<h2 id="personas" >
  <a class="group relative" href="#personas">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Personas</a>
</h2>
<p>Personas are used both in analytical and empirical methods. All you need is to figure out which characteristics best describe your users (in case of API, developers). These descriptions tend to be humanized by assigning a name and a photo, adding information about fears and preferences. You can wear a &ldquo;persona hat&rdquo; while applying heuristics or rely on them while selecting developers for user sessions.</p>
<p>Typical developers&rsquo; personas:</p>
<ul>
<li><strong>Systematic developers</strong> don&rsquo;t trust API and write code defensively. They are usually deductive, write on C++, C, or even Assembly.</li>
<li><strong>Pragmatic developers</strong> are more common and work both in deductive and inductive manners. Typically they code desktop and mobile apps in Java or C#.</li>
<li><strong>Opportunistic developers</strong> concentrate on solving business problems in an exploratory and inductive fashion. Guess what language they prefer? JavaScript.</li>
</ul>
<div class="callout warning">
  <div class="callout-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg></div><p>Now, I want to point out that the aforementioned language discrimination is not my invention. If you&rsquo;re lucky, perhaps you&rsquo;ll find the original article by Visual Studio usability expert, where these quirky definitions were introduced. Unfortunately, I was able to get only [its first page in the Wayback Machine][visual-studio], so you have to take my word for it. Nevertheless, I hope this example can encourage you to create your own personas.</p></div>
<p>We can also combine personas with cognitive dimensions. Create <a href="https://en.wikipedia.org/wiki/Radar_chart" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a radar chart</a> with 12 axes, where each axis is a cognitive dimension. Next, plot current values for your API and values according to the persona&rsquo;s expectations. This chart is great for comparing how existing API corresponds to user values.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/api_ux_chart_hu_e51a108765ca9be0.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/api_ux_chart.png" alt="Radar chart with comparison of developer expectations vs current state of API" defer>
	</picture>
	
</figure></p>
<p>Developer from the example chart (blue line) prefers API with a high level of consistency (10) and hates writing boilerplate (4). As we can see, the current state of API (black line) doesn&rsquo;t satisfy these criteria.</p>
<h2 id="summing-up" >
  <a class="group relative" href="#summing-up">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Summing up</a>
</h2>
<p>Readers comfortable with GUI usability testing would say: &ldquo;That&rsquo;s exactly the same stuff!&rdquo;. And you&rsquo;re right, there is nothing supernatural about API usability. Even though it&rsquo;s called an <em>application programming</em> interface, programs are yet to learn how to find other APIs and use them automatically; they still need us, meatbags. That&rsquo;s why almost everything applied for GUI usability evaluation is reusable for API with some adjustments.</p>
<p>Now, what about <em>the best method?</em>  None, apply them all! <a href="https://link.springer.com/content/pdf/10.1007%2F978-3-642-34347-6_10.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">According to this research</a>, each method can identify unique issues.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/api_ux_stats_hu_266cb1bea6bc0cdb.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/api_ux_stats.png" alt="Venn diagram showing how different methods overlap in finding different issues" defer>
	</picture>
	
</figure></p>
<p>If you are tight on resources, I suggest using the least expensive methods: heuristics, cognitive dimensions, walkthrough, and support tickets. Even the simplest techniques can drive API improvements.</p>
<p>Someone would argue that API usability is not that important: &ldquo;we don&rsquo;t have time for that, it&rsquo;s a dev thingy.&rdquo; But developers created <a href="https://github.com/google/styleguide" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">style guides</a> not just to be fancy; this serves to accelerate the achievement of shippable quality. We care about hidden code quality, therefore we need to care about externally visible code like APIs even more.</p>
]]></content>
  </entry>
  <entry>
    <title>How to test API usability: part 1</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/" hreflang="en"/>
    <published>2019-10-13T00:00:00Z</published>
    <updated>2019-10-13T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-10-13:/articles/2019/10/13/how-to-test-api-usability-part-1/</id>
    
    <summary type="html"><![CDATA[<p><strong>Disclaimer:</strong> this is a translation of <a href="https://quality-lab.ru/blog/api-usability-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the article</a> written 2 years ago for a corporate blog. Bear in mind, at the moment of the writing I was testing SOAP services and Excel-based import/export at big government project, so most of the examples relate to that experience.</p>]]></summary>
    <content type="html"><![CDATA[<p><strong>Disclaimer:</strong> this is a translation of <a href="https://quality-lab.ru/blog/api-usability-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the article</a> written 2 years ago for a corporate blog. Bear in mind, at the moment of the writing I was testing SOAP services and Excel-based import/export at big government project, so most of the examples relate to that experience.</p>
<hr>
<p>Usability is one of the most crucial quality attributes of an API. Let&rsquo;s talk about why, when, and how we can assess this characteristic.</p>
<p>Today (hopefully) no one doubts the necessity of usability testing of GUI. Yet, according to <a href="https://en.wikipedia.org/wiki/ISO_9241" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">ISO 9241</a>, <em>usability is the effectiveness, efficiency and satisfaction with which specified users achieve specified goals in particular environments.</em> There is no mention of menus, fonts, or buttons color. Hence, we can evaluate usability of any product, be it a mobile app, a vacuum cleaner, or an API.</p>
<p>For testing API usability we can use methods developed in the field of HCI; same as used for GUI. Generally, these methods can be divided into two categories: analytical and empirical.</p>
<h2 id="analytical-methods" >
  <a class="group relative" href="#analytical-methods">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Analytical methods</a>
</h2>
<p>Analytical methods involve exploration based on some expert knowledge. Loosely speaking, you and/or the whole dev team try to evaluate and find hypothetical usability problems without users input.</p>
<h3 id="heuristic-evaluation" >
  <a class="group relative" href="#heuristic-evaluation">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Heuristic evaluation</a>
</h3>
<p>Easiest way is to use heuristics. There are no strict lists of what criteria you should check; all depends on what kind of API you have (e.g., library or REST service).</p>
<p>For instance, <a href="https://link.springer.com/content/pdf/10.1007%2F978-3-642-34347-6_10.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a paper on a structural analysis of usability problem categories</a> mentions this set of heuristics:</p>
<ul>
<li><strong>Complexity.</strong> An API should not be too complex. Complexity and flexibility should be balanced. Use abstraction.</li>
<li><strong>Naming.</strong> Names should be self-documenting and used consistently.</li>
<li><strong>Caller&rsquo;s perspective.</strong> Make the code readable, e.g. <code>makeTV(Color)</code> is better than <code>makeTV(true)</code>.</li>
<li><strong>Documentation.</strong> Provide documentation and examples.</li>
<li><strong>Consistency  and  conventions.</strong> Design consistent APIs (order of parameters, call semantics) and obey conventions (get/set methods).</li>
<li><strong>Conceptual correctness.</strong> Help programmers to use an API properly by using correct elements.</li>
<li><strong>Method parameters and return type.</strong> Do not use many parameters. Return values should indicate a result of the method. Use exceptions when exceptional processing is demanded.</li>
<li><strong>Parametrized  constructor.</strong> Always provide default constructor and setters rather than a constructor with multiple parameters.</li>
<li><strong>Factory pattern.</strong> Use factory pattern only when inevitable.</li>
<li><strong>Data types.</strong> Choose correct data types. Do not force users to use casting. Avoid using strings if better type exists.</li>
<li><strong>Concurrency.</strong> Anticipate concurrent access in mind.</li>
<li><strong>Error handling and exceptions.</strong> Define class members as public only when necessary. Exceptions should be handled near from where it occurred. Error message should convey sufficient information.</li>
<li><strong>Leftovers for client code.</strong> Make the user type as few code as possible.</li>
<li><strong>Multiple ways to do one.</strong> Do not provide multiple ways to achieve one thing.</li>
<li><strong>Long chain of references.</strong> Do not use long complex inheritance hierarchies.</li>
<li><strong>Implementation vs. interface.</strong> Interface dependencies should be preferred as they are more flexible.</li>
</ul>
<p>Let&rsquo;s try to apply some of these heuristics.
There was a time when every new tester came to me during the onboarding and asked about the error message &ldquo;House with ID &lt;&gt; was not found.&rdquo; I told them to use internal system id instead of global FIAS id (Russian index system for buildings). And every one looked startled and answered me that there is no such parameter in the API request! Well, the problem was that you had to use the same parameter named <code>FIASHouseGUID</code>. For some reason when system was designed no one thought that the better name would have been <code>HouseID</code> as it could be filled either with FIAS id or with internal id. Even though current name was misleading (naming heuristic), it was no longer possible to change without breaking backward compatibility.</p>
<p>Next example is about error handling. One service I tested had a very common error &ldquo;Access is denied.&rdquo; There were numerous reasons for this error: no entitling documents, documents are not in the status &ldquo;published,&rdquo; other organization already created the same object. Reasons were different, but the received error message was the same; users couldn&rsquo;t guess what was their problem.</p>
<p>There are other, more &ldquo;serious&rdquo; heuristics for API. Often they target specific technical details. You need to be able to code to understand them. For example, <a href="http://www.cs.bc.edu/~muller/teaching/cs102/s06/lib/pdf/api-design" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">criteria from Joshua Bloch</a>. Or <a href="https://www.cs.cmu.edu/~NatProg/papers/Stylos2007CreateSetCall.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a usability research made by Microsoft</a> to determine which constructor is better: default constructor with setters and getters or constructor with required parameters. Results showed that the first method was more preferable; this became a heuristic for library design.</p>
<h3 id="cognitive-dimensions" >
  <a class="group relative" href="#cognitive-dimensions">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Cognitive dimensions</a>
</h3>
<p>These are distinct criteria used predominately for evaluating usability of notations, user interfaces, and programming languages &mdash; or, generally speaking, information artifacts. In my view, they intersect with some heuristics, but there is a difference: heuristics are contextually selected by some experts, whereas cognitive dimensions are more or less stable set of principles. You can read about the main set described by Thomas R.G. Green and Marian Petre <a href="https://en.wikipedia.org/wiki/Cognitive_dimensions_of_notations" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">in the Wikipedia</a>.</p>
<p>Some companies customize cognitive dimensions for their needs, like <a href="https://web.archive.org/web/20190402085549/http://www.drdobbs.com/windows/measuring-api-usability/184405654" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a framework suggested by Visual Studio usability group</a>:</p>
<ul>
<li><strong>Abstraction level.</strong> The minimum and maximum levels of abstraction exposed by the API, and the minimum and maximum levels usable by a targeted developer.</li>
<li><strong>Learning style.</strong> The learning requirements posed by the API and the learning styles available to a targeted developer.</li>
<li><strong>Working framework.</strong> The size of the conceptual chunk (developer working set) needed to work effectively.</li>
<li><strong>Work-step unit.</strong> How much of a programming task must/can be completed in a single step.</li>
<li><strong>Progressive evaluation.</strong> To what extent partially completed code can be executed to obtain feedback on code behavior.</li>
<li><strong>Premature commitment.</strong> The number of decisions that developers have to make when writing code for a given scenario and the consequences of those decisions.</li>
<li><strong>Penetrability.</strong> How the API facilitates exploration, analysis, and understanding of its components, and how targeted developers go about retrieving what is needed.</li>
<li><strong>API elaboration.</strong> The extent to which the API must be adapted to meet the needs of targeted developers.</li>
<li><strong>API viscosity.</strong> The barriers to change inherent in the API and how much effort a targeted developer needs to expend to make a change.</li>
<li><strong>Consistency.</strong> How much of the rest of an API can be inferred once part of it is learned.</li>
<li><strong>Role expressiveness.</strong> How apparent the relationship is between each component exposed by an API and the program as a whole.</li>
<li><strong>Domain correspondence.</strong> How clearly the API components map to the domain and any special tricks that the developer needs to be aware of to accomplish some functionality.</li>
</ul>
<p>Here is an example for domain correspondence. Service main entity was a house. Common apartment building can have several entryways, each leading to set of apartments. But in Kaliningrad this doesn&rsquo;t apply: a typical address there can look like &ldquo;2-4 Green Street,&rdquo; where entryways are house 2 and house 4. This bizarre (and initially unknown) domain model broke the whole logic behind API design. For instance, we had to allow users to add house-level metering devices to entryways if it&rsquo;s actually a house.</p>
<h3 id="cognitive-walkthrough" >
  <a class="group relative" href="#cognitive-walkthrough">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Cognitive walkthrough</a>
</h3>
<p>While the first two methods are based on checking API against some kind of list of criteria, cognitive walkthrough is closer to scenario-based testing. Essentially, an expert comes up with typical API usage scenarios and attempts to perform them.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/walkthrough_hu_b6307984cb5f96a7.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/walkthrough.png" alt="Cognitive walkthrough example" defer>
	</picture>
	
</figure></p>
<p>You can combine this method with heuristics. When we analyzed services, we found out that there were  problems with the consistency: when you sent a request to create an entity, some services responded with entity version id, while others provided root id. Moreover, most of the services required entity id for creation of other entities, and again, it could be either root or version id. It didn&rsquo;t look that bad, until we tried walking through a business scenario:</p>
<ol>
<li>Create an entitling document</li>
<li>Create a metering device providing document root id</li>
</ol>
<p>In existing API workflow you had to do it in 3 steps  instead of 2:</p>
<ol>
<li>Create an entitling document → server responds with document version id</li>
<li>Retrieve the document using provided version id and get document root id from the response</li>
<li>Create a metering device providing document root id</li>
</ol>
<p>This middle step is objectively unnecessary and generates additional server load. Here, using cognitive walkthrough, we also detected an inconsistency with heuristic &ldquo;minimal working code size.&rdquo;</p>
<h3 id="api-peer-review" >
  <a class="group relative" href="#api-peer-review">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>API peer review</a>
</h3>
<p>Heuristics and walkthroughs are great methods, but they could be quite subjective. For better objectivity you&rsquo;d better use group evaluations, where several persons analyze API. You can read about how and why this method can find usability problems which are rarely found by empirical methods in <a href="https://pdfs.semanticscholar.org/b936/17a339d2a1dfa167e6700d15e31d813c331c.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">this Microsoft paper</a>.</p>
<p>Peer reviews involve these four roles:</p>
<ul>
<li>Usability expert who will organize and moderate the evaluation process from usability perspective</li>
<li>A person who is an owner for the specific API chunk under review</li>
<li>A person who is an owner of the API unit (or system) where the reviewed chunk resides and who knows the context of API usage and its interactions with other APIs</li>
<li>3-4 persons who will complete some task which will be used to actually evaluate usability (usually just other developers)</li>
</ul>
<p>During the planning process, a usability expert and a chunk owner should discuss:</p>
<ul>
<li>Key tasks to be completed during the review (e.g., how to create a document using an API)</li>
<li>Code examples to be reviewed</li>
<li>Who are the other participants (they can be selected based on specific criteria, like knowledge of SOAP services and Java)</li>
<li>Place and time for review session</li>
</ul>
<p>You should start a peer review session with the explanation of how this meeting will proceed and communicate basic information related to the evaluated API chunk. Next you distribute code examples and discuss them, asking these main questions:</p>
<ul>
<li>Do you understand what this code does and what its objective is?</li>
<li>Is this objective achieved in logical and rational manner?</li>
</ul>
<p>Based on the answers, a usability expert asks to elaborate details. For example, hearing that naming is weird, expert should ask why a person thinks that way and what different name would be better.</p>
<p>The final step is to analyze problems. Here is where an API unit owner can help to identify the most significant issues and could they be resolved or not.</p>
<hr>
<p>That&rsquo;s the end of part one. Empirical methods are covered in <a href="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">part two</a>.</p>
]]></content>
  </entry>
  <entry>
    <title>Internal struggle with language gymnastics</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/10/05/internal-struggle-with-language-gymnastics/" hreflang="en"/>
    <published>2019-10-05T00:00:00Z</published>
    <updated>2019-10-05T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-10-05:/articles/2019/10/05/internal-struggle-with-language-gymnastics/</id>
    
    <summary type="html"><![CDATA[<p>During the RSTA class I asked a question about language and communications:</p>
<blockquote>
<p>On one hand, I wholly agree with the notion that we should be attentive with words. Like checking vs testing, &ldquo;quality assurance&rdquo;, and all those other things. I find myself as they say &ldquo;nit-picking&rdquo; quite often.</p>
<p>On the other hand, I also follow a rule &ldquo;if your team understands you, words don&rsquo;t matter&rdquo;. Especially, if you come to the established project with existing vocabulary. It can be bizarre and absurd (my favorite was &ldquo;bug validation&rdquo; for the process of checking bug fixes), but it&rsquo;s habitual to everyone, so you&rsquo;ll likely spend more time trying to &ldquo;reteach&rdquo; than working. And you&rsquo;ll probably fail.</p>]]></summary>
    <content type="html"><![CDATA[<p>During the RSTA class I asked a question about language and communications:</p>
<blockquote>
<p>On one hand, I wholly agree with the notion that we should be attentive with words. Like checking vs testing, &ldquo;quality assurance&rdquo;, and all those other things. I find myself as they say &ldquo;nit-picking&rdquo; quite often.</p>
<p>On the other hand, I also follow a rule &ldquo;if your team understands you, words don&rsquo;t matter&rdquo;. Especially, if you come to the established project with existing vocabulary. It can be bizarre and absurd (my favorite was &ldquo;bug validation&rdquo; for the process of checking bug fixes), but it&rsquo;s habitual to everyone, so you&rsquo;ll likely spend more time trying to &ldquo;reteach&rdquo; than working. And you&rsquo;ll probably fail.</p>
<p>So&hellip; how to live with this contradiction?</p>
</blockquote>
<p>And later:</p>
<blockquote>
<p>As I understand you, contradiction is resolved by considering how much harm it can create?</p>
<p>That makes sense. Pain and risk analysis in practice. Even though I said that &ldquo;defect validation&rdquo; absurdity was my favorite, it wasn&rsquo;t harmful for thinking processes: we usually didn&rsquo;t even call it like that and used abbreviation &ldquo;DV&rdquo;. Or sometimes QA (grrr). I noticed that majority of non-dev colleagues don&rsquo;t even know what A stands for. Probably it&rsquo;s the reason why some testers come up with new reinterpretations like &ldquo;Advocate&rdquo; or &ldquo;Assistant&rdquo;. BTW, here is a <a href="https://thebrokentest.com/50-shades-of-quality/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">funny example</a>.</p>
</blockquote>
<p>While James debated that there is no contradiction, it is there. It&rsquo;s my internal contradiction. I feel these sides of me constantly struggling; for an outside viewer it can be perceived as inconsistency.</p>
<p>I haven&rsquo;t found resolution to this conflict yet, but it occurred to me that it is based on the conflict between characteristic testers&rsquo; nit-pickiness and my amateur linguistics studies.</p>
<p>You see, when it comes to languages in general, my position is 100% on the side of &ldquo;all is fine as long we understand each other&rdquo;. Why?</p>
<h2 id="pronunciation" >
  <a class="group relative" href="#pronunciation">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Pronunciation</a>
</h2>
<p>I&rsquo;m not English native speaker. And I&rsquo;m not gifted with an ability to perfectly emulate a native pronunciation. In fact, sometimes I have to speak with an even heavier Russian accent than my usual, because it&rsquo;s easier to understand for some people.</p>
<p>Now, if we go even further, <em>what is a native pronunciation?</em> Standard American? Or Royal UK? Or Canadian, eh? So, even if I could speak using one proper variant, it still won&rsquo;t be <em>really native</em> in many contexts.</p>
<h2 id="vocabulary" >
  <a class="group relative" href="#vocabulary">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Vocabulary</a>
</h2>
<p>Obvious point with the same examples as before. But that&rsquo;s English, the de-facto new Latin. Let me tell you an anecdote from Russian. I was born in the Northern Kazakhstan in the city on the border with Russia. You&rsquo;d imagine not many vocabulary differences. Yet, the moment you cross the border everyone can tell that you&rsquo;re from Kazakhstan just by one extremely common word: <em>&ldquo;sotka&rdquo;</em> (contraction for &ldquo;a cell phone&rdquo;). In Russia they use <em>&ldquo;mobilka&rdquo;</em> (contraction from &ldquo;a mobile phone&rdquo;). This reminds me of &ldquo;smoke&rdquo; vs &ldquo;sanity&rdquo; testing a lot.</p>
<h2 id="words-origins" >
  <a class="group relative" href="#words-origins">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Words origins</a>
</h2>
<p>Some words with the same spelling can have completely distinct origins. For example, <em>&ldquo;bear&rdquo;</em>:</p>
<ul>
<li>as for an animal came from Proto-Indo-European <code>*bʰerH-</code> (grey, brown) or <code>*ǵʰwer-</code> (wild animal)</li>
<li>as for &ldquo;to sustain&rdquo; came from Proto-Indo-European <code>*bʰer-</code> (to carry)</li>
</ul>
<p>And the opposite situation, when words with different spelling and meaning came from the same origin, e.g. <em>&ldquo;suit&rdquo;</em> and <em>&ldquo;suite&rdquo;</em>.</p>
<p>People tend to make wrong assumptions about modern spelling and pronunciation. We think we understand words and their relative closeness. We don&rsquo;t. Therefore, many  everyday conclusions about them are also faulty. Those who try to be on a safe side refer to dictionaries, but here is a catch: dictionaries are opinionated language slices. That&rsquo;s why there are so many dictionaries: general, jargon-specific, etymological. There is no single point of truth you can safely refer to. Isn&rsquo;t it funny when you read news about some big-name dictionary <em>finally</em> including a word that was in use for a long time?</p>
<p>By the way, in Russian <em>&ldquo;тестер&rdquo;</em> while being direct calque of &ldquo;tester&rdquo; is a name for devices like multimeter. Electrical engineers coined this term in Russian earlier than our role was invented (so we are named &ldquo;тестировщик&rdquo; ~ &ldquo;testist&rdquo;). It&rsquo;s quite funny considering how much emphasize is there on testing being human activity.</p>
<h2 id="evolution-of-languages" >
  <a class="group relative" href="#evolution-of-languages">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Evolution of languages</a>
</h2>
<p>All aforementioned are just smaller parts of overall language evolution. For some reason we are accustomed to perceive a language as something stagnant and with rigid unchanging rules. Maybe because it&rsquo;s easier to teach like that in school? And nothing can be further from true because languages are perpetually in flux, either for historical or geographical reasons. Before it was happening naturally without many obstacles, but now we have schools, official authorities like Académie française, and beloved grammar-nazis.</p>
<p>One of the best examples is an accentual system in Russian (stress). Whoever tried to learn how to pronounce Russian words would be certainly baffled how illogical it is. Natives make mistakes all the time. The reason is simple: current system is in the transition state from highly ordered and easy Proto-Slavic accent to the new someday also ordered but different accent. Yet right now transition is around 30% mark and it breaks havoc within speakers. What makes things worse are all those regulatory bodies and opinionated people who try to control this process and make you speak already obsolete way.</p>
<hr>
<p>I won&rsquo;t be able to stop arguing about some words. Even those who say that they are sick and tired of some common testing debates, still nit-pick on other concepts. It&rsquo;s a part of human nature which is common not only in testing community: recently I&rsquo;ve read <a href="https://www.troyhunt.com/your-api-versioning-is-wrong-which-is/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">an article by Troy Hunt</a> about which way of API versioning is better. And the most valuable lesson from there is:</p>
<blockquote>
<p>Unfortunately this very often gets philosophical and loses sight of what the real goal should be: <strong>building software that works</strong></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Achievement unlocked: RSTA</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/09/30/achievement-unlocked-rsta/" hreflang="en"/>
    <published>2019-09-30T00:00:00Z</published>
    <updated>2019-09-30T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-30:/articles/2019/09/30/achievement-unlocked-rsta/</id>
    
    <summary type="html"><![CDATA[<p>Landscape of testing related courses is problematic. On one hand, there are <em>lots</em> of courses. On the other hand, there are <em>few</em> courses <em>I would consider.</em> Either they are lackluster and certificate-centered, or entry-level-only, or mind-bogglingly expensive. And about the last bit. Many say that if a company provide a training budget, costs don&rsquo;t matter. Well, maybe if that company is one of <a href="https://en.wikipedia.org/wiki/Facebook,_Apple,_Amazon,_Netflix_and_Google" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">FAANG</a>, you can think so. But I work in a small one and I don&rsquo;t want to throw its (our?) money away.</p>]]></summary>
    <content type="html"><![CDATA[<p>Landscape of testing related courses is problematic. On one hand, there are <em>lots</em> of courses. On the other hand, there are <em>few</em> courses <em>I would consider.</em> Either they are lackluster and certificate-centered, or entry-level-only, or mind-bogglingly expensive. And about the last bit. Many say that if a company provide a training budget, costs don&rsquo;t matter. Well, maybe if that company is one of <a href="https://en.wikipedia.org/wiki/Facebook,_Apple,_Amazon,_Netflix_and_Google" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">FAANG</a>, you can think so. But I work in a small one and I don&rsquo;t want to throw its (our?) money away.</p>
<p>Nevertheless, there are always some courses and trainings which you just want to attend to. For example, those from Satisfice, Inc. That&rsquo;s why I applied as soon as I saw time convenient online version of Rapid Software Testing Applied. And, BTW, the price was decent.</p>
<p>I don&rsquo;t want to write about the course agenda and curriculum: google is your friend. I will neither sing praises to its appeal and importance nor criticize its materials. We can argue as much as we like on should testers be able to code or not, but the knowledge of who James Bach and Michael Bolton are can be a mark of competency (necessary but not sufficient). And based on this knowledge, I think, it&rsquo;s quite obvious what you can expect from such course. I also won&rsquo;t describe what <em>I learned:</em> the most useful attainments are tacit and will surface in future work and articles.</p>
<p>So, this article is about technical moments. My previous place of work, Quality Lab, provides trainings, and from there I&rsquo;ve discovered an interest in learning and comparing processes used in education.</p>
<p>RSTA was held September 18-20, completely online. It was nice that we used Mattermost for communications; I used this open source messenger before. Usually, it&rsquo;s always scary how courses handle linux users: sometimes they require skype (which became quite awful) or webinars are streamed with god knows what. Here everything was ok, linuxhead&rsquo;s feelings were not offended.</p>
<p>After the course we received <strong>all</strong> materials, not just slides and recordings, but also:</p>
<ul>
<li>Agenda &amp; log</li>
<li>Recordings</li>
<li>Class materials (like slides and articles to read)</li>
<li>Session reports with attachments (with comments by instructor)</li>
<li>Bug list (with comments and attachments)</li>
<li>Group chats archive</li>
</ul>
<p>Last part is really awesome. I, like a fool, sat and copied all important messages. Even woke up during the night realizing I forgot to save some PDFs. And it turned out not to be a problem at all, because I have the whole archive now. Super.</p>
<p>One thing I would change is a duration: three days for &ldquo;Applied&rdquo; is too fast. You&rsquo;d want more practice. For example, double all assignments, where the first time would be a &ldquo;learning&rdquo; and the second time &mdash; &ldquo;reinforcement and revision&rdquo;. Reporting assignments would be a great addition too. Also, it would be interesting to intensify students&rsquo; cooperations: working in teams was possible, but wasn&rsquo;t required. What if there was one obligatory assignment for paired testing?..</p>
<p>Our group, as I understand, was smaller than usual. But for me it was an upside, because I read all assignments and bug reports. As usual, some students were more active than others: big shoutout for them for questions and discussions!</p>
<p>Overall atmosphere was pleasant. I noticed that in some other courses instructors were present only as talking heads in the pre-recorded videos and names in the ads. Not in this case. James answered questions himself and commented on assignments and bugs; peers advisors only helped.</p>
<p>Active students, honest instructor and peer advisors are the most significant  qualities for me. We go to the training to get out from our bubble; the more communications and sharing we get, the more valuable is this experience. And RSTA definitely fulfilled this expectation.</p>
]]></content>
  </entry>
  <entry>
    <title>New domain</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/09/24/new-domain/" hreflang="en"/>
    <published>2019-09-24T00:00:00Z</published>
    <updated>2019-09-24T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-24:/articles/2019/09/24/new-domain/</id>
    
    <summary type="html"><![CDATA[<p>Yay, I&rsquo;ve bought my own domain!</p>
<p>First I though about fancy-schmancy <code>.me</code> or <code>.io</code>. Or maybe <code>aviska.se</code>. But I went with simple aviskase.com. Not that I am particularly invested into SEO and stuff, but all the articles recommend to be boring. Also, I used <em>comparable products</em> heuristic: most of the blogs I am subscribed to have the same dull TLD.</p>]]></summary>
    <content type="html"><![CDATA[<p>Yay, I&rsquo;ve bought my own domain!</p>
<p>First I though about fancy-schmancy <code>.me</code> or <code>.io</code>. Or maybe <code>aviska.se</code>. But I went with simple aviskase.com. Not that I am particularly invested into SEO and stuff, but all the articles recommend to be boring. Also, I used <em>comparable products</em> heuristic: most of the blogs I am subscribed to have the same dull TLD.</p>
<p>BTW, if anyone ever was subscribed to RSS, sorry for whole new regeneration =(</p>
]]></content>
  </entry>
  <entry>
    <title>SOAP testing 101</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/09/15/soap-testing-101/" hreflang="en"/>
    <published>2019-09-15T00:00:00Z</published>
    <updated>2019-09-15T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-15:/articles/2019/09/15/soap-testing-101/</id>
    
    <summary type="html"><![CDATA[<p><strong>Disclaimer:</strong> this is a translation of <a href="https://quality-lab.ru/blog/soap-api-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the article</a> written 2 years ago for a corporate blog. I didn&rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &ldquo;official.&rdquo; Also, some examples don&rsquo;t make sense in English. Still, I didn&rsquo;t update it too radically. Bear in mind, at the moment of the writing I was testing SOAP services and Excel-based import/export at big government project, so most of the examples relate to that experience.</p>]]></summary>
    <content type="html"><![CDATA[<p><strong>Disclaimer:</strong> this is a translation of <a href="https://quality-lab.ru/blog/soap-api-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the article</a> written 2 years ago for a corporate blog. I didn&rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &ldquo;official.&rdquo; Also, some examples don&rsquo;t make sense in English. Still, I didn&rsquo;t update it too radically. Bear in mind, at the moment of the writing I was testing SOAP services and Excel-based import/export at big government project, so most of the examples relate to that experience.</p>
<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>Sometimes you&rsquo;ll see a block like that. It will contain my current thoughts on the subject or comments.</p></div>
<hr>
<p>SOAP (Simple Object Access Protocol) is a standardized protocol for communication between a server and a client. Typically, it&rsquo;s used over HTTP(S), but it can operate over other application level protocols like SMTP or FTP.</p>
<p>Testing SOAP services is not drastically different from any other API testing, but you need to learn some specifics and use better suited tools. This article will provide a small checklist of know-hows and skills which you can use as a guide for getting started and improving your work.</p>
<h2 id="theory" >
  <a class="group relative" href="#theory">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Theory</a>
</h2>
<p>SOAP is a protocol, so you need to read about the protocol itself as well as standards and other protocols it uses and, when the time comes, about its extensions.</p>
<h3 id="xml" >
  <a class="group relative" href="#xml">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>XML</a>
</h3>
<p>XML is a markup language similar to HTML. Every message sent via SOAP is a XML-document, where you can easily identify how data are structured.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff79c6">&lt;?xml version=&#34;1.0&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;note&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;to&gt;</span>aviskase<span style="color:#ff79c6">&lt;/to&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;from&gt;</span>universe<span style="color:#ff79c6">&lt;/from&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;heading&gt;</span>Reminder<span style="color:#ff79c6">&lt;/heading&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;body&gt;</span>Do not forget to translate the article!<span style="color:#ff79c6">&lt;/body&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/note&gt;</span>
</span></span></code></pre></div><p>You can read about XML in details on <a href="https://www.w3schools.com/xml/default.asp" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">w3schools</a>. Pay attention to <a href="https://www.w3schools.com/xml/xml_namespaces.asp" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">namespaces</a> (name conflict resolution method for XML elements), they are used in SOAP a lot.</p>
<h3 id="xsd" >
  <a class="group relative" href="#xsd">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>XSD</a>
</h3>
<p>It&rsquo;s quite handy to have standardized description of possible XML-documents and to be able to validate them. For that we use XML Schema Definition (or XSD). Two key XSD features for a tester are data type definitions and an ability to restrict possible values. For instance, element <code>body</code> from the previous example can be set as optional and with a maximum string length of 255.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;xs:element</span> <span style="color:#50fa7b">name=</span><span style="color:#f1fa8c">&#34;body&#34;</span> <span style="color:#50fa7b">minOccurs=</span><span style="color:#f1fa8c">&#34;0&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;xs:simpleType&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;xs:restriction</span> <span style="color:#50fa7b">base=</span><span style="color:#f1fa8c">&#34;xs:string&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">&lt;xs:maxLength</span> <span style="color:#50fa7b">value=</span><span style="color:#f1fa8c">&#34;255&#34;</span><span style="color:#ff79c6">/&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;/xs:restriction&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;/xs:simpleType&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/xs:element&gt;</span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>XSD is awesome. The more detailed it is, the fewer dumb tests you need to do. Services can use XSD to automatically validate requests and respond with a proper error. Therefore, you don&rsquo;t need to check all those equivalence classes and boundaries (as long as XSD is detailed and correct and this server-side validation is turned on). So, the first thing you should do for SOAP testing is to test its documentation, which is XSD. That way I found tons of issues like wrong restriction or accidental Cyrillic symbols in element definitions.</p>
<p>More info about XSD you can get on <a href="https://www.w3schools.com/xml/schema_intro.asp" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">w3schools</a>.</p>
<h3 id="wsdl" >
  <a class="group relative" href="#wsdl">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>WSDL</a>
</h3>
<p><a href="https://www.w3schools.com/xml/xml_wsdl.asp" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">WSDL</a> is used for describing web services. WSDL-documents contain information about service location and available methods (operations); every operation has descriptions of request and response parameters. Sometimes XSD can be embedded inside WSDL, but that&rsquo;s not always the case. WSDL-document is a bit of <em>magic.</em> You can generate it from classes implementing the server and then use it to generate classes for a client. So don&rsquo;t forget to check that WSDL-document is accurate and accessible to users.</p>
<h3 id="soap" >
  <a class="group relative" href="#soap">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>SOAP</a>
</h3>
<p>SOAP has two versions: 1.1 or 1.2. Novice tester might not bother about differences between them. Just make sure you know which version is used in your system (and sometimes it could be both). SOAP describes message formats and details for handling particular messages. For example, some header elements can be used in the services where messages are transferred between several intermediates before reaching a destination.</p>
<p>Here is a request example of operation <code>checkText</code> from Yandex Speller API:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff79c6">&lt;soapenv:Envelope</span> <span style="color:#50fa7b">xmlns:soapenv=</span><span style="color:#f1fa8c">&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;</span> <span style="color:#50fa7b">xmlns:spel=</span><span style="color:#f1fa8c">&#34;http://speller.yandex.net/services/spellservice&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;soapenv:Header/&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;soapenv:Body&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;spel:CheckTextRequest</span> <span style="color:#50fa7b">lang=</span><span style="color:#f1fa8c">&#34;en&#34;</span> <span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">&lt;spel:text&gt;</span>mistace<span style="color:#ff79c6">&lt;/spel:text&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;/spel:CheckTextRequest&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;/soapenv:Body&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/soapenv:Envelope&gt;</span>
</span></span></code></pre></div><p>And response:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff79c6">&lt;soap:Envelope</span> <span style="color:#50fa7b">xmlns:xsi=</span><span style="color:#f1fa8c">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span> <span style="color:#50fa7b">xmlns:xsd=</span><span style="color:#f1fa8c">&#34;http://www.w3.org/2001/XMLSchema&#34;</span> <span style="color:#50fa7b">xmlns:soap=</span><span style="color:#f1fa8c">&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;soap:Body&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;CheckTextResponse</span> <span style="color:#50fa7b">xmlns=</span><span style="color:#f1fa8c">&#34;http://speller.yandex.net/services/spellservice&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">&lt;SpellResult&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&lt;error</span> <span style="color:#50fa7b">code=</span><span style="color:#f1fa8c">&#34;1&#34;</span> <span style="color:#50fa7b">pos=</span><span style="color:#f1fa8c">&#34;0&#34;</span> <span style="color:#50fa7b">row=</span><span style="color:#f1fa8c">&#34;0&#34;</span> <span style="color:#50fa7b">col=</span><span style="color:#f1fa8c">&#34;0&#34;</span> <span style="color:#50fa7b">len=</span><span style="color:#f1fa8c">&#34;7&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">&lt;word&gt;</span>mistace<span style="color:#ff79c6">&lt;/word&gt;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#ff79c6">&lt;s&gt;</span>mistake<span style="color:#ff79c6">&lt;/s&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff79c6">&lt;/error&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ff79c6">&lt;/SpellResult&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">&lt;/CheckTextResponse&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;/soap:Body&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/soap:Envelope&gt;</span>
</span></span></code></pre></div><p>Read details about SOAP on <a href="https://www.w3schools.com/xml/xml_soap.asp" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">w3schools</a>.</p>
<h3 id="soap-extensions" >
  <a class="group relative" href="#soap-extensions">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>SOAP extensions</a>
</h3>
<p>Occasionally you&rsquo;ll bump into SOAP extensions with names like <code>WS-</code>. One of the most common is <a href="https://en.wikipedia.org/wiki/WS-Security" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">WS-Security</a> which is used for encryption and digital signatures. Often it&rsquo;s combined with WS-Policy for managing service access rights.</p>
<p>Example of WS-Security usage:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#ff79c6">&lt;wsse:UsernameToken</span> <span style="color:#50fa7b">wsu:Id=</span><span style="color:#f1fa8c">&#34;uuid_faf0159a-6b13-4139-a6da-cb7b4100c10c&#34;</span><span style="color:#ff79c6">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;wsse:Username&gt;</span>Alice<span style="color:#ff79c6">&lt;/wsse:Username&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;wsse:Password</span> <span style="color:#50fa7b">Type=</span><span style="color:#f1fa8c">&#34;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest&#34;</span><span style="color:#ff79c6">&gt;</span>6S3P2EWNP3lQf+9VC3emNoT57oQ=<span style="color:#ff79c6">&lt;/wsse:Password&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;wsse:Nonce</span> <span style="color:#50fa7b">EncodingType=</span><span style="color:#f1fa8c">&#34;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary&#34;</span><span style="color:#ff79c6">&gt;</span>YF6j8V/CAqi+1nRsGLRbuZhi<span style="color:#ff79c6">&lt;/wsse:Nonce&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">&lt;wsu:Created&gt;</span>2008-04-28T10:02:11Z<span style="color:#ff79c6">&lt;/wsu:Created&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">&lt;/wsse:UsernameToken&gt;</span>
</span></span></code></pre></div><p>Extension can be complex and intimidating. You can skip learning about them in details if your service does not have them.</p>
<h2 id="tools" >
  <a class="group relative" href="#tools">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Tools</a>
</h2>
<p>SOAP is a serious business: all this theory and standards. And XMLs tend to be <em>huge</em>. You <em>can,</em> but you <em>don&rsquo;t want</em> to use tools like notepad and cURL for daily work. But don&rsquo;t worry, there are tools to make life easier with SOAP.</p>
<h3 id="xmlxsd-editors" >
  <a class="group relative" href="#xmlxsd-editors">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>XML&amp;XSD editors</a>
</h3>
<p>As I said before, you need to start testing with documentation. For that you can use special editors. Two most common are <a href="https://www.oxygenxml.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Oxygen</a> (cross-platform) and <a href="https://www.altova.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Altova</a> (Windows-only); both are not free. These are feature-heavy applications used by analysts.</p>
<p>I routinely use three features: XSD visualization, XML generation, and XML validation.</p>
<p><strong>XSD visualization</strong> is helpful to easily spot schema elements, attributes, and restrictions. For example, <code>CheckTextRequest</code> has a required <code>text</code> element, whereas all three attributes are optional. In addition, attribute <code>option</code> has a default value <code>0</code>.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/09/15/soap-testing-101/oxygen_hu_5955796806578d58.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/09/15/soap-testing-101/oxygen.png" alt="XSD visualization in Oxygen" defer>
	</picture>
	
</figure></p>
<p>Visualization is handy when there are lots of types and restrictions. If you need only this feature and you don&rsquo;t want to buy apps, you can check
<a href="http://stackoverflow.com/questions/2486758/how-to-visualize-an-xml-schema" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">free alternatives</a> like JDeveloper.</p>
<p>You can use <strong>XML generation</strong> to quickly create examples of messages based on supplied XSD. I use is for exploration and experimentation on possible XMLs and checking how restrictions are applied.</p>
<p>After generating messages, you can perform <strong>XML validation</strong> on them. Together these two features allow you to find issues with a service even when it&rsquo;s not yet implemented.</p>
<h3 id="testing-with-soapui" >
  <a class="group relative" href="#testing-with-soapui">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Testing with SoapUI</a>
</h3>
<p>Testing SOAP services almost always means using <a href="https://www.soapui.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">SoapUI</a>. You can read about it in <a href="https://www.guru99.com/webservice-testing-beginner-guide.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">this tutorial</a> or <a href="https://www.soapui.org/getting-started.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the official documentation</a>.</p>
<p>I&rsquo;ve come up with eight possible levels of SoapUI mastery.</p>
<h4 id="level-1-sending-requests" >
  <a class="group relative" href="#level-1-sending-requests">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Level 1: sending requests</a>
</h4>
<p>Learn how to create a project based on WSDL. SoapUI can generate all requests for you; all you need to do is to check their correctness and click a &ldquo;Send&rdquo; button. After getting used to send valid requests you&rsquo;ll need to start creating invalid ones to get expected error messages.</p>
<h4 id="level-2-using-test-suites-and-test-cases" >
  <a class="group relative" href="#level-2-using-test-suites-and-test-cases">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Level 2: using &ldquo;Test suites&rdquo; and &ldquo;Test cases&rdquo;</a>
</h4>
<p>Start writing mini-autotests. Tests suites and test cases allow creating automation scenarios, prepare test data, and automatically assert responses. At first you can use them simply for organization. For example, if you filed an issue, you&rsquo;d want to quickly check its fix and for that you can have a separate test suite with requests specific to each issue.</p>
<h4 id="level-3-writing-assertions" >
  <a class="group relative" href="#level-3-writing-assertions">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Level 3: writing assertions</a>
</h4>
<p>After using cases for some time, you&rsquo;ll want to make them automatically asserted to mark valid responses as green and invalid ones as red. SoapUI has lots of assertion types, but the simplest ones are <code>Contains</code> and <code>Not Contains</code> which you can use to check existence of some string in the response. These assertions also support regular expressions.</p>
<h4 id="level-4-using-xpath-andor-xquery-in-assertions" >
  <a class="group relative" href="#level-4-using-xpath-andor-xquery-in-assertions">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Level 4: using XPath and/or XQuery in assertions</a>
</h4>
<p><a href="https://www.w3schools.com/xml/xpath_intro.asp" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">XPath</a> is a familiar thing for those who work on UI automation with Selenium.  In short, XPath is used to search for elements inside XML-document. <a href="https://www.w3schools.com/xml/xquery_intro.asp" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">XQuery</a> is a similar technology which can use XPath &ldquo;inside&rdquo;; this language is way more powerful and SQL-like. Both can be used in assertions and will make checks more robust and precise.</p>
<h4 id="level-5-writing-complex-checks-with-special-steps" >
  <a class="group relative" href="#level-5-writing-complex-checks-with-special-steps">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Level 5: writing complex checks with special steps</a>
</h4>
<p>Test cases can contain several requests and other special steps, which can form a user flow (for example, a scenario &ldquo;create entity → export entity&rdquo;). Some of those steps are:</p>
<ul>
<li><code>Properties</code> and <code>Property Transfer</code> (help to reuse data and transfer it  between requests)</li>
<li><code>JDBC Request</code> (used for getting data from databases)</li>
<li><code>Conditional Goto</code> (allows to create conditions and loops)</li>
<li><code>Run TestCase</code> (help to reuse common test cases)</li>
</ul>
<h4 id="level-6-using-groovy-scripts" >
  <a class="group relative" href="#level-6-using-groovy-scripts">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Level 6: using Groovy scripts</a>
</h4>
<p>SoapUI supports writing scripts in Groovy language. The simplest idea is to generate data embedding Groovy via <code>${=}</code> inside a request body. For example:</p>
<ul>
<li>Insert current date and time: <code>${=new Date().format(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;)}</code></li>
<li>Insert a random GUID: <code>${=java.util.UUID.randomUUID()}</code></li>
</ul>
<p>More complex scripts can be used in separate steps and assertions.  At some point you&rsquo;ll notice you tend to write everything inside script step instead of steps from level 5.</p>
<h4 id="level-7-using-mockservices" >
  <a class="group relative" href="#level-7-using-mockservices">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Level 7: using MockServices</a>
</h4>
<p>SoapUI can generate mock objects based on WSDL. It&rsquo;s a crude service simulation which you can use to write and debug test cases before they are actually available for testing. Also, you can use them in place of temporarily down services.</p>
<h4 id="level-8-god-mode" >
  <a class="group relative" href="#level-8-god-mode">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Level 8: god-mode</a>
</h4>
<p>You recognize differences between free and pro versions of SoapUI. You use SoapUI as a library from code. You use plugins and run test cases via CLI and/or CI. Your tests cases are elegant and easy to support. You know all the angles! I envy you.</p>
<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>Or not. Presently I don&rsquo;t use any GUI tools for API testing except for exploratory sessions.</p></div>
<h3 id="testing-with-code" >
  <a class="group relative" href="#testing-with-code">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Testing with code</a>
</h3>
<p>At some point you&rsquo;ll have a feeling that it&rsquo;s more efficient to use programming languages for writing tests. That&rsquo;s fine. SoapUI is a GUI application and has its drawbacks; some of them are resolved with pro version, while others require huge and brittle scripting hacks.</p>
<p>There are tons of libraries for working with SOAP in any language. For example, there are <a href="http://axis.apache.org/axis2/java/core/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Axis2</a> for Java (good examples are in the articles at <a href="https://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">IBM developerWorks</a>), <a href="https://bitbucket.org/jurko/suds/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">suds</a> or <a href="http://docs.python-zeep.org/en/latest/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">zeep</a> for Python, or <a href="https://github.com/jwagenleitner/groovy-wslite" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">groovy-wslite</a> for Groovy.</p>
<p>Here is an example of request made to YandexSpeller API using groovy-wslite:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-groovy" data-lang="groovy"><span style="display:flex;"><span><span style="color:#ff79c6">import</span> wslite.soap.*
</span></span><span style="display:flex;"><span><span style="color:#8be9fd">def</span> client <span style="color:#ff79c6">=</span> <span style="color:#ff79c6">new</span> SOAPClient<span style="color:#ff79c6">(</span><span style="color:#f1fa8c">&#39;http://speller.yandex.net/services/spellservice?WSDL&#39;</span><span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span><span style="color:#8be9fd">def</span> response <span style="color:#ff79c6">=</span> client<span style="color:#ff79c6">.</span><span style="color:#50fa7b">send</span><span style="color:#ff79c6">(</span><span style="color:#8be9fd;font-style:italic">SOAPAction:</span> <span style="color:#f1fa8c">&#39;http://speller.yandex.net/services/spellservice/checkText&#39;</span><span style="color:#ff79c6">)</span> <span style="color:#ff79c6">{</span>
</span></span><span style="display:flex;"><span>  body <span style="color:#ff79c6">{</span>
</span></span><span style="display:flex;"><span>    CheckTextRequest<span style="color:#ff79c6">(</span><span style="color:#f1fa8c">&#39;lang&#39;</span><span style="color:#ff79c6">:</span> <span style="color:#f1fa8c">&#39;en&#39;</span><span style="color:#ff79c6">,</span> <span style="color:#f1fa8c">&#39;xmlns&#39;</span><span style="color:#ff79c6">:</span><span style="color:#f1fa8c">&#39;http://speller.yandex.net/services/spellservice&#39;</span><span style="color:#ff79c6">)</span> <span style="color:#ff79c6">{</span>
</span></span><span style="display:flex;"><span>      text<span style="color:#ff79c6">(</span><span style="color:#f1fa8c">&#39;mistace&#39;</span><span style="color:#ff79c6">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ff79c6">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">}</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">assert</span> <span style="color:#f1fa8c">&#39;mistake&#39;</span> <span style="color:#ff79c6">==</span> response<span style="color:#ff79c6">.</span><span style="color:#50fa7b">CheckTextResponse</span><span style="color:#ff79c6">.</span><span style="color:#50fa7b">SpellResult</span><span style="color:#ff79c6">.</span><span style="color:#50fa7b">error</span><span style="color:#ff79c6">.</span><span style="color:#50fa7b">s</span><span style="color:#ff79c6">.</span><span style="color:#50fa7b">text</span><span style="color:#ff79c6">()</span>
</span></span><span style="display:flex;"><span><span style="color:#ff79c6">assert</span> <span style="color:#f1fa8c">&#39;1&#39;</span> <span style="color:#ff79c6">==</span> response<span style="color:#ff79c6">.</span><span style="color:#50fa7b">CheckTextResponse</span><span style="color:#ff79c6">.</span><span style="color:#50fa7b">SpellResult</span><span style="color:#ff79c6">.</span><span style="color:#50fa7b">error</span><span style="color:#ff79c6">.</span>@code.text<span style="color:#ff79c6">()</span>
</span></span></code></pre></div><p>As far as I know there are no high-level test frameworks for SOAP (similar to Rest-assured), but there is an interesting framework called <a href="https://github.com/intuit/karate" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">karate</a> where you can describe test cases for SOAP and REST in Cucumber / Gherkin style.</p>
<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>I don&rsquo;t do any Groovy programming anymore, so no idea how groovy-wslite fares. In fact, I don&rsquo;t do SOAP testing now, so my knowledge about libraries can be outdated.</p>
<p>Plus, I avoid anything cucumber-ish =)</p></div>
<hr>
<p>I doubt anyone will go and test SOAP services in their free time just of curiosity. It&rsquo;s a heavy protocol used in serious corporate systems. But its heaviness is a good news for testing: all technologies are standardized and there is a vast ecosystem around it.</p>
<p>So, here is a promised checklist. If you are only starting to test SOAP services, you need to learn and be able to use:</p>
<ul>
<li>XML</li>
<li>XSD</li>
<li>WSDL</li>
<li>SOAP</li>
<li>XML&amp;XSD editors for XSD visualization</li>
<li>SoapUI level 1</li>
</ul>
<p>Basically, just standards and being able to send requests, nothing more. That&rsquo;s it. Of course, you&rsquo;ll unavoidably learn more with time, but don&rsquo;t deep dive right away or your head will explode =)</p>
]]></content>
  </entry>
  <entry>
    <title>Using Google Apps scripts for productivity improvements</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/09/08/using-google-apps-scripts-for-productivity-improvements/" hreflang="en"/>
    <published>2019-09-08T00:00:00Z</published>
    <updated>2019-09-08T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-08:/articles/2019/09/08/using-google-apps-scripts-for-productivity-improvements/</id>
    
    <summary type="html"><![CDATA[<p>Google Apps Scripts are probably the most useful automation tools I&rsquo;ve used. They can be used as &ldquo;excel macros&rdquo; for Sheets, form processing, and much more. Here I want to share three small scripts I made to improve productivity and task management.</p>
<h2 id="mark-all-emails-as-read" >
  <a class="group relative" href="#mark-all-emails-as-read">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Mark all emails as read</a>
</h2>
<p>If you ever got bothered by all archived and still unread emails in Gmail, this script can help you. It is based on <a href="https://critter.blog/2013/03/09/marking-gmail-read-with-apps-script/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the script by Mike Crittenden</a>.</p>]]></summary>
    <content type="html"><![CDATA[<p>Google Apps Scripts are probably the most useful automation tools I&rsquo;ve used. They can be used as &ldquo;excel macros&rdquo; for Sheets, form processing, and much more. Here I want to share three small scripts I made to improve productivity and task management.</p>
<h2 id="mark-all-emails-as-read" >
  <a class="group relative" href="#mark-all-emails-as-read">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Mark all emails as read</a>
</h2>
<p>If you ever got bothered by all archived and still unread emails in Gmail, this script can help you. It is based on <a href="https://critter.blog/2013/03/09/marking-gmail-read-with-apps-script/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the script by Mike Crittenden</a>.</p>
<script src="https://gist.github.com/aviskase/634dba0b10f5cd0bad3f41709ed3e41c.js"></script>

<p>I don&rsquo;t really need it right now, because I have a filter which marks <em>all</em> incoming emails as read right away:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>Matches: larger:1
</span></span><span style="display:flex;"><span>Do this: Mark as read
</span></span></code></pre></div><p>But it was effective for cleaning up.</p>
<h2 id="tasks-recurring-randomly-for-amazing-marvin" >
  <a class="group relative" href="#tasks-recurring-randomly-for-amazing-marvin">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Tasks recurring randomly for Amazing Marvin</a>
</h2>
<p>I use Amazing Marvin for task&amp;project management and currently it doesn&rsquo;t support randomly recurring items. In fact, no app I&rsquo;ve tried supports that. It&rsquo;s a shame, because there could be several use cases for that: &ldquo;spontaneous&rdquo; cleaning&amp;organizing, fun activities, ideas review.</p>
<p>If you are able to import tasks (for example, via email), you can check this script. The most important thing is a <code>TASKS</code> list. Each item should have <code>range_start</code> and <code>range_end</code>. For example, <code>range_start = 2</code> and <code>range_end = 9</code> mean that task will be created in ranges from two to nine days after last created date. E.g. if the last time task with this <code>id</code> was created on September 10, next task will be created sometime between September 12 and September 19.</p>
<p>Script ensures the task will be created at some point during this range, just make sure it&rsquo;s triggered to run daily.</p>
<script src="https://gist.github.com/aviskase/c986a50fd0d2a24f98302201fcdc9fd7.js"></script>

<h2 id="create-a-task-when-new-package-release-is-available-on-pypi" >
  <a class="group relative" href="#create-a-task-when-new-package-release-is-available-on-pypi">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Create a task when new package release is available on PyPI</a>
</h2>
<p>I have a weird project which can start only after a particular release of one python package. It&rsquo;s not very urgent, so no hurry, but I don&rsquo;t want to check for releases manually.</p>
<p>This script checks RSS for the package on <a href="https://libraries.io/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">libraries.io</a> and if there is a new version available, it will send email to AM to create a task.</p>
<script src="https://gist.github.com/aviskase/079fda60adaa0c74e37c84089e4bb1ae.js"></script>

<hr>
<p>I didn&rsquo;t go into details about how to setup these scripts, so if you have any questions, feel free to comment.</p>
]]></content>
  </entry>
  <entry>
    <title>Stereotype Rant</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/09/04/stereotype-rant/" hreflang="en"/>
    <published>2019-09-04T00:00:00Z</published>
    <updated>2019-09-04T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-04:/articles/2019/09/04/stereotype-rant/</id>
    
    <summary type="html"><![CDATA[<p>We live in the world of memes and funny pictures. Nothing wrong with that. Some companies started posting humorous content too, and, again, that&rsquo;s totally fine: I myself prefer these to dry corporate pitches. But it&rsquo;s a real shame when you see a post like this from a test agency:</p>]]></summary>
    <content type="html"><![CDATA[<p>We live in the world of memes and funny pictures. Nothing wrong with that. Some companies started posting humorous content too, and, again, that&rsquo;s totally fine: I myself prefer these to dry corporate pitches. But it&rsquo;s a real shame when you see a post like this from a test agency:</p>
<blockquote>
<p>What makes you feel more powerful:</p>
<ul>
<li>Money</li>
<li>Status</li>
<li><em>Finding bugs in other people&rsquo;s code</em></li>
</ul>
</blockquote>
<p>It would be dishonest to say I would never find this joke amusing. I did. Probably first half a year of being a tester, less or more. And I still hear that &ldquo;achievement unlocked ding&rdquo; in my head when I find some peculiar or very critical issue.</p>
<p>But I most certainly don&rsquo;t feel <em>powerful.</em> Experience with software development comes with a grain of salt and a certain sadness. Each bug you discover means:</p>
<ul>
<li>there are even more unknown problems lurking somewhere</li>
<li>you have to bother about code correctness instead of thinking about the value</li>
<li>processes are leaky and if I&rsquo;m not in position to have any impact on them I&rsquo;d probably feel <em>powerless</em></li>
</ul>
<p>So, sorry, but no, that post won&rsquo;t receive a &ldquo;like&rdquo; from me. And I&rsquo;m quite angry and sad seeing such posts coming from test agency, company that shouldn&rsquo;t be promoting stereotypes about testers as those guys who are happy to &ldquo;break stuff&rdquo; and are always &ldquo;at war with devs.&rdquo; C&rsquo;mon! In the case of this particular company, I understand that it&rsquo;s most probably marketing shit which wasn&rsquo;t approved by actual testers working there. But often it happens that we, testers, either don&rsquo;t care or not vocal enough about pointing out these harmful mistakes to juniors and non-dev people.</p>
]]></content>
  </entry>
  <entry>
    <title>Your API is your public image</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/" hreflang="en"/>
    <published>2019-09-02T00:00:00Z</published>
    <updated>2019-09-02T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-02:/articles/2019/09/02/your-api-is-your-public-image/</id>
    
    <summary type="html"><![CDATA[<p><strong>Disclaimer:</strong> this is a translation of <a href="https://quality-lab.ru/blog/your-api-is-your-public-face/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the article</a> written 2 years ago for a corporate blog. I didn&rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &ldquo;official.&rdquo; Also, some examples don&rsquo;t make sense in English. Still, I didn&rsquo;t update it too radically. Bear in mind, at the moment of the writing I was testing SOAP services and Excel-based import/export at big government project, so most of the examples relate to that experience.</p>]]></summary>
    <content type="html"><![CDATA[<p><strong>Disclaimer:</strong> this is a translation of <a href="https://quality-lab.ru/blog/your-api-is-your-public-face/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the article</a> written 2 years ago for a corporate blog. I didn&rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &ldquo;official.&rdquo; Also, some examples don&rsquo;t make sense in English. Still, I didn&rsquo;t update it too radically. Bear in mind, at the moment of the writing I was testing SOAP services and Excel-based import/export at big government project, so most of the examples relate to that experience.</p>
<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>Sometimes you&rsquo;ll see a block like that. It will contain my current thoughts on the subject or comments.</p></div>
<hr>
<p>First, what is API?</p>
<p><strong>API (Application Programming Interface)</strong> is an interface which helps apps to communicate with each other. Just as a human interacts with apps via buttons and dialogs (user interface, UI), so apps interact via APIs.</p>
<h2 id="types-of-api" >
  <a class="group relative" href="#types-of-api">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Types of API</a>
</h2>
<p>One way to define API types is whether it&rsquo;s public or private API. <strong>Private</strong> API is used for interactions inside your system, for example:</p>
<ul>
<li>sync between mobile or desktop app and a server</li>
<li>app uses server&rsquo;s computational resources (e.g., an image stylization app sends image and selected style to the server, where stylization will be done)</li>
<li>communications between a web app and server</li>
<li>communications between micro-services</li>
</ul>
<p>Primary risks for private APIs are functional and performance problems. Here, customers can only speculate why app works somehow wrong-y.</p>
<p>With <strong>public</strong> API communication endpoints go beyond your system boundaries. Either you use someone&rsquo;s API (social networks, maps, etc.) or you provide your API to external developers.</p>
<p>Let&rsquo;s talk about public APIs a bit more. For some companies providing APIs is the core business (e.g., payment processing: Stripe, Rebilly), for others it&rsquo;s just a nice to have addition to the main services. Whatever the case, public APIs open a perspective into how your internal development process works. And you won&rsquo;t be able to hide behind fancy UI and eloquent support team.</p>
<p>If you publish public API with bad documentation, versioning mess, and tons of functional issues, make no mistake, external developer can (and maybe should!) assume that all your system is developed is such manner. Will they build their services around <em>such</em> system and attract new users? Nope. Will they persuade their bosses and friends against using and/or buying your product? Probably. Don&rsquo;t forget that people who are not so tech-y value developers&rsquo; opinions a lot. And of course, those developers could also give your a bad reputation by complaining on social networks or forums. Therefore, before publishing even the tiniest API, you should think about its quality.</p>
<h2 id="four-ways-to-fuck-up-a-public-api" >
  <a class="group relative" href="#four-ways-to-fuck-up-a-public-api">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Four ways to fuck up a public API</a>
</h2>
<p>There are different techniques for assessing API quality (for example, <a href="http://apiux.com/2013/05/29/api-hierarchy-needs/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">hierarchy of needs</a>). Let&rsquo;s talk about four main ways to be an awful API:</p>
<h3 id="broken-functionality" >
  <a class="group relative" href="#broken-functionality">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Broken functionality</a>
</h3>
<p>Sounds banal, but a service should work. And it should provide functionality it was created for. On one of my projects, there was an embarrassing situation with an export. We tested API with different objects under various conditions, but only with the small number of objects. All was fine until we found a bug on export with lots of data. The thing is that the key purpose for this service was to provide an ability to do massive exports, therefore, the service didn&rsquo;t fulfill its main reason for existence.</p>
<p>You need to check available operations in context of other operations. For example, we released an import operation for objects A. It required an id of object B in the request body, but import and export of B was unreleased at the moment. As the result, it was impossible to do import A at all.</p>
<p>Other possible problem: do you consider a region where API will be used? Obviously, support for Cyrillic is not that important for purely US oriented product. But if you work globally, do not forget to check non-ASCII characters! Even though Unicode seems to be default, I did find bugs like that one: a user uploaded a file with the name <code>Документ_1.pdf</code>, yet it was saved as <code>_1.pdf</code>.</p>
<p>One more example. We had a service for chunked file download which &ldquo;ate&rdquo; last byte of the last chunk. It was highly critical problem because this service was a part of the system where these files were used as supporting documents for legal agreements.</p>
<h3 id="unreliability" >
  <a class="group relative" href="#unreliability">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Unreliability</a>
</h3>
<p>Service is reliable if it works when it&rsquo;s expected to be working and provides timely feedback in case of any problems.</p>
<p>Worst performance problems I encountered were with export services. One of them was working perfectly fine until the biggest organization in the system started using it and crashing application servers. Hot-fixes after hot-fixes, optimizations, new version; nothing helped. And we couldn&rsquo;t disable that service or completely rewrite its public API because of contractual obligations.</p>
<p>So, what if your service experiences problems? How external users will learn about it? Will there be any alert about temporary issues or downtimes? Any resolution time frames? Usually, there is a special web page with answers to these question, with a table like this:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/api_status_hu_c6ce3654a14f5b54.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/api_status.png" alt="API status table" defer>
	</picture>
	
</figure></p>
<p>And beware, this page should not on the same infrastructure as the services it&rsquo;s showing! It would be quite embarrassing if <a href="https://twitter.com/awscloud/status/836656664635846656" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">it goes down at the same time your services go down</a>.</p>
<h3 id="crappy-usability" >
  <a class="group relative" href="#crappy-usability">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Crappy usability</a>
</h3>
<p>When we hear the word &ldquo;usability&rdquo;, we usually think about GUI: buttons and dialogs. I think GUI usability is somewhat overrated: even in the ugliest app you can guess your way by trial and error. With API it won&rsquo;t work:</p>
<ul>
<li>No public documentation? Users will never even know that API exists.</li>
<li>Public documentation is there, but there is no info about actual endpoints? Users won&rsquo;t be able to call API.</li>
<li>Public documentation is there, but written in such manner that without knowing internal docs you can&rsquo;t understand a thing? Again, users won&rsquo;t be happy at all.</li>
<li>Spelling mistakes? Not that critical if in text, but can be quite awful in schemes. Real support ticket:</li>
</ul>
<blockquote>
<p>Your developers drink too much and it impairs their accuracy. There is an epic fail in a scheme with the name of the element <code>Pressure</code>: the first letter is a Cyrillic character and it breaks all client code generation.</p>
</blockquote>
<div class="callout note">
  <div class="callout-icon"><svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></div><p>Cyrillic <code>Р/р</code>  (pronounced like &ldquo;r&rdquo;) looks exactly like Latin <code>P/p</code>.</p></div>
<ul>
<li>Service works fine, but error messages are not that informative? Users won&rsquo;t understand how to fix an error (and probably will open a support ticket, so you&rsquo;ll needlessly spend time resolving non-existing issue).</li>
</ul>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/bad_error_message_hu_f199ea986f899f94.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/bad_error_message.png" alt="Unhelpful error message" defer>
	</picture>
	
</figure></p>
<ul>
<li>
<p>You have UI and API? Don&rsquo;t forget to check they correspond to each other. The most common problem is when constraints on UI fields don&rsquo;t match same fields in API: for example, UI can accept maximum 50 characters for the name and API only 20, which leads to errors when trying to export anything created on UI.</p>
</li>
<li>
<p>Don&rsquo;t forget about versionning (in API and its documentation). The older your services are, more careful you should be with incompatible changes. Documentation should always be up-to-date: sounds obvious, but we had a big fuck up when someone accidentally published documentation for upcoming API version and external developers started trying to use these new features, didn&rsquo;t find them, and bombed support team with &ldquo;nothing works again&rdquo; tickets.</p>
</li>
</ul>
<h3 id="security-holes" >
  <a class="group relative" href="#security-holes">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Security holes</a>
</h3>
<p>When you publish API you also increase a potential attack surface for hackers. First of all, think about authorization and authentication processes. Typically, there are special access tokens for API users. Maybe simple developers&rsquo; tokens will be enough for your case, maybe you&rsquo;ll need to use flows like OAuth. In some cases you should sign requests and responses.</p>
<p>Oftentimes there are several APIs: for example, test API (for internal developers and testers) and open public API. You should make sure that test API is secured enough. There are known cases when web crawlers accidentally found test endpoints and happily showed them in search results.</p>
<p>If you provide access to test API to external developers, you&rsquo;d better treat this API as high security risk. One time I found a stackoverflow question with code snippet containing authorization keys and proper endpoints for our system.</p>
<p>One open source project I used had a different issue. Test API was used by developers to help with testing: add money to the account, change account status to premium, etc. It was hidden and secure&hellip; Until someone released a version with these APIs enabled in production. That&rsquo;s bad :)</p>
<h2 id="conclusion" >
  <a class="group relative" href="#conclusion">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Conclusion</a>
</h2>
<p>After reading all of these, you&rsquo;d think that public APIs are too risky, challenging, and expensive. Perhaps, it&rsquo;s better not to provide it? Maybe. But global connectivity is a trend. Stable and useful API can facilitate your profits: it can increase your user base via external apps or advertise your workplace to professionals. It&rsquo;s a demanding work, but it pays off.</p>
<p>And even if you don&rsquo;t and won&rsquo;t have public API, think about your private ones. We should care about your own developers, shouldn&rsquo;t we?</p>
]]></content>
  </entry>
  <entry>
    <title>Revision: testers in this world</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/08/26/revision-testers-in-this-world/" hreflang="en"/>
    <published>2019-08-26T00:00:00Z</published>
    <updated>2019-09-17T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-08-26:/articles/2019/08/26/revision-testers-in-this-world/</id>
    
    <summary type="html"><![CDATA[<p>Recently I&rsquo;ve remembered <a href="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">my old article</a> and wondered, how much my thoughts  have changed and how they align to the principles of context-driven and modern testing (and yes, I don&rsquo;t see them as contradicting each other).</p>
<div class="callout warning">
  <div class="callout-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg></div><p>Remark in the parentheses is a bit stupid. It was discussed in the <a href="https://www.angryweasel.com/ABTesting/ab-testing-episode-94-modern-testing-meets-context-driven-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">AB Testing episode 94</a> and at least for Alan and Brent there is no real contradiction.</p>]]></summary>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve remembered <a href="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/" class="before:content-[&#39;[[&#39;] after:content-[&#39;]]&#39;] before:text-[1.05em] after:text-[1.05em] before:text-blue-500 after:text-blue-500 hover:text-blue-500 focus:text-blue-500 transition-colors duration-300 
">my old article</a> and wondered, how much my thoughts  have changed and how they align to the principles of context-driven and modern testing (and yes, I don&rsquo;t see them as contradicting each other).</p>
<div class="callout warning">
  <div class="callout-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg></div><p>Remark in the parentheses is a bit stupid. It was discussed in the <a href="https://www.angryweasel.com/ABTesting/ab-testing-episode-94-modern-testing-meets-context-driven-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">AB Testing episode 94</a> and at least for Alan and Brent there is no real contradiction.</p></div>
<p>It looks like there are two main themes in that article.</p>
<h2 id="theme-one-finding-a-job-as-a-tester" >
  <a class="group relative" href="#theme-one-finding-a-job-as-a-tester">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Theme one: finding a job as a tester</a>
</h2>
<p>A bit of a background: when I was writing that piece, I was in depression. That&rsquo;s a different story about development culture and its effect on one&rsquo;s mind, but I&rsquo;ll write about it sometime later. So, depression. And a bit of worrying about getting the first job locally in Canada.</p>
<p>No wonder that rereading the article now feel like the main takeaway was &ldquo;software development is a shitty business, whatever progress will be made, there will be still more than enough companies to hire testers.&rdquo; And I won&rsquo;t argue <em>the last part.</em> Modern testing principles are things to strive for, but my experience so far tells me that it&rsquo;s too optimistic to assume that <em>all</em> companies will end up there. So, there will be enough companies who will lag behind. Ergo, there will be enough positions for <em>any</em> testers. Even for mindless test case executors.</p>
<p>Now, the question is, do I <em>want</em> to work in such companies? <strong>No.</strong></p>
<p>If I would want to continue as a tester-generalist, without specializing in some future-proof niches like pentest or perftest (at least, they seem to be future-proof), a sweet spot would be companies closer on a way to the &ldquo;tester-less&rdquo; transformation, but still needing some help on that way. Will there be enough such companies? Probably, yes. Getting position will be definitely harder but not impossible.</p>
<h2 id="theme-two-clay-metaphor" >
  <a class="group relative" href="#theme-two-clay-metaphor">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Theme two: clay metaphor</a>
</h2>
<p>Nowadays I agree even more with the metaphor I came up with in that article. Yes, we are a clay or a sealing foam. We, testers, should help others in improving quality. That means that our work is immensely context-dependent: different organizations need different &ldquo;holes&rdquo; to seal.</p>
<p>But we can go on even further with this metaphor: make it&rsquo;s not just a clay, but a sci-fi fancy-shmancy clay which heals holes and scabs when applied. Yup, that means that after some time we won&rsquo;t be needed in this organization; that&rsquo;s fine. You can move to some other position where your experience being adaptable and generalizing could be of assistance. Or you can find other organization and kill testing position there too.</p>
<hr>
<p>As a result, while some wording was off, core principles still sound ok to me: adapt, help&amp;heal, move on.</p>
]]></content>
  </entry>
  <entry>
    <title>Lasha Tumbai or rm -rf RU</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/08/08/lasha-tumbai-or-rm-rf-ru/" hreflang="en"/>
    <published>2019-08-08T23:51:52Z</published>
    <updated>2019-08-08T23:51:52Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-08-08:/articles/2019/08/08/lasha-tumbai-or-rm-rf-ru/</id>
    
    <summary type="html"><![CDATA[<p>Just a quick note: I&rsquo;ve switched to Pelican site generator, because ruby-shuby decided not to work. Unfortunately, switching and preserving multi-language support is cumbersome. So, I&rsquo;ve decided to ditch RU version. For what it&rsquo;s worth, I moved to Canada and no longer really interested in trying to &ldquo;promote&rdquo; myself in Russian speaking communities.</p>]]></summary>
    <content type="html"><![CDATA[<p>Just a quick note: I&rsquo;ve switched to Pelican site generator, because ruby-shuby decided not to work. Unfortunately, switching and preserving multi-language support is cumbersome. So, I&rsquo;ve decided to ditch RU version. For what it&rsquo;s worth, I moved to Canada and no longer really interested in trying to &ldquo;promote&rdquo; myself in Russian speaking communities.</p>
<p>Yeah, yeah, &ldquo;promote&rdquo;, &mdash; written by a person who hasn&rsquo;t write <em>anything</em> for ages. Right.</p>
<p>Whoever read this blog in Russian, sorry. And, actually, I know that there were more traffic from CIS than from any other region &gt;&lt; But, two languages makes it too complicated and procrastinating to write in consistent manner <em>(hysterical laugh).</em></p>
<p>Зыс ис зе энд.</p>
]]></content>
  </entry>
  <entry>
    <title>Amazing Marvin for task management</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2019/07/30/amazing-marvin-for-task-management/" hreflang="en"/>
    <published>2019-07-30T00:00:00Z</published>
    <updated>2019-07-30T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-07-30:/articles/2019/07/30/amazing-marvin-for-task-management/</id>
    
    <summary type="html"><![CDATA[<p>I&rsquo;m an infrequent blogger, so how weird it is that my last post was about RTM? I was a loyal RTM user for quite a time&hellip; Well, I have a new love now. His name is <a href="https://www.amazingmarvin.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Marvin</a>.</p>
<p>Marvin is still young, yet powerful. He has some problems and rough corners, but development couple (yes, just 2 persons!) is the most responsive and creative force I&rsquo;ve seen. I&rsquo;m still learning and tweaking my system there, but I want to describe the first working iteration to be able to improve and compare later.</p>]]></summary>
    <content type="html"><![CDATA[<p>I&rsquo;m an infrequent blogger, so how weird it is that my last post was about RTM? I was a loyal RTM user for quite a time&hellip; Well, I have a new love now. His name is <a href="https://www.amazingmarvin.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Marvin</a>.</p>
<p>Marvin is still young, yet powerful. He has some problems and rough corners, but development couple (yes, just 2 persons!) is the most responsive and creative force I&rsquo;ve seen. I&rsquo;m still learning and tweaking my system there, but I want to describe the first working iteration to be able to improve and compare later.</p>
<h2 id="enabled-strategies" >
  <a class="group relative" href="#enabled-strategies">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Enabled strategies</a>
</h2>
<p>Strategies are like extensions: add more to have more abilities.</p>
<h2 id="essential" >
  <a class="group relative" href="#essential">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Essential</a>
</h2>
<p>Because these are essential, I&rsquo;ll explain their usage later.</p>
<ul>
<li>
<p>Category Context (big square, also beneath title, show full path)</p>
</li>
<li>
<p>Task Notes</p>
</li>
<li>
<p>Labels</p>
</li>
<li>
<p>Timers</p>
</li>
<li>
<p>Backburner (no setup)</p>
</li>
<li>
<p>Planning Ahead</p>
</li>
<li>
<p>Smart Lists</p>
</li>
<li>
<p>Custom Sidebar</p>
</li>
<li>
<p>Top Mini List</p>
</li>
<li>
<p>Custom Sections</p>
</li>
<li>
<p>Dependencies</p>
</li>
<li>
<p>End Dates (show end dates below the task)</p>
</li>
<li>
<p>Start Dates</p>
</li>
<li>
<p>Work Session Scheduler</p>
</li>
<li>
<p>Saved Items (Templates)</p>
</li>
<li>
<p>Smart List Day Alerts</p>
</li>
<li>
<p>Auto-schedule Due Tasks (cutoff = 1 day)</p>
</li>
<li>
<p>Staleness Warning (period = 40 days)</p>
</li>
<li>
<p>Email to Marvin</p>
</li>
<li>
<p>Zapier Integration</p>
</li>
<li>
<p>Review Date</p>
</li>
<li>
<p>Weekly Review</p>
</li>
</ul>
<h3 id="extras" >
  <a class="group relative" href="#extras">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Extras</a>
</h3>
<ul>
<li>
<p>Eat that Frog (just 2 frog levels) &mdash; nice to have, but I don&rsquo;t use it as intended (I tend to assign a frog to the bad tasks, but I don&rsquo;t do them first)</p>
</li>
<li>
<p>Task Reminders (create automatically) &mdash; very important feature, but less powerful than in RTM for now (cannot create multiple reminders). Though, I have a feeling that with proper review system I actually don&rsquo;t need reminders that much now.</p>
</li>
<li>
<p>Duration Estimates &mdash; I&rsquo;m experimenting with having estimates for all tasks, but so far don&rsquo;t feel it increases productivity.</p>
</li>
<li>
<p>Time Tracking (show &gt; in title) &mdash; goes hand in hand with duration estimates, feels needed but not essential</p>
</li>
<li>
<p>Beat The Clock &mdash; same as time tracking, still experimenting with it</p>
</li>
<li>
<p>Project Focus Picker &mdash; just started to use it; at least it works as an &ldquo;eye  bugger&rdquo; to push me to work on project</p>
</li>
<li>
<p>Suggested Task &mdash; never used it really, but something about it feels good &gt;&lt;</p>
</li>
<li>
<p>The Wall &mdash; using it occasionally, would like to have block division by section</p>
</li>
<li>
<p>Day Progress Bar &mdash; I don&rsquo;t know why I enabled it</p>
</li>
<li>
<p>Procrastination Count (default) &mdash; important but not essential</p>
</li>
<li>
<p>Missing Next Steps Warning &mdash; important, but not very used much at the moment</p>
</li>
<li>
<p>Day Note (with archive) &mdash; nice to have, but I&rsquo;m not very good at keeping a habit to write (as can be guessed by this blog updates frequency)</p>
</li>
<li>
<p>Calendar, Calendar Sync, All-Day Items, Top Mini List &mdash; I&rsquo;ll have a whole calendar workflow moved to AM as soon as these will work with Google Calendar and Outlook. Until then, I have to go to calendars.</p>
</li>
<li>
<p>Dashboard &mdash; I like it, but not sure that I need it</p>
</li>
<li>
<p>Reward Tasks &mdash; awesome feature which I&rsquo;ve never used. Dunno why.</p>
</li>
</ul>
<h2 id="planning-and-scheduling-cycle" >
  <a class="group relative" href="#planning-and-scheduling-cycle">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Planning and scheduling cycle</a>
</h2>
<p>My PS cycle has three phases:</p>
<ul>
<li>
<p>Monthly planning</p>
</li>
<li>
<p>Weekly planning</p>
</li>
<li>
<p>Daily scheduling</p>
</li>
</ul>
<p>Notice difference between planning and scheduling? This is because AM has a bit head-scratching at first, but really powerful distinction between these processes. In short, <em>planning</em> is about assigning <em>start date</em> and <em>end date</em> (&ldquo;soft deadline&rdquo;) and <em>scheduling</em> is about assigning a <em>do date</em> (&ldquo;when should I do this task&rdquo;). Also, there can be a <em>due date</em>, it&rsquo;s not quite clear is it planning or scheduling category. I think both, because I use <strong>Auto-schedule Due Tasks</strong> strategy. For example, if something is due tomorrow, this task will have a do date = today.</p>
<h3 id="monthly-planning" >
  <a class="group relative" href="#monthly-planning">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Monthly planning</a>
</h3>
<p>I have a recurring task <em>Plan tasks for the next month</em>, which is setup to run monthly on the 31st day. To complete this task I go to <strong>Planning &gt; Monthly</strong> and plan tasks <strong>only</strong> for the next month while working from <em>Master List</em>. I don&rsquo;t want to overplan too much into the future.  What can be changed is maybe I should work from some smart list, but so far I don&rsquo;t have too many tasks in ML.</p>
<h3 id="weekly-planning" >
  <a class="group relative" href="#weekly-planning">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Weekly planning</a>
</h3>
<p>This is a <strong>Weekly Review</strong> strategy with checklist scheduled to be done on Sundays. Checklist is a combination of weekly planning and everyday review stuff.</p>
<h4 id="reformulate-task-names-left-in-today-pool" >
  <a class="group relative" href="#reformulate-task-names-left-in-today-pool">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Reformulate task names left in today pool</a>
</h4>
<p>Done on: Daily view</p>
<p>This is a part from Jedi techniques, which goal is to rename tasks you didn&rsquo;t complete for some reason. That way the next day they will look &ldquo;fresher&rdquo; or more inviting to you.</p>
<h4 id="review-calendars-for-2-weeks-ahead-add-tasks-if-needed" >
  <a class="group relative" href="#review-calendars-for-2-weeks-ahead-add-tasks-if-needed">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Review calendars for 2 weeks ahead: add tasks if needed</a>
</h4>
<p>Done on: external sites, tasks are added to inbox</p>
<ul>
<li>
<p>birthdays</p>
</li>
<li>
<p>special all day events like holidays</p>
</li>
<li>
<p>work meetings</p>
</li>
</ul>
<p>Basically, it&rsquo;s something that is not really actionable, but has a day and duration. This is what I want to do in AM in the future, when calendar sync works better:</p>
<ul>
<li>
<p><strong>Smart list</strong> with all calendar events in the next 2 weeks (to use for weekly planning)</p>
</li>
<li>
<p><strong>Top Mini List</strong> strategy showing upcoming birthdays in the next 3 days</p>
</li>
<li>
<p>Depending on how AM will show calendar events (probably as tasks which have to be completed, which is a bit unnecessary for me), maybe all of them should be shown in <strong>Top Mini List</strong></p>
</li>
</ul>
<p>Right now what I use is a <strong>Custom Sidebar</strong> with links to my google and outlook calendars.</p>
<h4 id="reflect-on-completed-week-do-i-need-to-do-more" >
  <a class="group relative" href="#reflect-on-completed-week-do-i-need-to-do-more">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Reflect on completed week: do I need to do more?</a>
</h4>
<p>Done on: Archive, tasks are added to inbox</p>
<p>Go to <strong>Archive</strong> and check what was done this week. It&rsquo;s a bit cumbersome, because it shows tasks per month and not per week. In RTM I&rsquo;ve used a smart list for that, but AM does not support searching completed tasks (yet).</p>
<p>Other way is to click through daily views, but for me it&rsquo;s too many clicks)</p>
<h4 id="review-start-dates-for-backburner-tasks-smartlist" >
  <a class="group relative" href="#review-start-dates-for-backburner-tasks-smartlist">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Review start dates for backburner tasks (smartlist)</a>
</h4>
<p>Done one: Master List,  work from smartlist</p>
<p><strong>Smartlist</strong>: <code>any start date, on backburner</code></p>
<p>I use backburner only for tasks which are <strong>dependent</strong> on others or with <strong>start date</strong> in the future. I try to be very strict with start dates and set them only if it really makes sense, for example: getting a vaccine boost shot in Dec 2028 has a start date in Sept 2028, because I don&rsquo;t want this task to pollute my planning all these years. Another use for start dates is for sub-project, like 3-day long learning session, which is part of a project without start date (because I want to do some preparatory tasks before session starts).</p>
<p>So, in order to keep backburner in check, I review it once in week. Now that I think about it, maybe I should have an alert about tasks which does not have start date and are not dependent, but are in backburner&hellip;? But more on alerts later =)</p>
<h4 id="review-all-projects-add-new-tasks-if-needed-smartlist" >
  <a class="group relative" href="#review-all-projects-add-new-tasks-if-needed-smartlist">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Review all projects: add new tasks if needed (smartlist)</a>
</h4>
<p>Done on: Master List, work from smartlist</p>
<p><strong>Smartlist</strong>: Projects</p>
<p>I had to create a smart list to show all projects, because I wanted to see backburner&rsquo;s too.</p>
<h4 id="recall-this-day-write-down-everything-missed-triggers-backwards-day-recall" >
  <a class="group relative" href="#recall-this-day-write-down-everything-missed-triggers-backwards-day-recall">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Recall this day: write down everything missed (triggers/ backwards-day-recall)</a>
</h4>
<p>Done on: <strong>Sidebar</strong>, tasks added to inbox</p>
<p>Two links in Sidebar:</p>
<ul>
<li>
<p>link to mind map containing triggers</p>
</li>
<li>
<p>link to timer set for 20m</p>
</li>
</ul>
<p>Triggers are things which can be used to recall what was forgotten. For example, one of the subtrees in my mindmap contains all types of utilities or all kinds of cleaning which could be done.</p>
<p>Backwards day recall is a technique also used to recall things. You sit down and try to remember today in detail in backwards: from now to the morning.</p>
<h4 id="empty-inboxes-paper-gmail-outlook-joplin-am" >
  <a class="group relative" href="#empty-inboxes-paper-gmail-outlook-joplin-am">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Empty inboxes: paper, GMail, Outlook, Joplin, AM</a>
</h4>
<p>Categorize everything and clean up all inboxes I can have. First go with paper notes, then emails (gmail + outlook), then note taking application (for now it&rsquo;s Joplin), and finally AM category <em>Inbox</em></p>
<p>If you see something that should be planned for this month, set it right away.</p>
<h4 id="plan-tasks-for-the-next-week-selecting-from-this-month" >
  <a class="group relative" href="#plan-tasks-for-the-next-week-selecting-from-this-month">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Plan tasks for the next week (selecting from this month)</a>
</h4>
<p>Done on: <strong>Planning &gt; Weekly</strong>, working from <em>This month</em> list</p>
<p>Because everything was planned for <em>this month</em>, I can just bring relevant tasks to next week.</p>
<h4 id="schedule-tasks-for-monday-by-checking-next-week-list" >
  <a class="group relative" href="#schedule-tasks-for-monday-by-checking-next-week-list">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Schedule tasks for Monday by checking next week list</a>
</h4>
<p>Done on: Daily view for tomorrow, working from <em>This week</em> list</p>
<h3 id="daily-scheduling" >
  <a class="group relative" href="#daily-scheduling">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Daily scheduling</a>
</h3>
<p>Because there is no &ldquo;Daily review&rdquo; strategy yet, I have a recurring task for that. It repeats every Wed and Fri, just because I&rsquo;m still getting accustomed to always do it. When I&rsquo;m ready, it will be repeated every day except for Sunday, where weekly review is done.</p>
<p>Checklist is a subset of weekly review:</p>
<ul>
<li>
<p>reformulate</p>
</li>
<li>
<p>reflect on Completed Today</p>
</li>
<li>
<p>recall this day</p>
</li>
<li>
<p>empty inboxes</p>
</li>
<li>
<p>schedule tasks for the next day</p>
</li>
</ul>
<h2 id="extras-1" >
  <a class="group relative" href="#extras-1">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Extras</a>
</h2>
<h3 id="categories" >
  <a class="group relative" href="#categories">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Categories</a>
</h3>
<p>Main:</p>
<ul>
<li>
<p>Inbox</p>
</li>
<li>
<p>Work</p>
</li>
<li>
<p>Household &mdash; tasks related to house or family</p>
</li>
<li>
<p>Hobbies  &mdash; anything related to my hobbies, learning, and reading</p>
</li>
<li>
<p>Reputation &mdash; quite new for me, this is for tasks related to my <em>external image</em>. Participating in open source projects, buying birthday gifts, writing blog, answering some emails. Sometimes there is no clear distinction between hobbies and this category, so it&rsquo;s fluid.</p>
</li>
<li>
<p>Health</p>
</li>
<li>
<p>Productivity &mdash; tasks like everyday review or cleaning up overflown inboxes. I suppose calendar sync will go there too.</p>
</li>
</ul>
<h3 id="sections" >
  <a class="group relative" href="#sections">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Sections</a>
</h3>
<p>I use <strong>Custom Sections</strong> strategies:</p>
<ul>
<li>
<p>Morning</p>
</li>
<li>
<p>Work &mdash; linked to smartlist which finds all tasks/projects <code>in #Work</code></p>
</li>
<li>
<p>Outside &mdash; linked to smartlist which finds all tasks/projects which <code>has @outside</code> label</p>
</li>
<li>
<p>Evening</p>
</li>
<li>
<p>Bonus</p>
</li>
</ul>
<p>Morning and Evening tasks are essentials, while Bonus ones are nice to do. Outside tasks are for stuff where I need to go somewhere, like shopping errands. I&rsquo;m still not hard set on these categories, except for Work, this one will definitely stay.</p>
<h3 id="alerts" >
  <a class="group relative" href="#alerts">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Alerts</a>
</h3>
<p>I use <strong>Smart List Day Alerts</strong> strategy for finding and fixing potential planning problems.</p>
<ul>
<li>
<p>New items pulled from backburner &mdash; reminder to check items with <code>*new</code></p>
</li>
<li>
<p>Stale &mdash; review items with <code>*stale</code></p>
</li>
<li>
<p>To review (waiting or pinged) &mdash; some tasks are ready to review)</p>
</li>
<li>
<p>This week unestimated &mdash; add estimation for all tasks, smartlist: <code>Tasks, no time estimate, &amp;thisWeek scheduleDate today == ||</code></p>
</li>
</ul>
<h3 id="review" >
  <a class="group relative" href="#review">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Review</a>
</h3>
<p><strong>Review date</strong> strategy is not the best name for my usage. I use it for tasks which are not done by me.</p>
<ul>
<li>
<p>tag <em>waiting</em> (3 day) &mdash; for long waiting tasks</p>
</li>
<li>
<p>tag <em>ping</em> (1 day) &mdash; reminds me ask someone everyday if s/he finished the task</p>
</li>
</ul>
<h3 id="occasional-tasks" >
  <a class="group relative" href="#occasional-tasks">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Occasional tasks</a>
</h3>
<p>I was not able to setup this correctly in AM yet, so I&rsquo;m using some hacks around it. Basically, these are tasks which I want to do every 15-40 days, without specifying exact day. One of the tasks is <em>Productivity system review</em>. It has a note with questions which I ask while going through all my tasks and projects:</p>
<ol>
<li>
<p>Is it really mine? Maybe delegate?</p>
</li>
<li>
<p>Is there any real profit from this task?</p>
</li>
<li>
<p>Maybe it&rsquo;s possible to do some other task so that this one becomes obsolete?</p>
</li>
<li>
<p>Is there any easier way to do it?</p>
</li>
<li>
<p>Do I really still need to do it?</p>
</li>
</ol>
<p>Goal is to remove or reformulate tasks.</p>
<h2 id="ending-thoughts" >
  <a class="group relative" href="#ending-thoughts">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Ending thoughts</a>
</h2>
<p>Of course this is just a small part of AM experience. I like being able to create work sessions for working on projects in pomodorro-style chunks. Templates are awesome and I use them for mindful book reading projects (reading, making notes, transferring them to Joplin). Gamification abilities are cute and I will explore them more, when I&rsquo;ll be more comfortable and less procrastinating.</p>
<p>I&rsquo;ve noticed that features which were very important to me in RTM, like tagging, are not so needed here. Here you can have categories, sections, do/due/end dates, projects to achieve similar goals. This granularity and specificity are the most awesome aspect of AM!</p>
]]></content>
  </entry>
  <entry>
    <title>Remember The Milk for task management</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2018/03/20/remember-the-milk-for-task-management/" hreflang="en"/>
    <published>2018-03-20T00:00:00Z</published>
    <updated>2018-03-20T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2018-03-20:/articles/2018/03/20/remember-the-milk-for-task-management/</id>
    
    <summary type="html"><![CDATA[<p>Today I received a letter from <a href="https://www.rememberthemilk.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Remember The Milk</a> that I had won a free year of Pro. That&rsquo;s great, yet I feel a bit sad because somehow everyone talks about every other todo app and not RTM.</p>
<p>I&rsquo;ve been using RTM for several years. First, with free account, later with Pro. And it&rsquo;s a <em>second</em> time I won a Pro :) RTM is great. For me, four killer features are:</p>]]></summary>
    <content type="html"><![CDATA[<p>Today I received a letter from <a href="https://www.rememberthemilk.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Remember The Milk</a> that I had won a free year of Pro. That&rsquo;s great, yet I feel a bit sad because somehow everyone talks about every other todo app and not RTM.</p>
<p>I&rsquo;ve been using RTM for several years. First, with free account, later with Pro. And it&rsquo;s a <em>second</em> time I won a Pro :) RTM is great. For me, four killer features are:</p>
<ul>
<li>Start dates and due dates</li>
<li>Very customizable repeat options</li>
<li>Really smart add syntax (you can input everything as one-liner and all task fields will be populated)</li>
<li>Smart lists (basically, it&rsquo;s saved searches with operators like <code>tag:</code> and logic control with <code>AND</code>/<code>OR</code>/<code>NOT</code>/parentheses)</li>
</ul>
<p>You can implement any imaginable task management system with it. I use <a href="http://blog.rememberthemilk.com/post/172085635648/tips-tricks-tuesday-combining-organization" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">a setup based on M. Dorofeev&rsquo;s approach</a>.  Of course, specialized apps are probably a bit easier if you strictly follow rules of one &ldquo;true&rdquo; system, but with RTM you can do the heck you want any time you want. There is a bizarre development fashion to &ldquo;box&rdquo; users with constraints, to give no options. And for me RTM is a breeze of sane air of freedom.</p>
]]></content>
  </entry>
  <entry>
    <title>Mega mind map: version #2</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2018/03/19/mega-mind-map-version-2/" hreflang="en"/>
    <published>2018-03-19T00:00:00Z</published>
    <updated>2018-03-19T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2018-03-19:/articles/2018/03/19/mega-mind-map-version-2/</id>
    
    <summary type="html"><![CDATA[<p>My <a href="https://github.com/aviskase/mega-mind-map" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">not-so-mega mind map</a> has grown a little bit. I finally added exploratory testing tours and ideas on how to make test cases less rigid, all that great stuff from &ldquo;Exploratory Software Testing&rdquo; by James A. Whittaker.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2018/03/19/mega-mind-map-version-2/mmm_v2_hu_64d5395312397fd0.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2018/03/19/mega-mind-map-version-2/mmm_v2.png" alt="Mega mind map version 2" defer>
	</picture>
	
</figure></p>]]></summary>
    <content type="html"><![CDATA[<p>My <a href="https://github.com/aviskase/mega-mind-map" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">not-so-mega mind map</a> has grown a little bit. I finally added exploratory testing tours and ideas on how to make test cases less rigid, all that great stuff from &ldquo;Exploratory Software Testing&rdquo; by James A. Whittaker.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2018/03/19/mega-mind-map-version-2/mmm_v2_hu_64d5395312397fd0.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2018/03/19/mega-mind-map-version-2/mmm_v2.png" alt="Mega mind map version 2" defer>
	</picture>
	
</figure></p>
]]></content>
  </entry>
  <entry>
    <title>Testers in this world</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/" hreflang="en"/>
    <published>2018-01-23T00:00:00Z</published>
    <updated>2018-01-23T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2018-01-23:/articles/2018/01/23/testers-in-this-world/</id>
    
    <summary type="html"><![CDATA[<p>Every tester saw those articles: &ldquo;Testing is dead&rdquo;, &ldquo;Manual testing is dead&rdquo;, &ldquo;Testing is not dead&rdquo;, &ldquo;Automation is not testing&rdquo;, &ldquo;Company XXX has no testers and is happy about it&rdquo;, etc. They might get on nerves. I love my craft, but sometimes something is nibbling at the back of my mind. Something that keeps me wondering: maybe I should move to a different role? So, I unscrambled this &ldquo;something&rdquo; and found an explanation why these thoughts are there and why I won&rsquo;t leave testing =)</p>]]></summary>
    <content type="html"><![CDATA[<p>Every tester saw those articles: &ldquo;Testing is dead&rdquo;, &ldquo;Manual testing is dead&rdquo;, &ldquo;Testing is not dead&rdquo;, &ldquo;Automation is not testing&rdquo;, &ldquo;Company XXX has no testers and is happy about it&rdquo;, etc. They might get on nerves. I love my craft, but sometimes something is nibbling at the back of my mind. Something that keeps me wondering: maybe I should move to a different role? So, I unscrambled this &ldquo;something&rdquo; and found an explanation why these thoughts are there and why I won&rsquo;t leave testing =)</p>
<p>Disclaimer: these thoughts are mine and I don&rsquo;t have a goal to promote or impose them on other people. As a normal human being I do understand that my opinion may change with new experience and knowledge. This article contains a documented reflection on my experience so far. Probably it&rsquo;ll be fun to read in 10-20 years (if I&rsquo;ll still be a tester) xD</p>
<hr>
<h2 id="ideal-world-of-software-development" >
  <a class="group relative" href="#ideal-world-of-software-development">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Ideal world of software development</a>
</h2>
<p>Imagine an ideal world of software development. Scope is clear. Everything is done on time in relaxed manner without rush. Everybody is motivated to create the best product. Everybody has happy life outside of work. No stress. Users are eager to help too. And all these aren&rsquo;t just for one product, but true for all software in the world. Great, isn&rsquo;t it?</p>
<p>Now, when I&rsquo;m thinking about this <em>ideal</em> world, I can&rsquo;t find a place for testers in it. There is just no place for bugs. Developers and analysts have all the time to design and build a product without real bugs. Remember, they don&rsquo;t have just a time, they&rsquo;re also motivated, so they definitively test product. They do it themselves&hellip; so there is no need for a <em>separate</em> role of a tester.</p>
<p>Let&rsquo;s visualize this tester-less world as a perfect disk:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_1_hu_7782e830fd85324c.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_1.png" alt="Ideal world of development" defer>
	</picture>
	
</figure></p>
<h2 id="real-world-of-software-development" >
  <a class="group relative" href="#real-world-of-software-development">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Real world of software development</a>
</h2>
<p>But our current world is not ideal. No one has enough time. Overtimes. Burning out. Problems outside work. Toxic environment. No motivation. Some rogue manager keeps adding features out of scope. And bugs, bugs everywhere. This world is distorted, some products are a bit better than others, but no one is perfect.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_2_hu_b940df64b09555da.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_2.png" alt="Real world of development" defer>
	</picture>
	
</figure></p>
<h2 id="testers-in-the-real-world-of-software-development" >
  <a class="group relative" href="#testers-in-the-real-world-of-software-development">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Testers in the real world of software development</a>
</h2>
<p>And that&rsquo;s where testers are coming. We are like clay, like sealing foam. We patch this not-ideal world. We make it less distorted.</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_3_hu_375cc522fff8ce78.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_3.png" alt="Real world of development with testers" defer>
	</picture>
	
</figure></p>
<p>All products are distorted in different ways, that&rsquo;s why you can see testers doing all kind of things. Some are just &ldquo;manual monkeys.&rdquo; On a different extreme are those who automate test cases that are written by others. Most are somewhere in between. There are projects where testers have a hat of analytic. Or support. Or both. Or PM. Someone, maybe gurus, don&rsquo;t test at all: they mentor a team to test themselves, control that quality is efficiently insured by others.</p>
<p>Here is a fun fact. That patched version is still a lie. Testers are also not perfect. Thus, our world looks more like this:</p>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_4_hu_893cd1a021cb17b5.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_4.png" alt="Even more real world of development with testers" defer>
	</picture>
	
</figure></p>
<p>We can&rsquo;t patch all holes. But we are here to try.</p>
]]></content>
  </entry>
  <entry>
    <title>2018 and mega mind map</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2018/01/06/2018-and-mega-mind-map/" hreflang="en"/>
    <published>2018-01-06T00:00:00Z</published>
    <updated>2018-01-06T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2018-01-06:/articles/2018/01/06/2018-and-mega-mind-map/</id>
    
    <summary type="html"><![CDATA[<p>Well, it&rsquo;s been a while. I don&rsquo;t want to make so called &ldquo;new year resolutions&rdquo;, but it&rsquo;s better to add a repeating task in the RTM to write something here xD</p>
<p>2018 started shaky. I left my first real place of work &mdash; Quality Lab &mdash; Alma mater of testing. This decision was heartbreaking, yet expected. On the bright side, now I have time to condition my brain into the normal mode again: for the last 1.5 year I wasn&rsquo;t productive in studying and reading.</p>]]></summary>
    <content type="html"><![CDATA[<p>Well, it&rsquo;s been a while. I don&rsquo;t want to make so called &ldquo;new year resolutions&rdquo;, but it&rsquo;s better to add a repeating task in the RTM to write something here xD</p>
<p>2018 started shaky. I left my first real place of work &mdash; Quality Lab &mdash; Alma mater of testing. This decision was heartbreaking, yet expected. On the bright side, now I have time to condition my brain into the normal mode again: for the last 1.5 year I wasn&rsquo;t productive in studying and reading.</p>
<p>First step is my mega mind map. God bless <a href="https://www.freeplane.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Freeplane</a>, it&rsquo;s awesome. Actually, it was a bit ugly, but now it&rsquo;s looking good ;) So, MMM. It&rsquo;s versioned with git and here is a <a href="https://github.com/aviskase/mega-mind-map" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">repo</a>. I have an impressive goal of documenting all testing techniques and approaches. Hope, I won&rsquo;t drop it as usual.</p>
<p>Here is a first iteration:</p>
<ul>
<li>ACC (Attributes / Components / Capabilities)</li>
<li>Decomposition</li>
<li>APV aka ДПЗ (Actions / Parameters / Values)</li>
<li>Value analysis</li>
</ul>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2018/01/06/2018-and-mega-mind-map/mmm_v1_hu_9f7994874c9c6167.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2018/01/06/2018-and-mega-mind-map/mmm_v1.jpg" alt="Mega mind map version 1" defer>
	</picture>
	
</figure></p>
]]></content>
  </entry>
  <entry>
    <title>Enabling L2TP/IPSec in Ubuntu</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2017/03/19/enabling-l2tpipsec-in-ubuntu/" hreflang="en"/>
    <published>2017-03-19T00:00:00Z</published>
    <updated>2017-03-19T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2017-03-19:/articles/2017/03/19/enabling-l2tpipsec-in-ubuntu/</id>
    
    <summary type="html"><![CDATA[<p>Linux is like that: you can do anything, but sometimes it&rsquo;s not easy for a common user. As for me, I hate writing config files for VPN, because network-manager is awesome. But sometimes it&rsquo;s not easy to make it work.</p>
<p>The biggest problem for me is LT2PT/IPSec. There is <a href="http://blog.z-proj.com/enabling-l2tp-over-ipsec-on-ubuntu-16-04/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">an excellent article</a> on how to enable it using <code>network-manager-l2tp</code>. But as on-line articles have a tendency to be removed, I want to save these instructions here.</p>]]></summary>
    <content type="html"><![CDATA[<p>Linux is like that: you can do anything, but sometimes it&rsquo;s not easy for a common user. As for me, I hate writing config files for VPN, because network-manager is awesome. But sometimes it&rsquo;s not easy to make it work.</p>
<p>The biggest problem for me is LT2PT/IPSec. There is <a href="http://blog.z-proj.com/enabling-l2tp-over-ipsec-on-ubuntu-16-04/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">an excellent article</a> on how to enable it using <code>network-manager-l2tp</code>. But as on-line articles have a tendency to be removed, I want to save these instructions here.</p>
<hr>
<p>Install the prerequisites:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>sudo apt install \  
</span></span><span style="display:flex;"><span>intltool \  
</span></span><span style="display:flex;"><span>libtool \  
</span></span><span style="display:flex;"><span>network<span style="color:#ff79c6">-</span>manager<span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libnm<span style="color:#ff79c6">-</span>util<span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libnm<span style="color:#ff79c6">-</span>glib<span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libnm<span style="color:#ff79c6">-</span>glib<span style="color:#ff79c6">-</span>vpn<span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libnm<span style="color:#ff79c6">-</span>gtk<span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libnm<span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libnma<span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>ppp<span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libdbus<span style="color:#ff79c6">-</span>glib<span style="color:#ff79c6">-</span><span style="color:#bd93f9">1</span><span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libsecret<span style="color:#ff79c6">-</span><span style="color:#bd93f9">1</span><span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libgtk<span style="color:#ff79c6">-</span><span style="color:#bd93f9">3</span><span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>libglib2<span style="color:#ff79c6">.</span><span style="color:#bd93f9">0</span><span style="color:#ff79c6">-</span>dev \  
</span></span><span style="display:flex;"><span>xl2tpd \  
</span></span><span style="display:flex;"><span>strongswan  
</span></span></code></pre></div><p>Get network-manager-l2tp:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span>git clone https:<span style="color:#ff79c6">//</span>github<span style="color:#ff79c6">.</span>com<span style="color:#ff79c6">/</span>nm<span style="color:#ff79c6">-</span>l2tp<span style="color:#ff79c6">/</span>network<span style="color:#ff79c6">-</span>manager<span style="color:#ff79c6">-</span>l2tp<span style="color:#ff79c6">.</span>git  
</span></span><span style="display:flex;"><span>cd network<span style="color:#ff79c6">-</span>manager<span style="color:#ff79c6">-</span>l2tp  
</span></span><span style="display:flex;"><span>autoreconf <span style="color:#ff79c6">-</span>fi  
</span></span><span style="display:flex;"><span>intltoolize  
</span></span></code></pre></div><p>Configure the build:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-gdscript3" data-lang="gdscript3"><span style="display:flex;"><span><span style="color:#ff79c6">./</span>configure \
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">--</span>disable<span style="color:#ff79c6">-</span><span style="color:#ff79c6">static</span> <span style="color:#ff79c6">--</span>prefix<span style="color:#ff79c6">=/</span>usr \
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">--</span>sysconfdir<span style="color:#ff79c6">=/</span>etc <span style="color:#ff79c6">--</span>libdir<span style="color:#ff79c6">=/</span>usr<span style="color:#ff79c6">/</span>lib<span style="color:#ff79c6">/</span>x86_64<span style="color:#ff79c6">-</span>linux<span style="color:#ff79c6">-</span>gnu \
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">--</span>libexecdir<span style="color:#ff79c6">=/</span>usr<span style="color:#ff79c6">/</span>lib<span style="color:#ff79c6">/</span>NetworkManager \
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">--</span>localstatedir<span style="color:#ff79c6">=/</span><span style="color:#ff79c6">var</span> \
</span></span><span style="display:flex;"><span>  <span style="color:#ff79c6">--</span>with<span style="color:#ff79c6">-</span>pppd<span style="color:#ff79c6">-</span>plugin<span style="color:#ff79c6">-</span>dir<span style="color:#ff79c6">=/</span>usr<span style="color:#ff79c6">/</span>lib<span style="color:#ff79c6">/</span>pppd<span style="color:#ff79c6">/</span><span style="color:#bd93f9">2.4</span><span style="color:#ff79c6">.</span><span style="color:#bd93f9">7</span>
</span></span></code></pre></div><p>Next:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>make  
</span></span><span style="display:flex;"><span>sudo make install 
</span></span></code></pre></div><p>Remove AppArmor settings for IPSec:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apparmor_parser -R /etc/apparmor.d/usr.lib.ipsec.charon  
</span></span><span style="display:flex;"><span>sudo apparmor_parser -R /etc/apparmor.d/usr.lib.ipsec.stroke  
</span></span></code></pre></div><p>Replace x2ltpd with libpcap:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>sudo apt remove xl2tpd  
</span></span><span style="display:flex;"><span>sudo apt install libpcap0.8-dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wget https://github.com/xelerance/xl2tpd/archive/v1.3.6/xl2tpd-1.3.6.tar.gz  
</span></span><span style="display:flex;"><span>tar xvzf xl2tpd-1.3.6.tar.gz  
</span></span><span style="display:flex;"><span>cd xl2tpd-1.3.6  
</span></span><span style="display:flex;"><span>make  
</span></span><span style="display:flex;"><span>sudo make install  
</span></span></code></pre></div><p>Restart your machine, profit.</p>
]]></content>
  </entry>
  <entry>
    <title>Thoughts on “The ‘A’ Word”</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2016/07/30/thoughts-on-the-a-word/" hreflang="en"/>
    <published>2016-07-30T00:00:00Z</published>
    <updated>2016-07-30T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-07-30:/articles/2016/07/30/thoughts-on-the-a-word/</id>
    
    <summary type="html"><![CDATA[<p>Alan Page is known as one of the authors of &ldquo;How We Test Software at Microsoft&rdquo;. But there is another good book and it&rsquo;s called &ldquo;The &lsquo;A&rsquo; Word&rdquo;. You can buy it on <a href="https://leanpub.com/TheAWord" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">LeanPub</a>.</p>
<p>The book is about automation in testing, but not how <em>to do</em> it &mdash; it&rsquo;s about how <em>to think</em> about it. It&rsquo;s short, just 58 pages, but very dense with ideas and Alan&rsquo;s opinions.</p>]]></summary>
    <content type="html"><![CDATA[<p>Alan Page is known as one of the authors of &ldquo;How We Test Software at Microsoft&rdquo;. But there is another good book and it&rsquo;s called &ldquo;The &lsquo;A&rsquo; Word&rdquo;. You can buy it on <a href="https://leanpub.com/TheAWord" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">LeanPub</a>.</p>
<p>The book is about automation in testing, but not how <em>to do</em> it &mdash; it&rsquo;s about how <em>to think</em> about it. It&rsquo;s short, just 58 pages, but very dense with ideas and Alan&rsquo;s opinions.</p>
<p>As I am not qualified to give an opinion on automation topics (because I don&rsquo;t have much experience with it), I&rsquo;ve just gathered some notes for future referencing. Sections are divided by chapters.</p>
<hr>
<blockquote>
<p>Sometimes, testers use programming skills to help their testing. Sometimes, that code automates some application functionality. That&rsquo;s it.</p>
</blockquote>
<h3 id="testing-failing-to-succeed" >
  <a class="group relative" href="#testing-failing-to-succeed">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Testing: failing to succeed</a>
</h3>
<p>There is a very famous concept called &ldquo;Orders of Ignorance&rdquo; introduced by Phillip Glen Armour (<a href="https://www.researchgate.net/publication/27293624_The_five_orders_of_ignorance" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">more here</a>). Chapter&rsquo;s idea is that mostly tests are done on 0OI level, but we should never forget about 2OI test. 0OI is a lack of ignorance (I know) and 2OI is a lack of awareness (I don&rsquo;t know what I don&rsquo;t know).</p>
<blockquote>
<p>0OI tests are <em>knowledge-proving</em> tests, while 2OI tests are <em>knowledge-acquiring</em> tests.</p>
</blockquote>
<h3 id="the-robots-are-taking-over" >
  <a class="group relative" href="#the-robots-are-taking-over">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>The robots are taking over</a>
</h3>
<blockquote>
<p>Humans fail when they don&rsquo;t use automation to solve problems impossible or impractical for manual efforts.</p>
</blockquote>
<blockquote>
<p>Automation fails when it tries to do or verify something that&rsquo;s more suited for a human evaluation.</p>
</blockquote>
<h3 id="to-automate-" >
  <a class="group relative" href="#to-automate-">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>To automate &hellip;?</a>
</h3>
<blockquote>
<p><em>Good</em> testers test first &mdash; or at the very least they think of tests first.</p>
</blockquote>
<blockquote>
<p><em>Great</em> testers first think about how they&rsquo;re going to approach a testing problem, then figure out what&rsquo;s suitable for automation, and what&rsquo;s not suitable.</p>
</blockquote>
<blockquote>
<p>You should automate 100% of the tests that <em>should be</em> automated</p>
</blockquote>
<p>Alan&rsquo;s heuristic when to automate: &ldquo;I&rsquo;m Bored&rdquo;</p>
<h3 id="the-coding-tester" >
  <a class="group relative" href="#the-coding-tester">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>The coding tester</a>
</h3>
<p>Summary:</p>
<ul>
<li>the role of a coder-tester <em>is not</em> to automate everything</li>
<li>testers <em>do not</em> need to have a computer science</li>
<li>testers <em>do not</em> need to be able to program</li>
<li>programming knowledge <em>does not</em> destroy &ldquo;a proper tester angle&rdquo;</li>
<li>background similar to customer&rsquo;s <em>does not</em> make you a customer</li>
</ul>
<h3 id="gui-shmooey" >
  <a class="group relative" href="#gui-shmooey">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>GUI shmooey</a>
</h3>
<blockquote>
<p>For 95% of all software applications, directly automating the GUI is a waste of time.</p>
</blockquote>
<blockquote>
<p>For the record, I typed 99% above first, then chickened out.</p>
</blockquote>
<h3 id="design-for-gui-automation" >
  <a class="group relative" href="#design-for-gui-automation">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Design for GUI automation</a>
</h3>
<p>Alan&rsquo;s main points for disliking GUI automation:</p>
<ul>
<li>It&rsquo;s (typically) fragile &mdash; tests tend to break / stop working / work unsuccessfully often</li>
<li>It rarely lasts through multiple versions of a project (another aspect of fragility)</li>
<li>It&rsquo;s freakin&rsquo; hard to automate UI (and keep track of state, verify, etc.)</li>
<li>Available tools are weak to moderate (this is arguable, depending on what you want to do with the tools &mdash; I&rsquo;m particularly pleased, for example, with what good testers are able to do with selenium and web driver).</li>
</ul>
<blockquote>
<p>I love GUI automation that can automatically explore variations of a GUI based task flow.</p>
</blockquote>
<blockquote>
<p>I like GUI automation is in stress or performance issues.</p>
</blockquote>
<h3 id="its-probably-a-design-problem" >
  <a class="group relative" href="#its-probably-a-design-problem">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>It&rsquo;s (probably) a design problem</a>
</h3>
<ul>
<li>Record &amp; Playback automation is a non-starter</li>
<li>Basic verification that would be hit by anyone walking through the basics of the application isn&rsquo;t worth automation</li>
<li>Tests that do exactly the same thing every time are not valuable</li>
<li>Always think forward</li>
<li>Plan for failure and ensure that all test failures tell you exactly what is wrong</li>
<li>Tests should be reliable</li>
<li>There is always a better alternative to Sleep statements</li>
<li>UI is fragile, its testability should designed</li>
</ul>
<h3 id="in-the-middle" >
  <a class="group relative" href="#in-the-middle">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>In the middle</a>
</h3>
<p>Alan&rsquo;s brainstorming technique: first spend a reasonable amount of time focusing on the extremes &mdash; because often, some great ideas for &ldquo;the middle&rdquo; comes out of that brainstorming.</p>
<h3 id="test-design-for-automation" >
  <a class="group relative" href="#test-design-for-automation">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Test design for automation</a>
</h3>
<blockquote>
<p>The first step &mdash; and most important &mdash; is to think how you&rsquo;re going to test.</p>
</blockquote>
<blockquote>
<p>From that initial test design effort, you can deduce what aspects of testing could be accomplished more efficiently with automation (and without).</p>
</blockquote>
<h3 id="orchestrating-test-automation" >
  <a class="group relative" href="#orchestrating-test-automation">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Orchestrating test automation</a>
</h3>
<blockquote>
<p>Designing good tests is one of the hardest tasks in software development.</p>
</blockquote>
<h3 id="lol-----ur-automashun-suckz" >
  <a class="group relative" href="#lol-----ur-automashun-suckz">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>LOL &mdash; UR AUTOMASHUN SUCKZ!</a>
</h3>
<p>Your tests don&rsquo;t suck:</p>
<ul>
<li>when you treat their code like a production code
<ul>
<li>core reviews</li>
<li>static analysis</li>
<li>running with the debugger to ensure they are doing what you think they are</li>
<li>trust: if a test fails, it&rsquo;s a product bug, not a test bug</li>
</ul>
</li>
<li>when they execute automatically</li>
<li>when failures are handled automatically
<ul>
<li>bugs are entered automatically &mdash; including logs, call stacks, screen shots, trace information, and other relevant info</li>
<li>when bug is fixed, it&rsquo;s checked automatically</li>
<li>generation of &ldquo;Test Result Report&rdquo;</li>
</ul>
</li>
</ul>
<h3 id="musings-on-test-design" >
  <a class="group relative" href="#musings-on-test-design">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Musings on test design</a>
</h3>
<blockquote>
<p>Some tests can only be run via some sort of test automation.</p>
</blockquote>
<blockquote>
<p>Some tests can only be done via human interaction.</p>
</blockquote>
<blockquote>
<p>You can&rsquo;t effectively think about automated testing separately from human testing.</p>
</blockquote>
<blockquote>
<p>In my world, there are no such things as automated testing, exploratory testing, manual testing, etc.</p>
</blockquote>
<blockquote>
<p>There is only testing</p>
</blockquote>
<h3 id="beyond-regression-tests--testing-with-code" >
  <a class="group relative" href="#beyond-regression-tests--testing-with-code">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Beyond regression tests &amp; testing with code</a>
</h3>
<blockquote>
<p>Useful tests are tests that provide new information.</p>
</blockquote>
<blockquote>
<p>An automation strategy that only performs regression testing is short-sighted and incomplete.</p>
</blockquote>
<p>How to make test useful:</p>
<ul>
<li>model-based testing</li>
<li>introducing some randomness</li>
<li>data driven testing</li>
<li>scaled fault injection</li>
<li>fuzzing</li>
</ul>
<h3 id="more-on-test-design" >
  <a class="group relative" href="#more-on-test-design">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>More on test design</a>
</h3>
<blockquote>
<p>Test Design ideas are <em>endless.</em></p>
</blockquote>
<blockquote>
<p>To be a <em>good</em> test designer (and tester), you need a lot of testing ideas, and you need to know how and when to apply them.</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Notes for course “Intro to Linux”</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2016/07/27/notes-for-course-intro-to-linux/" hreflang="en"/>
    <published>2016-07-27T00:00:00Z</published>
    <updated>2016-07-27T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-07-27:/articles/2016/07/27/notes-for-course-intro-to-linux/</id>
    
    <summary type="html"><![CDATA[<p>If there is a Linux course on a platform, I&rsquo;ll always watch it. Those who know me are aware that I am using some kind of Debian-based distributive full time &mdash; I&rsquo;m not a hardcore fan, but I like it here. One might ask: why am I watching all these courses when they are mostly for beginners? Answer is simple: repetition is the mother of learning, plus there are always some tricks that you forget or can become more interesting with time.</p>]]></summary>
    <content type="html"><![CDATA[<p>If there is a Linux course on a platform, I&rsquo;ll always watch it. Those who know me are aware that I am using some kind of Debian-based distributive full time &mdash; I&rsquo;m not a hardcore fan, but I like it here. One might ask: why am I watching all these courses when they are mostly for beginners? Answer is simple: repetition is the mother of learning, plus there are always some tricks that you forget or can become more interesting with time.</p>
<p>So it happened with <a href="https://stepic.org/course/%d0%92%d0%b2%d0%b5%d0%b4%d0%b5%d0%bd%d0%b8%d0%b5-%d0%b2-Linux-73" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Intro to Linux</a>(ru) on Russian platform Stepic. First, I&rsquo;ve got month license for any JetBrains IDE by solving some exercises and that&rsquo;s cool. Second, cute guys from Bioinformatics Institute made me adore tmux and almost persuaded to look at vim. Almost.</p>
<p>And now as usual, some notes to not to forget. If something looks like a magic: read books or watch some course!</p>
<hr>
<p>Run program in background:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>program &amp;
</span></span></code></pre></div><p>Check if link is available:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>wget --spider somelink
</span></span></code></pre></div><p>Download files by links from a text file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>wget -i some-textfile
</span></span></code></pre></div><p>Using arguments in scripts:</p>
<ul>
<li><code>$#</code> &mdash; number of arguments</li>
<li><code>$0</code> &mdash; script name</li>
<li><code>$1</code> &mdash; the first argument</li>
<li><code>$2</code> &mdash; the second argument</li>
</ul>
<p>How much space does something occupy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>du [--max-depth &lt;depth&gt; -h] &lt;path&gt;
</span></span></code></pre></div><p>Create several directories / files at once:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-fallback" data-lang="fallback"><span style="display:flex;"><span>mkdir {dir1,dir2,dir3,dir4}
</span></span><span style="display:flex;"><span>touch {fileA,fileB}.txt
</span></span></code></pre></div><p>tmux &mdash; terminal multiplexor</p>
<ul>
<li>Go to commands mode: <span><kbd>Ctrl</kbd><span class="py-0 px-1">+</span><kbd>b</kbd></span>
</li>
<li>Create new window: commands mode and <span><kbd>c</kbd></span>
</li>
<li>Create vertical split: commands mode and <span><kbd>%</kbd></span>
</li>
<li>Create horizontal split: commands mode and <span><kbd>"</kbd></span>
</li>
<li>Go to window number 1 &hellip; 9: commands mode and <span><kbd>1</kbd></span>
 &hellip; <span><kbd>9</kbd></span>
</li>
<li>Go to next window: commands mode and <span><kbd>n</kbd></span>
</li>
<li>Go to previous window: commands mode and <span><kbd>p</kbd></span>
</li>
<li>Close window or split: commands mode and <span><kbd>x</kbd></span>
</li>
<li>Detach (temporal exit): commands mode and <span><kbd>d</kbd></span>
</li>
<li>Return to tmux: <code>tmux attach / tmux a</code></li>
<li>List all running tmux: <code>tmux list-sessions</code></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Course “Intro to DevOps” by Udacity</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2016/07/17/course-intro-to-devops-by-udacity/" hreflang="en"/>
    <published>2016-07-17T00:00:00Z</published>
    <updated>2016-07-17T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-07-17:/articles/2016/07/17/course-intro-to-devops-by-udacity/</id>
    
    <summary type="html"><![CDATA[<p>I love MOOCs: Coursera, Udacity, Stepic. There are so many courses to watch for entire life. Just now watched a course <a href="https://www.udacity.com/course/intro-to-devops--ud611" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Intro to DevOps</a> by Udacity.</p>
<p>The course is concise and comprehensive. Here are some notes I&rsquo;ve made.</p>
<hr>
<h2 id="devops" >
  <a class="group relative" href="#devops">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>DevOps</a>
</h2>
<p><em>DevOps</em> is the practice of operations and development engineers participating together in the entire service life-cycle, from design through the development process to production support.</p>]]></summary>
    <content type="html"><![CDATA[<p>I love MOOCs: Coursera, Udacity, Stepic. There are so many courses to watch for entire life. Just now watched a course <a href="https://www.udacity.com/course/intro-to-devops--ud611" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Intro to DevOps</a> by Udacity.</p>
<p>The course is concise and comprehensive. Here are some notes I&rsquo;ve made.</p>
<hr>
<h2 id="devops" >
  <a class="group relative" href="#devops">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>DevOps</a>
</h2>
<p><em>DevOps</em> is the practice of operations and development engineers participating together in the entire service life-cycle, from design through the development process to production support.</p>
<p>DevOps is also characterized by operations staff making use many of the same techniques as developers for their systems work.</p>
<p>CommitStrip &mdash; <a href="http://www.commitstrip.com/en/2015/02/02/is-your-company-ready-for-devops/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">what DevOps is <em>not</em></a></p>
<p>Components that make up DevOps &mdash; CAMS:</p>
<ul>
<li>Communication &mdash; agile communications, lean, respect</li>
<li>Automation &mdash; deployment, testing, integration</li>
<li>Measurement &mdash; monitoring, useful logs, biz metrics, usefulness of tools &amp; processes</li>
<li>Sharing &mdash; shared view of goals, problems, and benefits</li>
</ul>
<blockquote>
<p>If you can&rsquo;t measure it, you can&rsquo;t improve it.</p>
</blockquote>
<h2 id="solving-the-environment-problem" >
  <a class="group relative" href="#solving-the-environment-problem">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Solving the environment problem</a>
</h2>
<ol>
<li>Golden image
<ul>
<li>more work up front &mdash; large install image must be regenerated for any change</li>
<li>much faster installation/boot</li>
</ul>
</li>
<li>Configuration management
<ul>
<li>lighter build process &mdash; integration is done at install/initial boot time</li>
<li>slower start up process</li>
</ul>
</li>
<li>Combination of 1 &amp; 2</li>
</ol>
<h2 id="monitoring" >
  <a class="group relative" href="#monitoring">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Monitoring</a>
</h2>
<p>Monitoring data sources:</p>
<ul>
<li>external probing, test queries</li>
<li>application levels stats (queries per second, latency)</li>
<li>environment stats (JVM memory profile)</li>
<li>host/container stats (load average, disk errors)</li>
</ul>
<p>Monitoring data products:</p>
<ul>
<li>alerting</li>
<li>performance analysis</li>
<li>capacity prediction</li>
<li>growth measurement</li>
<li>debugging metrics</li>
</ul>
<p>
<figure>
  <picture>
    
    
    <source srcset="https://www.aviskase.com/articles/2016/07/17/course-intro-to-devops-by-udacity/monitoring_systems_hu_3729a9c379662ade.webp" type="image/webp">
    <img class="mx-auto rounded" src="https://www.aviskase.com/articles/2016/07/17/course-intro-to-devops-by-udacity/monitoring_systems.png" alt="Monitoring systems" defer>
	</picture>
	
</figure></p>
<h2 id="additional-resources" >
  <a class="group relative" href="#additional-resources">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Additional resources</a>
</h2>
<h3 id="notable-books" >
  <a class="group relative" href="#notable-books">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Notable books</a>
</h3>
<ul>
<li><a href="http://itrevolution.com/books/phoenix-project-devops-book/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The Phoenix Project</a> (by Gene Kim, Kevin Behr, George Spafford) &mdash; a novel about IT, DevOps, and helping your business win</li>
<li><a href="http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley-ebook/dp/B003YMNVC0" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation</a> (by Jez Humble, David Farley) &mdash; the principles and technical practices that enable rapid, incremental delivery of high quality, valuable new functionality to users</li>
<li><a href="http://www.amazon.com/Lean-Enterprise-Performance-Organizations-Innovate/dp/1449368425" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Lean Enterprise: How High Performance Organizations Innovate at Scale</a> (by Jez Humble, Joanne Molesky, Barry O&rsquo;Reilly) &mdash; Lean and Agile principles and patterns to help you move fast at scale &mdash; and demonstrates why and how to apply these methodologies throughout your organization, rather than with just one department or team</li>
<li><a href="http://smile.amazon.com/gp/product/B00CBM1WFC" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Building a DevOps Culture</a> (by Mandi Walls) &mdash; free Kindle book &mdash; DevOps is as much about culture as it is about tools</li>
</ul>
<h3 id="notable-presentations" >
  <a class="group relative" href="#notable-presentations">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Notable presentations</a>
</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=o7-IuYS0iSE" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Short history of DevOps</a> &mdash; video by Damon Edwards</li>
<li><a href="https://www.youtube.com/watch?v=_DEToXsgrPc" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Chef Style DevOps Kungfu</a> &mdash; Adam Jacob Keynote &mdash; ChefConf 2015</li>
<li><a href="https://www.youtube.com/watch?v=L1w2_AY82WY" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Jez Humble Keynote</a> &mdash; ChefConf 2015</li>
<li><a href="https://vimeo.com/69079272" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Leading the Horses to Drink</a> &mdash; support and initiate a DevOps transformation by Damon Edwards</li>
</ul>
<h3 id="additional-devops-related-blogs-and-sites" >
  <a class="group relative" href="#additional-devops-related-blogs-and-sites">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Additional DevOps related blogs and sites</a>
</h3>
<ul>
<li><a href="https://www.chef.io/blog/2010/07/16/what-devops-means-to-me/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What DevOps means to me</a> &mdash; an explanation of the components that make up CAMS (Culture, Automation, Measurement, Sharing), as well additional thoughts on what DevOps is and is not &mdash; by John Willis</li>
<li><a href="http://dev2ops.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">dev2ops</a> &mdash; delivering change in a DevOps and cloud world</li>
<li><a href="http://theagileadmin.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">the agile admin</a> &mdash; blog on topics of DevOps, agile operations, cloud computing, infrastructure automation, Web security (especially AppSec), transparency, open source, monitoring, Web performance optimization, and more</li>
<li><a href="http://devopschecklist.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The DevOps checklist</a> &mdash; this checklist is comprised of 48 items you can use to gauge the maturity of your software delivery competency, and form a baseline to measure your future improvements</li>
<li><a href="http://www.mattstratton.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">DevOps &mdash; A Crash Course</a> by Matt Stratton. A lot of links to good resources on DevOps topics.</li>
</ul>
<h3 id="additional-resources-by-nutanix" >
  <a class="group relative" href="#additional-resources-by-nutanix">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Additional resources by Nutanix</a>
</h3>
<ul>
<li><a href="http://stevenpoitras.com/the-nutanix-bible/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The Nutanix Bible</a> &mdash; brief history of data centers, visualization, webscale architecture and an explanation of Nutanix hyperconverged architecture</li>
<li><a href="http://go.nutanix.com/webscale-101-hyper-converged-infrastructure-guide.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Hyperconverged Infrastructure Guide</a></li>
<li><a href="https://next.nutanix.com/t5/Nutanix-Education-Blog/bg-p/Certifications" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Nutanix Education portal</a></li>
<li><a href="https://www.youtube.com/channel/UCJupSMWQRKQTvkb2CfkW0Eg" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Nutanix Education YouTube channel</a></li>
<li><a href="http://next.nutanix.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Nutanix NEXT community site</a></li>
</ul>
<h3 id="popular-monitoring-tools" >
  <a class="group relative" href="#popular-monitoring-tools">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Popular monitoring tools</a>
</h3>
<ul>
<li><a href="https://www.nagios.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Nagios</a> and <a href="http://www.zabbix.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Zabbix</a> &mdash; comprehensive solutions for monitoring large infrastructure, but maybe too big and complex for small projects</li>
<li><a href="http://graphite.wikidot.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Graphite</a> &mdash; open-source database and a graphing solution for storing and displaying monitoring data</li>
<li><a href="https://influxdb.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">InfluxDB</a> &mdash; an open-source distributed time series database for metrics, events, and analytics</li>
<li><a href="https://github.com/etsy/statsd" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">StatsD</a> &mdash; simple daemon for easy stats aggregation, by Etsy. Read about the philosophy behind it in the article by it&rsquo;s creators &mdash; <a href="https://codeascraft.com/2011/02/15/measure-anything-measure-everything/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Measure Anything, Measure Everything</a></li>
<li><a href="http://grafana.org/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Grafana</a> &mdash; metrics dashboard and graph editor for Graphite and InfluxDB</li>
<li><a href="https://www.pagerduty.com/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">PagerDuty</a> &mdash; incident resolution life-cycle management platform that integrates with over 100 other systems to streamline the process for large organizations</li>
<li><a href="https://www.elastic.co/products/logstash" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Logstash</a> &mdash; log storage and search system, works well with &mdash; <a href="https://www.elastic.co/products/kibana" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Kibana</a> graphing and visualization software</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Test planning: questions by Google (outline)</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2016/06/06/test-planning-questions-by-google-outline/" hreflang="en"/>
    <published>2016-06-06T00:00:00Z</published>
    <updated>2016-06-06T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-06-06:/articles/2016/06/06/test-planning-questions-by-google-outline/</id>
    
    <summary type="html"><![CDATA[<p>Google Testing Blog made all testers happy <a href="http://googletesting.blogspot.com/2016/06/the-inquiry-method-for-test-planning.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">one more time</a>. The article provides a comprehensive list of questions to be asked before writing a test plan (or a test strategy). So I&rsquo;ve made <a href="https://www.mindomo.com/outline/8d87278fd21f4c1a8f0ab413c2596f1e" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">an outline</a> to share.</p>]]></summary>
    <content type="html"><![CDATA[<p>Google Testing Blog made all testers happy <a href="http://googletesting.blogspot.com/2016/06/the-inquiry-method-for-test-planning.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">one more time</a>. The article provides a comprehensive list of questions to be asked before writing a test plan (or a test strategy). So I&rsquo;ve made <a href="https://www.mindomo.com/outline/8d87278fd21f4c1a8f0ab413c2596f1e" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">an outline</a> to share.</p>
]]></content>
  </entry>
  <entry>
    <title>Thoughts on “Dear Evil Tester”</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2016/05/09/thoughts-on-dear-evil-tester/" hreflang="en"/>
    <published>2016-05-09T00:00:00Z</published>
    <updated>2016-05-09T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-05-09:/articles/2016/05/09/thoughts-on-dear-evil-tester/</id>
    
    <summary type="html"><![CDATA[<p>Recently I&rsquo;ve read a book &ldquo;Dear Evil Tester&rdquo; by Alan Richardson. The book has three parts: published letters, unpublished, essays.</p>
<p>The first part is kick-ass. You can just quote a random sentence from it and it will be great.</p>
<p>For instance, I really want to use this one as a personal motto:</p>]]></summary>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve read a book &ldquo;Dear Evil Tester&rdquo; by Alan Richardson. The book has three parts: published letters, unpublished, essays.</p>
<p>The first part is kick-ass. You can just quote a random sentence from it and it will be great.</p>
<p>For instance, I really want to use this one as a personal motto:</p>
<blockquote>
<p>The only principle I&rsquo;m prepared to absolutely commit to, with absolute certainty, is that I can change my mind.</p>
</blockquote>
<p>And this one clearly shows the moment when everything starts flying to hell:</p>
<blockquote>
<p>If a person has the power to cause the project to fail, then they can say ‘testing is not required’, at the point they make the decision to doom the project.</p>
</blockquote>
<p>Oh, how often it is when a check is &ldquo;done&rdquo;, then no, not a single step back, there will be no time for restesting and rechecking:</p>
<blockquote>
<p>And as we all know, once a ‘Test Case’ is done, it can never be undone.</p>
</blockquote>
<p>Guru by themselves, so classic:</p>
<blockquote>
<p>Enumerate everything that you do, and only you do, and then define ‘true’ Exploratory Testing as the specific combination of items that you enumerated</p>
</blockquote>
<p>The second part wasn&rsquo;t so interesting. Yep, there are more practical and philosophical ideas, but they weren&rsquo;t <em>evil</em> enough. It also applies to the third part.</p>
<p>Nevertheless, it&rsquo;s the book you&rsquo;ll want to reread &mdash; cute devil&rsquo;s doodles and provocative style are awesome. And you can buy it on <a href="https://leanpub.com/DearEvilTester" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Leanpub</a>.</p>
]]></content>
  </entry>
  <entry>
    <title>Coverage metrics</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2016/05/02/coverage-metrics/" hreflang="en"/>
    <published>2016-05-02T00:00:00Z</published>
    <updated>2016-05-02T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-05-02:/articles/2016/05/02/coverage-metrics/</id>
    
    <summary type="html"><![CDATA[<p>There are two strange metrics on the project where I work: how much is tested and how much works. Every time I should update these two numbers my head explodes. I don&rsquo;t like them at all.</p>
<h2 id="what-means-how-much-is-tested" >
  <a class="group relative" href="#what-means-how-much-is-tested">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>What means &ldquo;how much is tested&rdquo;?</a>
</h2>
<p>Traditionally we are writing a percentage of completed checks out of all checks in the checklist. I don&rsquo;t like this tradition, because checks are different. Here you should just assert error&rsquo;s text message, and there you should produce this error under some conditions.</p>]]></summary>
    <content type="html"><![CDATA[<p>There are two strange metrics on the project where I work: how much is tested and how much works. Every time I should update these two numbers my head explodes. I don&rsquo;t like them at all.</p>
<h2 id="what-means-how-much-is-tested" >
  <a class="group relative" href="#what-means-how-much-is-tested">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>What means &ldquo;how much is tested&rdquo;?</a>
</h2>
<p>Traditionally we are writing a percentage of completed checks out of all checks in the checklist. I don&rsquo;t like this tradition, because checks are different. Here you should just assert error&rsquo;s text message, and there you should produce this error under some conditions.</p>
<p>I see this solution. Every check should have corresponding number like a story point. Let&rsquo;s call it a test point. To check text there is 1 tp, and to reproduce an error &mdash; 3 tp. That way the whole checklist costs 4 tp. When we are going through the checklist, a tester should write how much is tested for every check. For example, text is asserted &mdash; 1 pt. But reproducing is done only for several scenarios, so only 2 tp. In total, we completed 3 out of 4 test points.</p>
<h2 id="what-means-how-much-works" >
  <a class="group relative" href="#what-means-how-much-works">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>What means &ldquo;how much works&rdquo;?</a>
</h2>
<p>Based on what are other testers are doing, it is a number of &ldquo;green&rdquo; (or passed) checks out of all checks.</p>
<p>Consider this situation: test some kind of import. Test session is started, and voila, there no &ldquo;Import&rdquo; button. That&rsquo;s a blocker and no more checks could be done. What we are writing for &ldquo;how much works&rdquo;? Zero. A developer fixes the button. Checks are flying, everything is perfect, we are writing 100% (a miracle).</p>
<p>Here is a question: is it correct that we put zero after the first session? After all, it was only a button, everything else was working already. I think it&rsquo;s correct. But we should rename this metric, because it shows not how much <em>works</em>, but how much is <em>available</em> to a user and to what extent.</p>
<h2 id="and-what-is-in-result" >
  <a class="group relative" href="#and-what-is-in-result">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>And what is in result?</a>
</h2>
<p>Checklists are measured in test points, availability metric is renamed. Now watch carefully. We are throwing away percentages. After all, all checklists are different. Why should we use percentages, when they can&rsquo;t show reality. 20% of a small task with 10 tp &mdash; not bad, 80% of a task with 1000 tp &mdash; can ruin a release. And strictly speaking this method is using not ratio, but interval scale. You <a href="https://en.wikipedia.org/wiki/Level_of_measurement" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">can&rsquo;t multiply and divide</a> in this scale, therefore, can&rsquo;t calculate percentage.</p>
<h2 id="guru-talks" >
  <a class="group relative" href="#guru-talks">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Guru talks</a>
</h2>
<p>Michael Bolton writes a lot about choosing right scales and using them properly. Recently there was <a href="http://www.developsense.com/blog/2016/04/is-there-a-simple-coverage-metric/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">yet another article</a>. His positions is that in testing even interval scale is too much, nominal and ordinal are more correct. There is an excellent example in that article, so I just leave it here:</p>
<ul>
<li>&#x26aa; Level 0: we know nothing at all about this area of the product.</li>
<li>&#x1f636; Level 1: we have done a very cursory evaluation of this area. Smoke- or sanity-level; we&rsquo;ve visited this feature and had a brief look at it, but we don&rsquo;t really know very much about it; we haven&rsquo;t probed it in any real depth.</li>
<li>&#x1f610; Level 2: we&rsquo;ve had a reasonable look at this area, although we haven&rsquo;t gone all the way deep. We&rsquo;ve examined the common, the core, the critical, the happy paths, the handling of everyday errors or exceptions. We&rsquo;ve pretty familiar with this area. We&rsquo;ve done the kind of testing that would expose some significant bugs, if they were there.</li>
<li>&#x1f60e; Level 3: we&rsquo;ve really kicked this area harshly and hard. We&rsquo;ve looked at unusual and complex conditions or states. We&rsquo;ve probed deeply for subtle or hidden bugs. We&rsquo;ve exposed the product to the extreme, the exceptional, the rare, the improbable. We&rsquo;ve looked for bugs that are deep in the corners or hidden in the dark. If there were a serious bug, we&rsquo;re pretty sure we would have found it by now.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Testing knowledge transfer (outline)</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2016/04/24/testing-knowledge-transfer-outline/" hreflang="en"/>
    <published>2016-04-24T00:00:00Z</published>
    <updated>2016-04-24T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-04-24:/articles/2016/04/24/testing-knowledge-transfer-outline/</id>
    
    <summary type="html"><![CDATA[<p>There is <a href="http://positiveflower.blogspot.in/2016/04/blog-post.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">an excellent blog post</a> (ru) by  Elena Poplouhina with the list of what not to forget to tell about testing to project newcomers. So I&rsquo;ve made an English translation with some correction. Here it is <a href="https://www.mindomo.com/outline/ec7abbf581494a82a86539ca68e0ab5e" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">as an outline</a>.</p>]]></summary>
    <content type="html"><![CDATA[<p>There is <a href="http://positiveflower.blogspot.in/2016/04/blog-post.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">an excellent blog post</a> (ru) by  Elena Poplouhina with the list of what not to forget to tell about testing to project newcomers. So I&rsquo;ve made an English translation with some correction. Here it is <a href="https://www.mindomo.com/outline/ec7abbf581494a82a86539ca68e0ab5e" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">as an outline</a>.</p>
]]></content>
  </entry>
  <entry>
    <title>List of articles and videos on API and web services testing</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2016/01/09/list-of-articles-and-videos-on-api-and-web-services-testing/" hreflang="en"/>
    <published>2016-01-09T00:00:00Z</published>
    <updated>2016-01-09T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-01-09:/articles/2016/01/09/list-of-articles-and-videos-on-api-and-web-services-testing/</id>
    
    <summary type="html"><![CDATA[<p>There was a great list on now  discontinued site <code>qahelp.net</code>. I managed to save it through yandex cache (even google cache and web archive couldn&rsquo;t help).</p>
<h2 id="difference-between-api-and-web-services" >
  <a class="group relative" href="#difference-between-api-and-web-services">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Difference between API and web services</a>
</h2>
<ul>
<li><a href="http://stackoverflow.com/questions/808421/api-vs-webservice" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API vs Web Service</a>, <a href="http://programmers.stackexchange.com/questions/38691/difference-between-web-api-and-web-service" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Difference between web API and web service</a>, <a href="http://www.differencebetween.net/technology/internet/difference-between-api-and-web-service/#ixzz3l5QC4tYj" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Difference between API and web service</a></li>
<li><a href="http://readwrite.com/2013/09/19/api-defined/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What APIs Are And Why They’re Important</a> &mdash; Brian Proffitt</li>
<li><a href="http://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html#N10144" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What are web services</a> (section) &mdash; Nicholas Chase</li>
<li><a href="https://www.cl.cam.ac.uk/~ib249/teaching/Lecture1.handout.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Introduction to Web Services</a> (PDF) &mdash; Ioannis G. Baltopoulos</li>
</ul>
<h2 id="soap-and-rest" >
  <a class="group relative" href="#soap-and-rest">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>SOAP and REST</a>
</h2>
<ul>
<li><a href="http://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html#N10278" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Understanding SOAP</a> (section) &mdash; Nicholas Chase</li>
<li><a href="http://www.restapitutorial.com/lessons/whatisrest.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What is REST?</a> (video) &mdash; Todd Fredrich</li>
<li><a href="http://blog.smartbear.com/apis/understanding-soap-and-rest-basics/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Understanding SOAP and REST Basics And Differences</a> &mdash; John Mueller</li>
<li><a href="http://www.infoq.com/articles/webber-rest-workflow/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to GET a cup of coffee</a> &mdash; Jim Webber, Savas Parastatidis &amp; Ian Robinson</li>
</ul>
<h2 id="api-and-web-services-testing" >
  <a class="group relative" href="#api-and-web-services-testing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>API and web services testing</a>
</h2>
<ul>
<li><a href="https://blog.udemy.com/api-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API Testing: Why it matters and how to do it</a> &mdash; Michael Churchman</li>
<li><a href="http://testingisbelieving.blogspot.co.uk/2013/11/johnny-mnemonic-iceovermad.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Johnny mnemonic &mdash; ICEOVERMAD</a> &mdash; Ash Winter</li>
<li><a href="http://www.soapui.org/testing-dojo/welcome-to-the-dojo/overview.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The API Testing Dojo</a> &mdash; Smart Bear</li>
<li><a href="http://qxf2.com/blog/api-testing-ui-tools-postman" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API Testing: UI Tools</a> &mdash; Avinash Shetty</li>
<li><a href="http://qxf2.com/blog/api-testing-developer-tools" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API Testing: Developer Tools</a> &mdash; Avinash Shetty</li>
<li><a href="http://weekendtesting.com/?p=3898" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">WTEU-53 &mdash; An introduction to API Testing</a> &mdash; Amy Phillips</li>
<li><a href="http://blog.eviltester.com/2015/01/some-api-testing-basic-introductory.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Some API Testing Basic Introductory Notes and Tools</a> &mdash; Alan Richardson</li>
</ul>
<h2 id="deep-dive-into-rest-api" >
  <a class="group relative" href="#deep-dive-into-rest-api">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Deep dive into REST API</a>
</h2>
<ul>
<li><a href="http://blog.octo.com/en/design-a-rest-api/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to design a REST API</a> &mdash; Antoine Chantalou, Jérémy Buisson, Mohamed Kissa, Florent Jaby, Nicolas Laurent, Augustin Grimprel, Benoit Lafontaine</li>
<li><a href="http://toddfredrich.com/commoditization-of-the-user-interface.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The commoditization of the user interface</a> &mdash; Todd Friedrich</li>
<li><a href="http://toddfredrich.com/restexpress-api-application-layers.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">REST API application layers</a> &mdash; Todd Friedrich</li>
<li><a href="http://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">REST API design: Resource modeling</a> &mdash; Prakash Subramaniam</li>
<li><a href="http://martinfowler.com/articles/richardsonMaturityModel.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Richardson maturity model</a> &mdash; Martin Fowler</li>
</ul>
<h2 id="api-security-testing" >
  <a class="group relative" href="#api-security-testing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>API security testing</a>
</h2>
<ul>
<li><a href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-1-of-3/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to Hack an API and Get Away with It (Part 1 of 3)</a> &mdash; Ole Lensmar</li>
<li><a href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-2-of-3/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to Hack an API and Get Away with It (Part 2 of 3)</a> &mdash; Ole Lensmar</li>
<li><a href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-3-of-3/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to Hack an API and Get Away with It (Part 3 of 3)</a> &mdash; Ole Lensmar</li>
<li><a href="http://weekendtesting.com/?p=4033" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">WTEU-56 &mdash; Security testing for APIs</a> &mdash; Dan Billing</li>
</ul>
<h2 id="service-virtualization" >
  <a class="group relative" href="#service-virtualization">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Service virtualization</a>
</h2>
<ul>
<li><a href="http://smartbear.com/all-resources/articles/what-is-service-virtualization" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What is service virtualization</a> &mdash; John Mueller</li>
<li><a href="http://blog.smartbear.com/readyapi/hardening-your-application-against-api-failures-with-api-virtualization/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Hardening Your Application Against API Failures with API Virtualization</a> &mdash; Lorinda Brandon</li>
<li><a href="http://www.stickyminds.com/article/4-ways-boost-your-test-process-service-virtualization" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">4 Ways to Boost Your Test Process with Service Virtualization</a> &mdash; Bas Dijkstra</li>
</ul>
<h2 id="introduction-to-microservices" >
  <a class="group relative" href="#introduction-to-microservices">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Introduction to microservices</a>
</h2>
<ul>
<li><a href="http://martinfowler.com/articles/microservices.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Microservices</a> &mdash; Martin Fowler</li>
<li><a href="https://www.nginx.com/blog/introduction-to-microservices/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Introduction to microservices</a> &mdash; Chris Richardson</li>
<li><a href="http://blog.smartbear.com/microservices/delving-into-the-microservices-architecture/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Delving into the Microservices Architecture</a> &mdash; John Mueller</li>
<li><a href="https://blog.yourkarma.com/building-microservices-at-karma" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How we build microservices at Karma</a> &mdash; Stefan Borsje</li>
<li><a href="http://www.javaworld.com/article/2863409/soa/why-2015-will-be-the-year-of-microservices.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Why 2015 will be the year of microservices</a> &mdash; Eric Knorr</li>
</ul>
<h2 id="microservices-testing" >
  <a class="group relative" href="#microservices-testing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Microservices testing</a>
</h2>
<ul>
<li><a href="http://martinfowler.com/articles/microservice-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Testing Strategies in a Microservice Architecture</a> &mdash; Toby Clemson et al.</li>
<li><a href="http://blog.smartbear.com/apm/performance-issue-considerations-for-microservices-apis/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Performance Issue Considerations for Microservices APIs</a> &mdash; John Mueller</li>
<li><a href="http://blog.xebialabs.com/2014/12/31/8-questions-need-ask-microservices-containers-docker-2015/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">8 Questions You Need to Ask About Microservices, Containers &amp; Docker in 2015</a> &mdash; Andrew Phillips</li>
<li><a href="http://www.infoq.com/presentations/integration-tests-scam" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Integration tests are a scam</a> &mdash; JB Rainsberger</li>
<li><a href="https://prezi.com/09emobpvigo2/throw-away-your-integration-tests/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Throw away your integration tests</a> (slides) &mdash; Beth Skurrie</li>
</ul>
<h2 id="more-on-api" >
  <a class="group relative" href="#more-on-api">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>More on API</a>
</h2>
<ul>
<li><del><!-- raw HTML omitted -->What is API management &mdash; A Brief Primer<!-- raw HTML omitted --> &mdash; Navdeep Sidhu</del> <em>Upd. resource is no more available</em></li>
<li><a href="http://www.infoq.com/research/api-management" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API management platform capabilities</a> &mdash; Jeevak Kasarkod</li>
<li><a href="http://blog.smartbear.com/iot-2/the-api-is-the-invisible-hand-behind-the-internet-of-things" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The API is the Invisible Hand Behind the Internet of Things</a> &mdash; Jennifer Riggins</li>
<li><a href="http://blog.smartbear.com/apis/hypermedia-apis/working-with-hypermedia-apis" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Working with Hypermedia APIs</a> &mdash; John Mueller</li>
<li><a href="http://blog.smartbear.com/iot-2/testing-challenges-associated-with-machine-learning-apis" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Testing Challenges Associated with Machine Learning APIs</a> &mdash; John Mueller</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>There was a great list on now  discontinued site <code>qahelp.net</code>. I managed to save it through yandex cache (even google cache and web archive couldn&rsquo;t help).</p>
<h2 id="difference-between-api-and-web-services" >
  <a class="group relative" href="#difference-between-api-and-web-services">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Difference between API and web services</a>
</h2>
<ul>
<li><a href="http://stackoverflow.com/questions/808421/api-vs-webservice" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API vs Web Service</a>, <a href="http://programmers.stackexchange.com/questions/38691/difference-between-web-api-and-web-service" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Difference between web API and web service</a>, <a href="http://www.differencebetween.net/technology/internet/difference-between-api-and-web-service/#ixzz3l5QC4tYj" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Difference between API and web service</a></li>
<li><a href="http://readwrite.com/2013/09/19/api-defined/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What APIs Are And Why They’re Important</a> &mdash; Brian Proffitt</li>
<li><a href="http://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html#N10144" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What are web services</a> (section) &mdash; Nicholas Chase</li>
<li><a href="https://www.cl.cam.ac.uk/~ib249/teaching/Lecture1.handout.pdf" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Introduction to Web Services</a> (PDF) &mdash; Ioannis G. Baltopoulos</li>
</ul>
<h2 id="soap-and-rest" >
  <a class="group relative" href="#soap-and-rest">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>SOAP and REST</a>
</h2>
<ul>
<li><a href="http://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html#N10278" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Understanding SOAP</a> (section) &mdash; Nicholas Chase</li>
<li><a href="http://www.restapitutorial.com/lessons/whatisrest.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What is REST?</a> (video) &mdash; Todd Fredrich</li>
<li><a href="http://blog.smartbear.com/apis/understanding-soap-and-rest-basics/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Understanding SOAP and REST Basics And Differences</a> &mdash; John Mueller</li>
<li><a href="http://www.infoq.com/articles/webber-rest-workflow/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to GET a cup of coffee</a> &mdash; Jim Webber, Savas Parastatidis &amp; Ian Robinson</li>
</ul>
<h2 id="api-and-web-services-testing" >
  <a class="group relative" href="#api-and-web-services-testing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>API and web services testing</a>
</h2>
<ul>
<li><a href="https://blog.udemy.com/api-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API Testing: Why it matters and how to do it</a> &mdash; Michael Churchman</li>
<li><a href="http://testingisbelieving.blogspot.co.uk/2013/11/johnny-mnemonic-iceovermad.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Johnny mnemonic &mdash; ICEOVERMAD</a> &mdash; Ash Winter</li>
<li><a href="http://www.soapui.org/testing-dojo/welcome-to-the-dojo/overview.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The API Testing Dojo</a> &mdash; Smart Bear</li>
<li><a href="http://qxf2.com/blog/api-testing-ui-tools-postman" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API Testing: UI Tools</a> &mdash; Avinash Shetty</li>
<li><a href="http://qxf2.com/blog/api-testing-developer-tools" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API Testing: Developer Tools</a> &mdash; Avinash Shetty</li>
<li><a href="http://weekendtesting.com/?p=3898" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">WTEU-53 &mdash; An introduction to API Testing</a> &mdash; Amy Phillips</li>
<li><a href="http://blog.eviltester.com/2015/01/some-api-testing-basic-introductory.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Some API Testing Basic Introductory Notes and Tools</a> &mdash; Alan Richardson</li>
</ul>
<h2 id="deep-dive-into-rest-api" >
  <a class="group relative" href="#deep-dive-into-rest-api">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Deep dive into REST API</a>
</h2>
<ul>
<li><a href="http://blog.octo.com/en/design-a-rest-api/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to design a REST API</a> &mdash; Antoine Chantalou, Jérémy Buisson, Mohamed Kissa, Florent Jaby, Nicolas Laurent, Augustin Grimprel, Benoit Lafontaine</li>
<li><a href="http://toddfredrich.com/commoditization-of-the-user-interface.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The commoditization of the user interface</a> &mdash; Todd Friedrich</li>
<li><a href="http://toddfredrich.com/restexpress-api-application-layers.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">REST API application layers</a> &mdash; Todd Friedrich</li>
<li><a href="http://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">REST API design: Resource modeling</a> &mdash; Prakash Subramaniam</li>
<li><a href="http://martinfowler.com/articles/richardsonMaturityModel.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Richardson maturity model</a> &mdash; Martin Fowler</li>
</ul>
<h2 id="api-security-testing" >
  <a class="group relative" href="#api-security-testing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>API security testing</a>
</h2>
<ul>
<li><a href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-1-of-3/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to Hack an API and Get Away with It (Part 1 of 3)</a> &mdash; Ole Lensmar</li>
<li><a href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-2-of-3/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to Hack an API and Get Away with It (Part 2 of 3)</a> &mdash; Ole Lensmar</li>
<li><a href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-3-of-3/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How to Hack an API and Get Away with It (Part 3 of 3)</a> &mdash; Ole Lensmar</li>
<li><a href="http://weekendtesting.com/?p=4033" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">WTEU-56 &mdash; Security testing for APIs</a> &mdash; Dan Billing</li>
</ul>
<h2 id="service-virtualization" >
  <a class="group relative" href="#service-virtualization">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Service virtualization</a>
</h2>
<ul>
<li><a href="http://smartbear.com/all-resources/articles/what-is-service-virtualization" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">What is service virtualization</a> &mdash; John Mueller</li>
<li><a href="http://blog.smartbear.com/readyapi/hardening-your-application-against-api-failures-with-api-virtualization/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Hardening Your Application Against API Failures with API Virtualization</a> &mdash; Lorinda Brandon</li>
<li><a href="http://www.stickyminds.com/article/4-ways-boost-your-test-process-service-virtualization" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">4 Ways to Boost Your Test Process with Service Virtualization</a> &mdash; Bas Dijkstra</li>
</ul>
<h2 id="introduction-to-microservices" >
  <a class="group relative" href="#introduction-to-microservices">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Introduction to microservices</a>
</h2>
<ul>
<li><a href="http://martinfowler.com/articles/microservices.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Microservices</a> &mdash; Martin Fowler</li>
<li><a href="https://www.nginx.com/blog/introduction-to-microservices/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Introduction to microservices</a> &mdash; Chris Richardson</li>
<li><a href="http://blog.smartbear.com/microservices/delving-into-the-microservices-architecture/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Delving into the Microservices Architecture</a> &mdash; John Mueller</li>
<li><a href="https://blog.yourkarma.com/building-microservices-at-karma" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">How we build microservices at Karma</a> &mdash; Stefan Borsje</li>
<li><a href="http://www.javaworld.com/article/2863409/soa/why-2015-will-be-the-year-of-microservices.html" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Why 2015 will be the year of microservices</a> &mdash; Eric Knorr</li>
</ul>
<h2 id="microservices-testing" >
  <a class="group relative" href="#microservices-testing">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>Microservices testing</a>
</h2>
<ul>
<li><a href="http://martinfowler.com/articles/microservice-testing/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Testing Strategies in a Microservice Architecture</a> &mdash; Toby Clemson et al.</li>
<li><a href="http://blog.smartbear.com/apm/performance-issue-considerations-for-microservices-apis/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Performance Issue Considerations for Microservices APIs</a> &mdash; John Mueller</li>
<li><a href="http://blog.xebialabs.com/2014/12/31/8-questions-need-ask-microservices-containers-docker-2015/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">8 Questions You Need to Ask About Microservices, Containers &amp; Docker in 2015</a> &mdash; Andrew Phillips</li>
<li><a href="http://www.infoq.com/presentations/integration-tests-scam" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Integration tests are a scam</a> &mdash; JB Rainsberger</li>
<li><a href="https://prezi.com/09emobpvigo2/throw-away-your-integration-tests/" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Throw away your integration tests</a> (slides) &mdash; Beth Skurrie</li>
</ul>
<h2 id="more-on-api" >
  <a class="group relative" href="#more-on-api">
    <span class="hidden md:group-hover:inline absolute -left-5">#</span>More on API</a>
</h2>
<ul>
<li><del><!-- raw HTML omitted -->What is API management &mdash; A Brief Primer<!-- raw HTML omitted --> &mdash; Navdeep Sidhu</del> <em>Upd. resource is no more available</em></li>
<li><a href="http://www.infoq.com/research/api-management" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">API management platform capabilities</a> &mdash; Jeevak Kasarkod</li>
<li><a href="http://blog.smartbear.com/iot-2/the-api-is-the-invisible-hand-behind-the-internet-of-things" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">The API is the Invisible Hand Behind the Internet of Things</a> &mdash; Jennifer Riggins</li>
<li><a href="http://blog.smartbear.com/apis/hypermedia-apis/working-with-hypermedia-apis" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Working with Hypermedia APIs</a> &mdash; John Mueller</li>
<li><a href="http://blog.smartbear.com/iot-2/testing-challenges-associated-with-machine-learning-apis" class="bg-gradient-to-b from-blue-500 to-blue-500 bg-left-bottom bg-no-repeat bg-[length:100%_0.1rem] transition-[background] duration-300 hover:bg-gradient-to-b hover:from-amber-300 hover:to-amber-300 hover:bg-[length:100%_100%]">Testing Challenges Associated with Machine Learning APIs</a> &mdash; John Mueller</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>How to watch SWF in Linux</title>
    <link rel="alternate" href="https://www.aviskase.com/articles/2015/12/23/how-to-watch-swf-in-linux/" hreflang="en"/>
    <published>2015-12-23T00:00:00Z</published>
    <updated>2015-12-23T00:00:00Z</updated>
    <author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2015-12-23:/articles/2015/12/23/how-to-watch-swf-in-linux/</id>
    
    <summary type="html"><![CDATA[<p>Sometimes people use Jing to record videos for bug reports. This pest is saving them as SWF file. So, here is a simple note on how to open these videos in Linux.</p>
<p>It&rsquo;s really easy. Firefox can open them (of course, if Shockwave plugin is present). Just download that nasty video and open it in FF, all&rsquo;s done.</p>]]></summary>
    <content type="html"><![CDATA[<p>Sometimes people use Jing to record videos for bug reports. This pest is saving them as SWF file. So, here is a simple note on how to open these videos in Linux.</p>
<p>It&rsquo;s really easy. Firefox can open them (of course, if Shockwave plugin is present). Just download that nasty video and open it in FF, all&rsquo;s done.</p>
<p>But there is a catch. I don&rsquo;t know how it&rsquo;s on Windows, but for Linux you should edit mime types. In order to do that you should create a file <code>~/.mime.types</code> with this content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>application/x-shockwave-flash  swf swfl
</span></span></code></pre></div><p>That&rsquo;s all! This way is the easiest, because it works only for the owner of the home directory, where the file was created.</p>
<p>But if you want, you can make this setting global. But be careful, because everything will be reset after an upgrade. You should open the file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo nano /usr/share/mime/packages/freedesktop.org.xml
</span></span></code></pre></div><p>and replace this string:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&lt;mime-type type=&#34;application/vnd.adobe.flash.movie&#34;&gt;
</span></span></code></pre></div><p>with this one:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&lt;mime-type type=&#34;application/x-shockwave-flash&#34;&gt;
</span></span></code></pre></div><p>Then execute:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo update-mime-database /usr/share/mime
</span></span></code></pre></div>]]></content>
  </entry>
</feed>
