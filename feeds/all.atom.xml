<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>aviskase</title><link href="https://aviskase.github.io/" rel="alternate"></link><link href="https://aviskase.github.io/feeds/all.atom.xml" rel="self"></link><id>https://aviskase.github.io/</id><updated>2019-09-02T00:00:00-04:00</updated><entry><title>Your API Is Your Public Image</title><link href="https://aviskase.github.io/articles/2019/09/02/your-api-is-your-public-image/" rel="alternate"></link><published>2019-09-02T00:00:00-04:00</published><updated>2019-09-02T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2019-09-02:/articles/2019/09/02/your-api-is-your-public-image/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; this is a translation of &lt;a href="https://quality-lab.ru/blog/your-api-is-your-public-face/"&gt;the article&lt;/a&gt; written 2 years ago for a corporate blog. I didn&amp;rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &amp;ldquo;official.&amp;rdquo; Also, some examples don&amp;rsquo;t make …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; this is a translation of &lt;a href="https://quality-lab.ru/blog/your-api-is-your-public-face/"&gt;the article&lt;/a&gt; written 2 years ago for a corporate blog. I didn&amp;rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &amp;ldquo;official.&amp;rdquo; Also, some examples don&amp;rsquo;t make sense in English. Still, I didn&amp;rsquo;t update it too radically. Bear in mind, at the moment of the writing I was testing &lt;span class="caps"&gt;SOAP&lt;/span&gt; services and Excel-based import/export at big government project, so most of the examples relate to that&amp;nbsp;experience.  &lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Sometimes you&amp;rsquo;ll see a block like that. It will contain my current thoughts on the subject or&amp;nbsp;comments.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;First, what is &lt;span class="caps"&gt;API&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;API&lt;/span&gt; (Application Programming Interface)&lt;/strong&gt; is an interface which helps apps to communicate with each other. Just as a human interacts with apps via buttons and dialogs (user interface, &lt;span class="caps"&gt;UI&lt;/span&gt;), so apps interact via&amp;nbsp;APIs.&lt;/p&gt;
&lt;h2&gt;Types of &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;One way to define &lt;span class="caps"&gt;API&lt;/span&gt; types is whether it&amp;rsquo;s public or private &lt;span class="caps"&gt;API&lt;/span&gt;. &lt;strong&gt;Private&lt;/strong&gt; &lt;span class="caps"&gt;API&lt;/span&gt; is used for interactions inside your system, for&amp;nbsp;example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sync between mobile or desktop app and a&amp;nbsp;server&lt;/li&gt;
&lt;li&gt;app uses server&amp;rsquo;s computational resources (e.g., an image stylization app sends image and selected style to the server, where stylization will be&amp;nbsp;done)&lt;/li&gt;
&lt;li&gt;communications between a web app and&amp;nbsp;server&lt;/li&gt;
&lt;li&gt;communications between&amp;nbsp;micro-services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Primary risks for private APIs are functional and performance problems. Here, customers can only speculate why app works somehow&amp;nbsp;wrong-y.&lt;/p&gt;
&lt;p&gt;With &lt;strong&gt;public&lt;/strong&gt; &lt;span class="caps"&gt;API&lt;/span&gt; communication endpoints go beyond your system boundaries. Either you use someone&amp;rsquo;s &lt;span class="caps"&gt;API&lt;/span&gt; (social networks, maps, etc.) or you provide your &lt;span class="caps"&gt;API&lt;/span&gt; to external&amp;nbsp;developers.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk about public APIs a bit more. For some companies providing APIs is the core business (e.g., payment processing: Stripe, Rebilly), for others it&amp;rsquo;s just a nice to have addition to the main services. Whatever the case, public APIs open a perspective into how your internal development process works. And you won&amp;rsquo;t be able to hide behind fancy &lt;span class="caps"&gt;UI&lt;/span&gt; and eloquent support&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;If you publish public &lt;span class="caps"&gt;API&lt;/span&gt; with bad documentation, versioning mess, and tons of functional issues, make no mistake, external developer can (and maybe should!) assume that all your system is developed is such manner. Will they build their services around &lt;em&gt;such&lt;/em&gt; system and attract new users? Nope. Will they persuade their bosses and friends against using and/or buying your product? Probably. Don&amp;rsquo;t forget that people who are not so tech-y value developers&amp;rsquo; opinions a lot. And of course, those developers could also give your a bad reputation by complaining on social networks or forums. Therefore, before publishing even the tiniest &lt;span class="caps"&gt;API&lt;/span&gt;, you should think about its&amp;nbsp;quality.&lt;/p&gt;
&lt;h2&gt;Four Ways to Fuck up a Public &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;There are different techniques for assessing &lt;span class="caps"&gt;API&lt;/span&gt; quality (for example, &lt;a href="http://apiux.com/2013/05/29/api-hierarchy-needs/"&gt;hierarchy of needs&lt;/a&gt;). Let&amp;rsquo;s talk about four main ways to be an awful &lt;span class="caps"&gt;API&lt;/span&gt;:&lt;/p&gt;
&lt;h3&gt;Broken&amp;nbsp;Functionality&lt;/h3&gt;
&lt;p&gt;Sounds banal, but a service should work. And it should provide functionality it was created for. On one of my projects, there was an embarrassing situation with an export. We tested &lt;span class="caps"&gt;API&lt;/span&gt; with different objects under various conditions, but only with the small number of objects. All was fine until we found a bug on export with lots of data. The thing is that the key purpose for this service was to provide an ability to do massive exports, therefore, the service didn&amp;rsquo;t fulfill its main reason for&amp;nbsp;existence.&lt;/p&gt;
&lt;p&gt;You need to check available operations in context of other operations. For example, we released an import operation for objects A. It required an id of object B in the request body, but import and export of B was unreleased at the moment. As the result, it was impossible to do import A at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Other possible problem: do you consider a region where &lt;span class="caps"&gt;API&lt;/span&gt; will be used? Obviously, support for Cyrillic is not that important for purely &lt;span class="caps"&gt;US&lt;/span&gt; oriented product. But if you work globally, do not forget to check non-&lt;span class="caps"&gt;ASCII&lt;/span&gt; characters! Even though Unicode seems to be default, I did find bugs like that one: a user uploaded a file with the name &lt;code&gt;Документ_1.pdf&lt;/code&gt;, yet it was saved as &lt;code&gt;_1.pdf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One more example. We had a service for chunked file download which &amp;ldquo;ate&amp;rdquo; last byte of the last chunk. It was highly critical problem because this service was a part of the system where these files were used as supporting documents for legal&amp;nbsp;agreements.&lt;/p&gt;
&lt;h3&gt;Unreliability&lt;/h3&gt;
&lt;p&gt;Service is reliable if it works when it&amp;rsquo;s expected to be working and provides timely feedback in case of any&amp;nbsp;problems. &lt;/p&gt;
&lt;p&gt;Worst performance problems I encountered were with export services. One of them was working perfectly fine until the biggest organization in the system started using it and crashing application servers. Hot-fixes after hot-fixes, optimizations, new version; nothing helped. And we couldn&amp;rsquo;t disable that service or completely rewrite its public &lt;span class="caps"&gt;API&lt;/span&gt; because of contractual&amp;nbsp;obligations.&lt;/p&gt;
&lt;p&gt;So, what if your service experiences problems? How external users will learn about it? Will there be any alert about temporary issues or downtimes? Any resolution time frames? Usually, there is a special web page with answers to these question, with a table like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="API status table" src="https://aviskase.github.io/articles/2019/09/02/your-api-is-your-public-image/api_status.png"&gt;&lt;/p&gt;
&lt;p&gt;And beware, this page should not on the same infrastructure as the services it&amp;rsquo;s showing! It would be quite embarrassing if &lt;a href="https://twitter.com/awscloud/status/836656664635846656"&gt;it goes down at the same time your services go down&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Crappy&amp;nbsp;Usability&lt;/h3&gt;
&lt;p&gt;When we hear the word &amp;ldquo;usability&amp;rdquo;, we usually think about &lt;span class="caps"&gt;GUI&lt;/span&gt;: buttons and dialogs. I think &lt;span class="caps"&gt;GUI&lt;/span&gt; usability is somewhat overrated: even in the ugliest app you can guess your way by trial and error. With &lt;span class="caps"&gt;API&lt;/span&gt; it won&amp;rsquo;t&amp;nbsp;work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No public documentation? Users will never even know that &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;exists.&lt;/li&gt;
&lt;li&gt;Public documentation is there, but there is no info about actual endpoints? Users won&amp;rsquo;t be able to call &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Public documentation is there, but written in such manner that without knowing internal docs you can&amp;rsquo;t understand a thing? Again, users won&amp;rsquo;t be happy at&amp;nbsp;all.&lt;/li&gt;
&lt;li&gt;Spelling mistakes? Not that critical if in text, but can be quite awful in schemes. Real support&amp;nbsp;ticket:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Your developers drink too much and it impairs their accuracy. There is an epic fail in a scheme with the name of the element &lt;code&gt;Pressure&lt;/code&gt;: the first letter is a Cyrillic character and it breaks all client code&amp;nbsp;generation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Cyrillic &lt;code&gt;Р/р&lt;/code&gt;  (pronounced like &amp;ldquo;r&amp;rdquo;) looks exactly like Latin &lt;code&gt;P/p&lt;/code&gt;. &lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Service works fine, but error messages are not that informative? Users won&amp;rsquo;t understand how to fix an error (and probably will open a support ticket, so you&amp;rsquo;ll needlessly spend time resolving non-existing&amp;nbsp;issue).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Unhelpful error message" src="https://aviskase.github.io/articles/2019/09/02/your-api-is-your-public-image/bad_error_message.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You have &lt;span class="caps"&gt;UI&lt;/span&gt; and &lt;span class="caps"&gt;API&lt;/span&gt;? Don&amp;rsquo;t forget to check they correspond to each other. The most common problem is when constraints on &lt;span class="caps"&gt;UI&lt;/span&gt; fields don&amp;rsquo;t match same fields in &lt;span class="caps"&gt;API&lt;/span&gt;: for example, &lt;span class="caps"&gt;UI&lt;/span&gt; can accept maximum 50 characters for the name and &lt;span class="caps"&gt;API&lt;/span&gt; only 20, which leads to errors when trying to export anything created on &lt;span class="caps"&gt;UI&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t forget about versionning (in &lt;span class="caps"&gt;API&lt;/span&gt; and its documentation). The older your services are, more careful you should be with incompatible changes. Documentation should always be up-to-date: sounds obvious, but we had a big fuck up when someone accidentally published documentation for upcoming &lt;span class="caps"&gt;API&lt;/span&gt; version and external developers started trying to use these new features, didn&amp;rsquo;t find them, and bombed support team with &amp;ldquo;nothing works again&amp;rdquo;&amp;nbsp;tickets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Security&amp;nbsp;Holes&lt;/h3&gt;
&lt;p&gt;When you publish &lt;span class="caps"&gt;API&lt;/span&gt; you also increase a potential attack surface for hackers. First of all, think about authorization and authentication processes. Typically, there are special access tokens for &lt;span class="caps"&gt;API&lt;/span&gt; users. Maybe simple developers&amp;rsquo; tokens will be enough for your case, maybe you&amp;rsquo;ll need to use flows like OAuth. In some cases you should sign requests and&amp;nbsp;responses.&lt;/p&gt;
&lt;p&gt;Oftentimes there are several APIs: for example, test &lt;span class="caps"&gt;API&lt;/span&gt; (for internal developers and testers) and open public &lt;span class="caps"&gt;API&lt;/span&gt;. You should make sure that test &lt;span class="caps"&gt;API&lt;/span&gt; is secured enough. There are known cases when web crawlers accidentally found test endpoints and happily showed them in search&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;If you provide access to test &lt;span class="caps"&gt;API&lt;/span&gt; to external developers, you&amp;rsquo;d better treat this &lt;span class="caps"&gt;API&lt;/span&gt; as high security risk. One time I found a stackoverflow question with code snippet containing authorization keys and proper endpoints for our&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;One open source project I used had a different issue. Test &lt;span class="caps"&gt;API&lt;/span&gt; was used by developers to help with testing: add money to the account, change account status to premium, etc. It was hidden and secure&amp;hellip; Until someone released a version with these APIs enabled in production. That&amp;rsquo;s bad&amp;nbsp;:)&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After reading all of these, you&amp;rsquo;d think that public APIs are too risky, challenging, and expensive. Perhaps, it&amp;rsquo;s better not to provide it? Maybe. But global connectivity is a trend. Stable and useful &lt;span class="caps"&gt;API&lt;/span&gt; can facilitate your profits: it can increase your user base via external apps or advertise your workplace to professionals. It&amp;rsquo;s a demanding work, but it pays&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;And even if you don&amp;rsquo;t and won&amp;rsquo;t have public &lt;span class="caps"&gt;API&lt;/span&gt;, think about your private ones. We should care about your own developers, shouldn&amp;rsquo;t&amp;nbsp;we? &lt;/p&gt;</content></entry><entry><title>Revision: Testers in This World</title><link href="https://aviskase.github.io/articles/2019/08/26/revision-testers-in-this-world/" rel="alternate"></link><published>2019-08-26T00:00:00-04:00</published><updated>2019-08-26T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2019-08-26:/articles/2019/08/26/revision-testers-in-this-world/</id><summary type="html">&lt;p&gt;Recently I&amp;rsquo;ve remembered &lt;a href="https://aviskase.github.io/articles/2018/01/23/testers-in-this-world/"&gt;my old article&lt;/a&gt; and wondered, how much my thoughts  have changed and how they align to the principles of context-driven and modern testing (and yes, I don&amp;rsquo;t see them as contradicting each&amp;nbsp;other).&lt;/p&gt;
&lt;p&gt;It looks like there are two main themes in that&amp;nbsp;article.&lt;/p&gt;
&lt;h2&gt;Theme …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Recently I&amp;rsquo;ve remembered &lt;a href="https://aviskase.github.io/articles/2018/01/23/testers-in-this-world/"&gt;my old article&lt;/a&gt; and wondered, how much my thoughts  have changed and how they align to the principles of context-driven and modern testing (and yes, I don&amp;rsquo;t see them as contradicting each&amp;nbsp;other).&lt;/p&gt;
&lt;p&gt;It looks like there are two main themes in that&amp;nbsp;article.&lt;/p&gt;
&lt;h2&gt;Theme One: Finding a Job as a&amp;nbsp;Tester&lt;/h2&gt;
&lt;p&gt;A bit of a background: when I was writing that piece, I was in depression. That&amp;rsquo;s a different story about development culture and its effect on one&amp;rsquo;s mind, but I&amp;rsquo;ll write about it sometime later. So, depression. And a bit of worrying about getting the first job locally in&amp;nbsp;Canada.&lt;/p&gt;
&lt;p&gt;No wonder that rereading the article now feel like the main takeaway was &amp;ldquo;software development is a shitty business, whatever progress will be made, there will be still more than enough companies to hire testers.&amp;rdquo; And I won&amp;rsquo;t argue &lt;em&gt;the last part.&lt;/em&gt; Modern testing principles are things to strive for, but my experience so far tells me that it&amp;rsquo;s too optimistic to assume that &lt;em&gt;all&lt;/em&gt; companies will end up there. So, there will be enough companies who will lag behind. Ergo, there will be enough positions for &lt;em&gt;any&lt;/em&gt; testers. Even for mindless test case&amp;nbsp;executors. &lt;/p&gt;
&lt;p&gt;Now, the question is, do I &lt;em&gt;want&lt;/em&gt; to work in such companies? &lt;strong&gt;No.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If I would want to continue as a tester-generalist, without specializing in some future-proof niches like pentest or perftest (at least, they seem to be future-proof), a sweet spot would be companies closer on a way to the &amp;ldquo;tester-less&amp;rdquo; transformation, but still needing some help on that way. Will there be enough such companies? Probably, yes. Getting position will be definitely harder but not&amp;nbsp;impossible.&lt;/p&gt;
&lt;h2&gt;Theme Two: Clay&amp;nbsp;Metaphor&lt;/h2&gt;
&lt;p&gt;Nowadays I agree even more with the metaphor I came up with in that article. Yes, we are a clay or a sealing foam. We, testers, should help others in improving quality. That means that our work is immensely context-dependent: different organizations need different &amp;ldquo;holes&amp;rdquo; to&amp;nbsp;seal. &lt;/p&gt;
&lt;p&gt;But we can go on even further with this metaphor: make it&amp;rsquo;s not just a clay, but a sci-fi fancy-shmancy clay which heals holes and scabs when applied. Yup, that means that after some time we won&amp;rsquo;t be needed in this organization; that&amp;rsquo;s fine. You can move to some other position where your experience being adaptable and generalizing could be of assistance. Or you can find other organization and kill testing position there&amp;nbsp;too. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;As a result, while some wording was off, core principles still sound ok to me: adapt, help&amp;amp;heal, move&amp;nbsp;on.&lt;/p&gt;</content></entry><entry><title>Lasha Tumbai or rm -rf RU</title><link href="https://aviskase.github.io/articles/2019/08/08/lasha-tumbai-or-rm-rf-ru/" rel="alternate"></link><published>2019-08-08T23:51:52-04:00</published><updated>2019-08-08T23:51:52-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2019-08-08:/articles/2019/08/08/lasha-tumbai-or-rm-rf-ru/</id><summary type="html">&lt;p&gt;Just a quick note: I&amp;rsquo;ve switched to Pelican site generator, because ruby-shuby decided not to work. Unfortunately, switching and preserving multi-language support is cumbersome. So, I&amp;rsquo;ve decided to ditch &lt;span class="caps"&gt;RU&lt;/span&gt; version. For what it&amp;rsquo;s worth, I moved to Canada and no longer really interested in trying to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a quick note: I&amp;rsquo;ve switched to Pelican site generator, because ruby-shuby decided not to work. Unfortunately, switching and preserving multi-language support is cumbersome. So, I&amp;rsquo;ve decided to ditch &lt;span class="caps"&gt;RU&lt;/span&gt; version. For what it&amp;rsquo;s worth, I moved to Canada and no longer really interested in trying to &amp;ldquo;promote&amp;rdquo; myself in Russian speaking&amp;nbsp;communities.&lt;/p&gt;
&lt;p&gt;Yeah, yeah, &amp;ldquo;promote&amp;rdquo;, &amp;mdash; written by a person who hasn&amp;rsquo;t write &lt;em&gt;anything&lt;/em&gt; for ages.&amp;nbsp;Right.&lt;/p&gt;
&lt;p&gt;Whoever read this blog in Russian, sorry. And, actually, I know that there were more traffic from &lt;span class="caps"&gt;CIS&lt;/span&gt; than from any other region &amp;gt;&amp;lt; But, two languages makes it too complicated and procrastinating to write in consistent manner &lt;em&gt;(hysterical&amp;nbsp;laugh).&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Зыс ис зе&amp;nbsp;энд.&lt;/p&gt;</content></entry><entry><title>Amazing Marvin for Task Management</title><link href="https://aviskase.github.io/articles/2019/07/30/amazing-marvin-for-task-management/" rel="alternate"></link><published>2019-07-30T00:00:00-04:00</published><updated>2019-07-30T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2019-07-30:/articles/2019/07/30/amazing-marvin-for-task-management/</id><summary type="html">&lt;p&gt;I&amp;rsquo;m an infrequent blogger, so how weird it is that my last post was about &lt;span class="caps"&gt;RTM&lt;/span&gt;? I was a loyal &lt;span class="caps"&gt;RTM&lt;/span&gt; user for quite a time&amp;hellip; Well, I have a new love now. His name is &lt;a href="https://www.amazingmarvin.com/"&gt;Marvin&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Marvin is still young, yet powerful. He has some problems and rough …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;rsquo;m an infrequent blogger, so how weird it is that my last post was about &lt;span class="caps"&gt;RTM&lt;/span&gt;? I was a loyal &lt;span class="caps"&gt;RTM&lt;/span&gt; user for quite a time&amp;hellip; Well, I have a new love now. His name is &lt;a href="https://www.amazingmarvin.com/"&gt;Marvin&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Marvin is still young, yet powerful. He has some problems and rough corners, but development couple (yes, just 2 persons!) is the most responsive and creative force I&amp;rsquo;ve seen. I&amp;rsquo;m still learning and tweaking my system there, but I want to describe the first working iteration to be able to improve and compare&amp;nbsp;later.&lt;/p&gt;
&lt;h2&gt;Enabled&amp;nbsp;Strategies&lt;/h2&gt;
&lt;p&gt;Strategies are like extensions: add more to have more&amp;nbsp;abilities.&lt;/p&gt;
&lt;h2&gt;Essential&lt;/h2&gt;
&lt;p&gt;Because these are essential, I&amp;rsquo;ll explain their usage&amp;nbsp;later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Category Context (big square, also beneath title, show full&amp;nbsp;path)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task&amp;nbsp;Notes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Labels&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Timers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backburner (no&amp;nbsp;setup)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Planning&amp;nbsp;Ahead&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smart&amp;nbsp;Lists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom&amp;nbsp;Sidebar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Top Mini&amp;nbsp;List&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom&amp;nbsp;Sections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;End Dates (show end dates below the&amp;nbsp;task)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start&amp;nbsp;Dates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work Session&amp;nbsp;Scheduler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Saved Items&amp;nbsp;(Templates)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smart List Day&amp;nbsp;Alerts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auto-schedule Due Tasks (cutoff = 1&amp;nbsp;day)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Staleness Warning (period = 40&amp;nbsp;days)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Email to&amp;nbsp;Marvin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zapier&amp;nbsp;Integration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review&amp;nbsp;Date&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weekly&amp;nbsp;Review&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Extras&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eat that Frog (just 2 frog levels) &amp;mdash; nice to have, but I don&amp;rsquo;t use it as intended (I tend to assign a frog to the bad tasks, but I don&amp;rsquo;t do them&amp;nbsp;first)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task Reminders (create automatically) &amp;mdash; very important feature, but less powerful than in &lt;span class="caps"&gt;RTM&lt;/span&gt; for now (cannot create multiple reminders). Though, I have a feeling that with proper review system I actually don&amp;rsquo;t need reminders that much&amp;nbsp;now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Duration Estimates &amp;mdash; I&amp;rsquo;m experimenting with having estimates for all tasks, but so far don&amp;rsquo;t feel it increases&amp;nbsp;productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time Tracking (show &amp;gt; in title) &amp;mdash; goes hand in hand with duration estimates, feels needed but not&amp;nbsp;essential&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beat The Clock &amp;mdash; same as time tracking, still experimenting with&amp;nbsp;it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project Focus Picker &amp;mdash; just started to use it; at least it works as an &amp;ldquo;eye  bugger&amp;rdquo; to push me to work on&amp;nbsp;project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Suggested Task &amp;mdash; never used it really, but something about it feels good&amp;nbsp;&amp;gt;&amp;lt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Wall &amp;mdash; using it occasionally, would like to have block division by&amp;nbsp;section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Day Progress Bar &amp;mdash; I don&amp;rsquo;t know why I enabled&amp;nbsp;it &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Procrastination Count (default) &amp;mdash; important but not&amp;nbsp;essential&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Missing Next Steps Warning &amp;mdash; important, but not very used much at the&amp;nbsp;moment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Day Note (with archive) &amp;mdash; nice to have, but I&amp;rsquo;m not very good at keeping a habit to write (as can be guessed by this blog updates&amp;nbsp;frequency)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calendar, Calendar Sync, All-Day Items, Top Mini List &amp;mdash; I&amp;rsquo;ll have a whole calendar workflow moved to &lt;span class="caps"&gt;AM&lt;/span&gt; as soon as these will work with Google Calendar and Outlook. Until then, I have to go to&amp;nbsp;calendars.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dashboard &amp;mdash; I like it, but not sure that I need&amp;nbsp;it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reward Tasks &amp;mdash; awesome feature which I&amp;rsquo;ve never used. Dunno&amp;nbsp;why. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Planning and Scheduling&amp;nbsp;Cycle&lt;/h2&gt;
&lt;p&gt;My &lt;span class="caps"&gt;PS&lt;/span&gt; cycle has three&amp;nbsp;phases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Monthly&amp;nbsp;planning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weekly&amp;nbsp;planning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Daily&amp;nbsp;scheduling&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice difference between planning and scheduling? This is because &lt;span class="caps"&gt;AM&lt;/span&gt; has a bit head-scratching at first, but really powerful distinction between these processes. In short, &lt;em&gt;planning&lt;/em&gt; is about assigning &lt;em&gt;start date&lt;/em&gt; and &lt;em&gt;end date&lt;/em&gt; (&amp;ldquo;soft deadline&amp;rdquo;) and &lt;em&gt;scheduling&lt;/em&gt; is about assigning a &lt;em&gt;do date&lt;/em&gt; (&amp;ldquo;when should I do this task&amp;rdquo;). Also, there can be a &lt;em&gt;due date&lt;/em&gt;, it&amp;rsquo;s not quite clear is it planning or scheduling category. I think both, because I use &lt;strong&gt;Auto-schedule Due Tasks&lt;/strong&gt; strategy. For example, if something is due tomorrow, this task will have a do date =&amp;nbsp;today.&lt;/p&gt;
&lt;h3&gt;Monthly&amp;nbsp;Planning&lt;/h3&gt;
&lt;p&gt;I have a recurring task &lt;em&gt;Plan tasks for the next month&lt;/em&gt;, which is setup to run monthly on the 31&lt;sup&gt;st&lt;/sup&gt; day. To complete this task I go to &lt;strong&gt;Planning &amp;gt; Monthly&lt;/strong&gt; and plan tasks &lt;strong&gt;only&lt;/strong&gt; for the next month while working from &lt;em&gt;Master List&lt;/em&gt;. I don&amp;rsquo;t want to overplan too much into the future.  What can be changed is maybe I should work from some smart list, but so far I don&amp;rsquo;t have too many tasks in &lt;span class="caps"&gt;ML&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Weekly&amp;nbsp;Planning&lt;/h3&gt;
&lt;p&gt;This is a &lt;strong&gt;Weekly Review&lt;/strong&gt; strategy with checklist scheduled to be done on Sundays. Checklist is a combination of weekly planning and everyday review&amp;nbsp;stuff.&lt;/p&gt;
&lt;h4&gt;Reformulate Task Names Left in Today&amp;nbsp;Pool&lt;/h4&gt;
&lt;p&gt;Done on: Daily&amp;nbsp;view&lt;/p&gt;
&lt;p&gt;This is a part from Jedi techniques, which goal is to rename tasks you didn&amp;rsquo;t complete for some reason. That way the next day they will look &amp;ldquo;fresher&amp;rdquo; or more inviting to&amp;nbsp;you.&lt;/p&gt;
&lt;h4&gt;Review Calendars for 2 Weeks Ahead: Add Tasks If&amp;nbsp;Needed&lt;/h4&gt;
&lt;p&gt;Done on: external sites, tasks are added to&amp;nbsp;inbox&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;birthdays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;special all day events like&amp;nbsp;holidays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;work&amp;nbsp;meetings&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, it&amp;rsquo;s something that is not really actionable, but has a day and duration. This is what I want to do in &lt;span class="caps"&gt;AM&lt;/span&gt; in the future, when calendar sync works&amp;nbsp;better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Smart list&lt;/strong&gt; with all calendar events in the next 2 weeks (to use for weekly&amp;nbsp;planning)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Top Mini List&lt;/strong&gt; strategy showing upcoming birthdays in the next 3&amp;nbsp;days&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Depending on how &lt;span class="caps"&gt;AM&lt;/span&gt; will show calendar events (probably as tasks which have to be completed, which is a bit unnecessary for me), maybe all of them should be shown in &lt;strong&gt;Top Mini&amp;nbsp;List&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Right now what I use is a &lt;strong&gt;Custom Sidebar&lt;/strong&gt; with links to my google and outlook&amp;nbsp;calendars.&lt;/p&gt;
&lt;h4&gt;Reflect on Completed Week: Do I Need to Do&amp;nbsp;More?&lt;/h4&gt;
&lt;p&gt;Done on: Archive, tasks are added to&amp;nbsp;inbox&lt;/p&gt;
&lt;p&gt;Go to &lt;strong&gt;Archive&lt;/strong&gt; and check what was done this week. It&amp;rsquo;s a bit cumbersome, because it shows tasks per month and not per week. In &lt;span class="caps"&gt;RTM&lt;/span&gt; I&amp;rsquo;ve used a smart list for that, but &lt;span class="caps"&gt;AM&lt;/span&gt; does not support searching completed tasks&amp;nbsp;(yet).&lt;/p&gt;
&lt;p&gt;Other way is to click through daily views, but for me it&amp;rsquo;s too many&amp;nbsp;clicks)&lt;/p&gt;
&lt;h4&gt;Review Start Dates for Backburner Tasks&amp;nbsp;(Smartlist)&lt;/h4&gt;
&lt;p&gt;Done one: Master List,  work from&amp;nbsp;smartlist&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Smartlist&lt;/strong&gt;: &lt;code&gt;any start date, on backburner&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I use backburner only for tasks which are &lt;strong&gt;dependent&lt;/strong&gt; on others or with &lt;strong&gt;start date&lt;/strong&gt; in the future. I try to be very strict with start dates and set them only if it really makes sense, for example: getting a vaccine boost shot in Dec 2028 has a start date in Sept 2028, because I don&amp;rsquo;t want this task to pollute my planning all these years. Another use for start dates is for sub-project, like 3-day long learning session, which is part of a project without start date (because I want to do some preparatory tasks before session&amp;nbsp;starts). &lt;/p&gt;
&lt;p&gt;So, in order to keep backburner in check, I review it once in week. Now that I think about it, maybe I should have an alert about tasks which does not have start date and are not dependent, but are in backburner&amp;hellip;? But more on alerts later&amp;nbsp;=)&lt;/p&gt;
&lt;h4&gt;Review All Projects: Add New Tasks If Needed&amp;nbsp;(Smartlist)&lt;/h4&gt;
&lt;p&gt;Done on: Master List, work from&amp;nbsp;smartlist&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Smartlist&lt;/strong&gt;:&amp;nbsp;Projects&lt;/p&gt;
&lt;p&gt;I had to create a smart list to show all projects, because I wanted to see backburner&amp;rsquo;s&amp;nbsp;too.&lt;/p&gt;
&lt;h4&gt;Recall This Day: Write down Everything Missed (Triggers/&amp;nbsp;Backwards-Day-Recall)&lt;/h4&gt;
&lt;p&gt;Done on: &lt;strong&gt;Sidebar&lt;/strong&gt;, tasks added to&amp;nbsp;inbox&lt;/p&gt;
&lt;p&gt;Two links in&amp;nbsp;Sidebar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;link to mind map containing&amp;nbsp;triggers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link to timer set for&amp;nbsp;20m&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triggers are things which can be used to recall what was forgotten. For example, one of the subtrees in my mindmap contains all types of utilities or all kinds of cleaning which could be&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;Backwards day recall is a technique also used to recall things. You sit down and try to remember today in detail in backwards: from now to the&amp;nbsp;morning.&lt;/p&gt;
&lt;h4&gt;Empty Inboxes: Paper, GMail, Outlook, Joplin, &lt;span class="caps"&gt;AM&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;Categorize everything and clean up all inboxes I can have. First go with paper notes, then emails (gmail + outlook), then note taking application (for now it&amp;rsquo;s Joplin), and finally &lt;span class="caps"&gt;AM&lt;/span&gt; category &lt;em&gt;Inbox&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you see something that should be planned for this month, set it right&amp;nbsp;away.&lt;/p&gt;
&lt;h4&gt;Plan Tasks for the Next Week (Selecting from This&amp;nbsp;Month)&lt;/h4&gt;
&lt;p&gt;Done on: &lt;strong&gt;Planning &amp;gt; Weekly&lt;/strong&gt;, working from &lt;em&gt;This month&lt;/em&gt;&amp;nbsp;list&lt;/p&gt;
&lt;p&gt;Because everything was planned for &lt;em&gt;this month&lt;/em&gt;, I can just bring relevant tasks to next&amp;nbsp;week.&lt;/p&gt;
&lt;h4&gt;Schedule Tasks for Monday by Checking Next Week&amp;nbsp;List&lt;/h4&gt;
&lt;p&gt;Done on: Daily view for tomorrow, working from &lt;em&gt;This week&lt;/em&gt;&amp;nbsp;list&lt;/p&gt;
&lt;h3&gt;Daily&amp;nbsp;Scheduling&lt;/h3&gt;
&lt;p&gt;Because there is no &amp;ldquo;Daily review&amp;rdquo; strategy yet, I have a recurring task for that. It repeats every Wed and Fri, just because I&amp;rsquo;m still getting accustomed to always do it. When I&amp;rsquo;m ready, it will be repeated every day except for Sunday, where weekly review is&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;Checklist is a subset of weekly&amp;nbsp;review:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reformulate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reflect on Completed&amp;nbsp;Today&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;recall this&amp;nbsp;day&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;empty&amp;nbsp;inboxes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;schedule tasks for the next&amp;nbsp;day&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Extras&lt;/h2&gt;
&lt;h3&gt;Categories&lt;/h3&gt;
&lt;p&gt;Main:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inbox&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Household &amp;mdash; tasks related to house or&amp;nbsp;family&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hobbies  &amp;mdash; anything related to my hobbies, learning, and&amp;nbsp;reading&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reputation &amp;mdash; quite new for me, this is for tasks related to my &lt;em&gt;external image&lt;/em&gt;. Participating in open source projects, buying birthday gifts, writing blog, answering some emails. Sometimes there is no clear distinction between hobbies and this category, so it&amp;rsquo;s&amp;nbsp;fluid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Health&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Productivity &amp;mdash; tasks like everyday review or cleaning up overflown inboxes. I suppose calendar sync will go there&amp;nbsp;too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sections&lt;/h3&gt;
&lt;p&gt;I use &lt;strong&gt;Custom Sections&lt;/strong&gt;&amp;nbsp;strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Morning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work &amp;mdash; linked to smartlist which finds all tasks/projects &lt;code&gt;in #Work&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outside &amp;mdash; linked to smartlist which finds all tasks/projects which &lt;code&gt;has @outside&lt;/code&gt; label&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evening&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Morning and Evening tasks are essentials, while Bonus ones are nice to do. Outside tasks are for stuff where I need to go somewhere, like shopping errands. I&amp;rsquo;m still not hard set on these categories, except for Work, this one will definitely&amp;nbsp;stay.&lt;/p&gt;
&lt;h3&gt;Alerts&lt;/h3&gt;
&lt;p&gt;I use &lt;strong&gt;Smart List Day Alerts&lt;/strong&gt; strategy for finding and fixing potential planning&amp;nbsp;problems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New items pulled from backburner &amp;mdash; reminder to check items with &lt;code&gt;*new&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stale &amp;mdash; review items with &lt;code&gt;*stale&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To review (waiting or pinged) &amp;mdash; some tasks are ready to&amp;nbsp;review)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This week unestimated &amp;mdash; add estimation for all tasks, smartlist: &lt;code&gt;Tasks, no time estimate, &amp;amp;thisWeek scheduleDate today == ||&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Review&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Review date&lt;/strong&gt; strategy is not the best name for my usage. I use it for tasks which are not done by&amp;nbsp;me. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tag &lt;em&gt;waiting&lt;/em&gt; (3 day) &amp;mdash; for long waiting&amp;nbsp;tasks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tag &lt;em&gt;ping&lt;/em&gt; (1 day) &amp;mdash; reminds me ask someone everyday if s/he finished the&amp;nbsp;task&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Occasional&amp;nbsp;Tasks&lt;/h3&gt;
&lt;p&gt;I was not able to setup this correctly in &lt;span class="caps"&gt;AM&lt;/span&gt; yet, so I&amp;rsquo;m using some hacks around it. Basically, these are tasks which I want to do every 15-40 days, without specifying exact day. One of the tasks is &lt;em&gt;Productivity system review&lt;/em&gt;. It has a note with questions which I ask while going through all my tasks and&amp;nbsp;projects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Is it really mine? Maybe&amp;nbsp;delegate?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is there any real profit from this&amp;nbsp;task?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maybe it&amp;rsquo;s possible to do some other task so that this one becomes&amp;nbsp;obsolete?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is there any easier way to do&amp;nbsp;it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do I really still need to do&amp;nbsp;it?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Goal is to remove or reformulate&amp;nbsp;tasks.&lt;/p&gt;
&lt;h2&gt;Ending&amp;nbsp;Thoughts&lt;/h2&gt;
&lt;p&gt;Of course this is just a small part of &lt;span class="caps"&gt;AM&lt;/span&gt; experience. I like being able to create work sessions for working on projects in pomodorro-style chunks. Templates are awesome and I use them for mindful book reading projects (reading, making notes, transferring them to Joplin). Gamification abilities are cute and I will explore them more, when I&amp;rsquo;ll be more comfortable and less&amp;nbsp;procrastinating.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve noticed that features which were very important to me in &lt;span class="caps"&gt;RTM&lt;/span&gt;, like tagging, are not so needed here. Here you can have categories, sections, do/due/end dates, projects to achieve similar goals. This granularity and specificity are the most awesome aspect of &lt;span class="caps"&gt;AM&lt;/span&gt;!&lt;/p&gt;</content></entry><entry><title>Remember The Milk for Task Management</title><link href="https://aviskase.github.io/articles/2018/03/20/remember-the-milk-for-task-management/" rel="alternate"></link><published>2018-03-20T00:00:00-04:00</published><updated>2018-03-20T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2018-03-20:/articles/2018/03/20/remember-the-milk-for-task-management/</id><summary type="html">&lt;p&gt;Today I received a letter from &lt;a href="https://www.rememberthemilk.com/"&gt;Remember The Milk&lt;/a&gt; that I had won a free year of Pro. That&amp;rsquo;s great, yet I feel a bit sad because somehow everyone talks about every other todo app and not &lt;span class="caps"&gt;RTM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using &lt;span class="caps"&gt;RTM&lt;/span&gt; for several years. First, with free …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I received a letter from &lt;a href="https://www.rememberthemilk.com/"&gt;Remember The Milk&lt;/a&gt; that I had won a free year of Pro. That&amp;rsquo;s great, yet I feel a bit sad because somehow everyone talks about every other todo app and not &lt;span class="caps"&gt;RTM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using &lt;span class="caps"&gt;RTM&lt;/span&gt; for several years. First, with free account, later with Pro. And it&amp;rsquo;s a &lt;em&gt;second&lt;/em&gt; time I won a Pro :) &lt;span class="caps"&gt;RTM&lt;/span&gt; is great. For me, four killer features&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start dates and due&amp;nbsp;dates&lt;/li&gt;
&lt;li&gt;Very customizable repeat&amp;nbsp;options&lt;/li&gt;
&lt;li&gt;Really smart add syntax (you can input everything as one-liner and all task fields will be&amp;nbsp;populated)&lt;/li&gt;
&lt;li&gt;Smart lists (basically, it&amp;rsquo;s saved searches with operators like &lt;code&gt;tag:&lt;/code&gt; and logic control with &lt;code&gt;AND&lt;/code&gt;/&lt;code&gt;OR&lt;/code&gt;/&lt;code&gt;NOT&lt;/code&gt;/parentheses)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can implement any imaginable task management system with it. I use &lt;a href="http://blog.rememberthemilk.com/post/172085635648/tips-tricks-tuesday-combining-organization"&gt;a setup based on M.&amp;nbsp;Dorofeev&amp;rsquo;s approach&lt;/a&gt;.  Of course, specialized apps are probably a bit easier if you strictly follow rules of one &amp;ldquo;true&amp;rdquo; system, but with &lt;span class="caps"&gt;RTM&lt;/span&gt; you can do the heck you want any time you want. There is a bizarre development fashion to &amp;ldquo;box&amp;rdquo; users with constraints, to give no options. And for me &lt;span class="caps"&gt;RTM&lt;/span&gt; is a breeze of sane air of&amp;nbsp;freedom. &lt;/p&gt;</content></entry><entry><title>Mega Mind Map: Version #2</title><link href="https://aviskase.github.io/articles/2018/03/19/mega-mind-map-version-2/" rel="alternate"></link><published>2018-03-19T00:00:00-04:00</published><updated>2018-03-19T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2018-03-19:/articles/2018/03/19/mega-mind-map-version-2/</id><content type="html">&lt;p&gt;My &lt;a href="https://github.com/aviskase/mega-mind-map"&gt;not-so-mega mind map&lt;/a&gt; has grown a little bit. I finally added exploratory testing tours and ideas on how to make test cases less rigid, all that great stuff from &amp;ldquo;Exploratory Software Testing&amp;rdquo; by James A.&amp;nbsp;Whittaker.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mega mind map version 2" src="https://aviskase.github.io/articles/2018/03/19/mega-mind-map-version-2/mmm_v2.png"&gt;&lt;/p&gt;</content></entry><entry><title>Testers in This World</title><link href="https://aviskase.github.io/articles/2018/01/23/testers-in-this-world/" rel="alternate"></link><published>2018-01-23T00:00:00-05:00</published><updated>2018-01-23T00:00:00-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2018-01-23:/articles/2018/01/23/testers-in-this-world/</id><summary type="html">&lt;p&gt;Every tester saw those articles: &amp;ldquo;Testing is dead&amp;rdquo;, &amp;ldquo;Manual testing is dead&amp;rdquo;, &amp;ldquo;Testing is not dead&amp;rdquo;, &amp;ldquo;Automation is not testing&amp;rdquo;, &amp;ldquo;Company &lt;span class="caps"&gt;XXX&lt;/span&gt; has no testers and is happy about it&amp;rdquo;, etc. They might get on nerves. I love my craft, but sometimes something is nibbling at the back of my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every tester saw those articles: &amp;ldquo;Testing is dead&amp;rdquo;, &amp;ldquo;Manual testing is dead&amp;rdquo;, &amp;ldquo;Testing is not dead&amp;rdquo;, &amp;ldquo;Automation is not testing&amp;rdquo;, &amp;ldquo;Company &lt;span class="caps"&gt;XXX&lt;/span&gt; has no testers and is happy about it&amp;rdquo;, etc. They might get on nerves. I love my craft, but sometimes something is nibbling at the back of my mind. Something that keeps me wondering: maybe I should move to a different role? So, I unscrambled this &amp;ldquo;something&amp;rdquo; and found an explanation why these thoughts are there and why I won&amp;rsquo;t leave testing&amp;nbsp;=)&lt;/p&gt;
&lt;p&gt;Disclaimer: these thoughts are mine and I don&amp;rsquo;t have a goal to promote or impose them on other people. As a normal human being I do understand that my opinion may change with new experience and knowledge. This article contains a documented reflection on my experience so far. Probably it&amp;rsquo;ll be fun to read in 10-20 years (if I&amp;rsquo;ll still be a tester)&amp;nbsp;xD&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Ideal World of Software&amp;nbsp;Development&lt;/h2&gt;
&lt;p&gt;Imagine an ideal world of software development. Scope is clear. Everything is done on time in relaxed manner without rush. Everybody is motivated to create the best product. Everybody has happy life outside of work. No stress. Users are eager to help too. And all these aren&amp;rsquo;t just for one product, but true for all software in the world. Great, isn&amp;rsquo;t&amp;nbsp;it? &lt;/p&gt;
&lt;p&gt;Now, when I&amp;rsquo;m thinking about this &lt;em&gt;ideal&lt;/em&gt; world, I can&amp;rsquo;t find a place for testers in it. There is just no place for bugs. Developers and analysts have all the time to design and build a product without real bugs. Remember, they don&amp;rsquo;t have just a time, they&amp;rsquo;re also motivated, so they definitively test product. They do it themselves&amp;hellip; so there is no need for a &lt;em&gt;separate&lt;/em&gt; role of a&amp;nbsp;tester.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s visualize this tester-less world as a perfect&amp;nbsp;disk:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ideal world of development" src="https://aviskase.github.io/articles/2018/01/23/testers-in-this-world/world_1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Real World of Software&amp;nbsp;Development&lt;/h2&gt;
&lt;p&gt;But our current world is not ideal. No one has enough time. Overtimes. Burning out. Problems outside work. Toxic environment. No motivation. Some rogue manager keeps adding features out of scope. And bugs, bugs everywhere. This world is distorted, some products are a bit better than others, but no one is&amp;nbsp;perfect.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Real world of development" src="https://aviskase.github.io/articles/2018/01/23/testers-in-this-world/world_2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Testers in the Real World of Software&amp;nbsp;Development&lt;/h2&gt;
&lt;p&gt;And that&amp;rsquo;s where testers are coming. We are like clay, like sealing foam. We patch this not-ideal world. We make it less&amp;nbsp;distorted.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Real world of development with testers" src="https://aviskase.github.io/articles/2018/01/23/testers-in-this-world/world_3.png"&gt;&lt;/p&gt;
&lt;p&gt;All products are distorted in different ways, that&amp;rsquo;s why you can see testers doing all kind of things. Some are just &amp;ldquo;manual monkeys.&amp;rdquo; On a different extreme are those who automate test cases that are written by others. Most are somewhere in between. There are projects where testers have a hat of analytic. Or support. Or both. Or &lt;span class="caps"&gt;PM&lt;/span&gt;. Someone, maybe gurus, don&amp;rsquo;t test at all: they mentor a team to test themselves, control that quality is efficiently insured by&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;Here is a fun fact. That patched version is still a lie. Testers are also not perfect. Thus, our world looks more like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Even more real world of development with testers" src="https://aviskase.github.io/articles/2018/01/23/testers-in-this-world/world_4.png"&gt;&lt;/p&gt;
&lt;p&gt;We can&amp;rsquo;t patch all holes. But we are here to&amp;nbsp;try.&lt;/p&gt;</content></entry><entry><title>2018 and Mega Mind Map</title><link href="https://aviskase.github.io/articles/2018/01/06/2018-and-mega-mind-map/" rel="alternate"></link><published>2018-01-06T00:00:00-05:00</published><updated>2018-01-06T00:00:00-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2018-01-06:/articles/2018/01/06/2018-and-mega-mind-map/</id><summary type="html">&lt;p&gt;Well, it&amp;rsquo;s been a while. I don&amp;rsquo;t want to make so called &amp;ldquo;new year resolutions&amp;rdquo;, but it&amp;rsquo;s better to add a repeating task in the &lt;span class="caps"&gt;RTM&lt;/span&gt; to write something here&amp;nbsp;xD&lt;/p&gt;
&lt;p&gt;2018 started shaky. I left my first real place of work &amp;mdash; Quality Lab &amp;mdash; Alma mater of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, it&amp;rsquo;s been a while. I don&amp;rsquo;t want to make so called &amp;ldquo;new year resolutions&amp;rdquo;, but it&amp;rsquo;s better to add a repeating task in the &lt;span class="caps"&gt;RTM&lt;/span&gt; to write something here&amp;nbsp;xD&lt;/p&gt;
&lt;p&gt;2018 started shaky. I left my first real place of work &amp;mdash; Quality Lab &amp;mdash; Alma mater of testing. This decision was heartbreaking, yet expected. On the bright side, now I have time to condition my brain into the normal mode again: for the last 1.5 year I wasn&amp;rsquo;t productive in studying and&amp;nbsp;reading.&lt;/p&gt;
&lt;p&gt;First step is my mega mind map. God bless &lt;a href="https://www.freeplane.org/"&gt;Freeplane&lt;/a&gt;, it&amp;rsquo;s awesome. Actually, it was a bit ugly, but now it&amp;rsquo;s looking good ;) So, &lt;span class="caps"&gt;MMM&lt;/span&gt;. It&amp;rsquo;s versioned with git and here is a &lt;a href="https://github.com/aviskase/mega-mind-map"&gt;repo&lt;/a&gt;. I have an impressive goal of documenting all testing techniques and approaches. Hope, I won&amp;rsquo;t drop it as&amp;nbsp;usual.&lt;/p&gt;
&lt;p&gt;Here is a first&amp;nbsp;iteration: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;ACC&lt;/span&gt; (Attributes / Components /&amp;nbsp;Capabilities)&lt;/li&gt;
&lt;li&gt;Decomposition&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;APV&lt;/span&gt; aka ДПЗ (Actions / Parameters /&amp;nbsp;Values)&lt;/li&gt;
&lt;li&gt;Value&amp;nbsp;analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Mega mind map version 1" src="https://aviskase.github.io/articles/2018/01/06/2018-and-mega-mind-map/mmm_v1.jpg"&gt;&lt;/p&gt;</content></entry><entry><title>Enabling L2TP/IPSec in Ubuntu</title><link href="https://aviskase.github.io/articles/2017/03/19/enabling-l2tpipsec-in-ubuntu/" rel="alternate"></link><published>2017-03-19T00:00:00-04:00</published><updated>2017-03-19T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2017-03-19:/articles/2017/03/19/enabling-l2tpipsec-in-ubuntu/</id><summary type="html">&lt;p&gt;Linux is like that: you can do anything, but sometimes it&amp;rsquo;s not easy for a common user. As for me, I hate writing config files for &lt;span class="caps"&gt;VPN&lt;/span&gt;, because network-manager is awesome. But sometimes it&amp;rsquo;s not easy to make it&amp;nbsp;work. &lt;/p&gt;
&lt;p&gt;The biggest problem for me is &lt;span class="caps"&gt;LT2PT&lt;/span&gt;/IPSec …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Linux is like that: you can do anything, but sometimes it&amp;rsquo;s not easy for a common user. As for me, I hate writing config files for &lt;span class="caps"&gt;VPN&lt;/span&gt;, because network-manager is awesome. But sometimes it&amp;rsquo;s not easy to make it&amp;nbsp;work. &lt;/p&gt;
&lt;p&gt;The biggest problem for me is &lt;span class="caps"&gt;LT2PT&lt;/span&gt;/IPSec. There is &lt;a href="http://blog.z-proj.com/enabling-l2tp-over-ipsec-on-ubuntu-16-04/"&gt;an excellent article&lt;/a&gt; on how to enable it using &lt;code&gt;network-manager-l2tp&lt;/code&gt;. But as on-line articles have a tendency to be removed, I want to save these instructions&amp;nbsp;here.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Install the&amp;nbsp;prerequisites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;intltool&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libtool&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libnm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libnm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;glib&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libnm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;glib&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vpn&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libnm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libnm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libnma&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;ppp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libdbus&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;glib&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libsecret&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libgtk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;libglib2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;xl2tpd&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;  
&lt;span class="n"&gt;strongswan&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get&amp;nbsp;network-manager-l2tp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l2tp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l2tp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;  
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l2tp&lt;/span&gt;  
&lt;span class="n"&gt;autoreconf&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fi&lt;/span&gt;  
&lt;span class="n"&gt;intltoolize&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configure the&amp;nbsp;build: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
  &lt;span class="c1"&gt;--disable-static --prefix=/usr \&lt;/span&gt;
  &lt;span class="c1"&gt;--sysconfdir=/etc --libdir=/usr/lib/x86_64-linux-gnu \&lt;/span&gt;
  &lt;span class="c1"&gt;--libexecdir=/usr/lib/NetworkManager \&lt;/span&gt;
  &lt;span class="c1"&gt;--localstatedir=/var \&lt;/span&gt;
  &lt;span class="c1"&gt;--with-pppd-plugin-dir=/usr/lib/pppd/2.4.7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;  
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remove AppArmor settings for&amp;nbsp;IPSec: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apparmor_parser&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apparmor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipsec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charon&lt;/span&gt;  
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apparmor_parser&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apparmor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipsec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stroke&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Replace x2ltpd with&amp;nbsp;libpcap: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;xl2tpd&lt;/span&gt;  
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libpcap0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;

&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xelerance&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xl2tpd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xl2tpd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;  
&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;xvzf&lt;/span&gt; &lt;span class="n"&gt;xl2tpd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;  
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;xl2tpd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;  
&lt;span class="n"&gt;make&lt;/span&gt;  
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Restart your machine,&amp;nbsp;profit.&lt;/p&gt;</content></entry><entry><title>Thoughts on “The ‘A’ Word”</title><link href="https://aviskase.github.io/articles/2016/07/30/thoughts-on-the-a-word/" rel="alternate"></link><published>2016-07-30T00:00:00-04:00</published><updated>2016-07-30T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2016-07-30:/articles/2016/07/30/thoughts-on-the-a-word/</id><summary type="html">&lt;p&gt;Alan Page is known as one of the authors of &amp;ldquo;How We Test Software at Microsoft&amp;rdquo;. But there is another good book and it&amp;rsquo;s called &amp;ldquo;The &amp;lsquo;A&amp;rsquo; Word&amp;rdquo;. You can buy it on &lt;a href="https://leanpub.com/TheAWord"&gt;LeanPub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The book is about automation in testing, but not how &lt;em&gt;to do&lt;/em&gt; it &amp;mdash; it&amp;rsquo;s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Alan Page is known as one of the authors of &amp;ldquo;How We Test Software at Microsoft&amp;rdquo;. But there is another good book and it&amp;rsquo;s called &amp;ldquo;The &amp;lsquo;A&amp;rsquo; Word&amp;rdquo;. You can buy it on &lt;a href="https://leanpub.com/TheAWord"&gt;LeanPub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The book is about automation in testing, but not how &lt;em&gt;to do&lt;/em&gt; it &amp;mdash; it&amp;rsquo;s about how &lt;em&gt;to think&lt;/em&gt; about it. It&amp;rsquo;s short, just 58 pages, but very dense with ideas and Alan&amp;rsquo;s&amp;nbsp;opinions.&lt;/p&gt;
&lt;p&gt;As I am not qualified to give an opinion on automation topics (because I don&amp;rsquo;t have much experience with it), I&amp;rsquo;ve just gathered some notes for future referencing. Sections are divided by&amp;nbsp;chapters.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes, testers use programming skills to help their testing. Sometimes, that code automates some application functionality. That&amp;rsquo;s&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Testing: Failing to&amp;nbsp;Succeed&lt;/h3&gt;
&lt;p&gt;There is a very famous concept called &amp;ldquo;Orders of Ignorance&amp;rdquo; introduced by Phillip Glen Armour (&lt;a href="https://www.researchgate.net/publication/27293624_The_five_orders_of_ignorance"&gt;more here&lt;/a&gt;). Chapter&amp;rsquo;s idea is that mostly tests are done on &lt;span class="caps"&gt;0OI&lt;/span&gt; level, but we should never forget about &lt;span class="caps"&gt;2OI&lt;/span&gt; test. &lt;span class="caps"&gt;0OI&lt;/span&gt; is a lack of ignorance (I know) and &lt;span class="caps"&gt;2OI&lt;/span&gt; is a lack of awareness (I don&amp;rsquo;t know what I don&amp;rsquo;t&amp;nbsp;know).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;0OI&lt;/span&gt; tests are &lt;em&gt;knowledge-proving&lt;/em&gt; tests, while &lt;span class="caps"&gt;2OI&lt;/span&gt; tests are &lt;em&gt;knowledge-acquiring&lt;/em&gt;&amp;nbsp;tests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;The Robots are Taking&amp;nbsp;Over&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Humans fail when they don&amp;rsquo;t use automation to solve problems impossible or impractical for manual&amp;nbsp;efforts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Automation fails when it tries to do or verify something that&amp;rsquo;s more suited for a human&amp;nbsp;evaluation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;To Automate&amp;nbsp;&amp;hellip;?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Good&lt;/em&gt; testers test first &amp;mdash; or at the very least they think of tests&amp;nbsp;first. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Great&lt;/em&gt; testers first think about how they&amp;rsquo;re going to approach a testing problem, then figure out what&amp;rsquo;s suitable for automation, and what&amp;rsquo;s not&amp;nbsp;suitable. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You should automate 100% of the tests that &lt;em&gt;should be&lt;/em&gt;&amp;nbsp;automated&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alan&amp;rsquo;s heuristic when to automate: &amp;ldquo;I&amp;rsquo;m&amp;nbsp;Bored&amp;rdquo;&lt;/p&gt;
&lt;h3&gt;The Coding&amp;nbsp;Tester&lt;/h3&gt;
&lt;p&gt;Summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the role of a coder-tester &lt;em&gt;is not&lt;/em&gt; to automate&amp;nbsp;everything&lt;/li&gt;
&lt;li&gt;testers &lt;em&gt;do not&lt;/em&gt; need to have a computer&amp;nbsp;science&lt;/li&gt;
&lt;li&gt;testers &lt;em&gt;do not&lt;/em&gt; need to be able to&amp;nbsp;program&lt;/li&gt;
&lt;li&gt;programming knowledge &lt;em&gt;does not&lt;/em&gt; destroy &amp;ldquo;a proper tester&amp;nbsp;angle&amp;rdquo;&lt;/li&gt;
&lt;li&gt;background similar to customer&amp;rsquo;s &lt;em&gt;does not&lt;/em&gt; make you a&amp;nbsp;customer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;Shmooey&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;For 95% of all software applications, directly automating the &lt;span class="caps"&gt;GUI&lt;/span&gt; is a waste of&amp;nbsp;time. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record, I typed 99% above first, then chickened&amp;nbsp;out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Design for &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;Automation&lt;/h3&gt;
&lt;p&gt;Alan&amp;rsquo;s main points for disliking &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;automation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s (typically) fragile &amp;mdash; tests tend to break / stop working / work unsuccessfully&amp;nbsp;often&lt;/li&gt;
&lt;li&gt;It rarely lasts through multiple versions of a project (another aspect of&amp;nbsp;fragility)&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s freakin&amp;rsquo; hard to automate &lt;span class="caps"&gt;UI&lt;/span&gt; (and keep track of state, verify,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;Available tools are weak to moderate (this is arguable, depending on what you want to do with the tools &amp;mdash; I&amp;rsquo;m particularly pleased, for example, with what good testers are able to do with selenium and web&amp;nbsp;driver).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I love &lt;span class="caps"&gt;GUI&lt;/span&gt; automation that can automatically explore variations of a &lt;span class="caps"&gt;GUI&lt;/span&gt; based task&amp;nbsp;flow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I like &lt;span class="caps"&gt;GUI&lt;/span&gt; automation is in stress or performance&amp;nbsp;issues.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;It&amp;rsquo;s (probably) a Design&amp;nbsp;Problem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Record &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Playback automation is a&amp;nbsp;non-starter&lt;/li&gt;
&lt;li&gt;Basic verification that would be hit by anyone walking through the basics of the application isn&amp;rsquo;t worth&amp;nbsp;automation&lt;/li&gt;
&lt;li&gt;Tests that do exactly the same thing every time are not&amp;nbsp;valuable&lt;/li&gt;
&lt;li&gt;Always think&amp;nbsp;forward&lt;/li&gt;
&lt;li&gt;Plan for failure and ensure that all test failures tell you exactly what is&amp;nbsp;wrong&lt;/li&gt;
&lt;li&gt;Tests should be&amp;nbsp;reliable&lt;/li&gt;
&lt;li&gt;There is always a better alternative to Sleep&amp;nbsp;statements&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;UI&lt;/span&gt; is fragile, its testability should&amp;nbsp;designed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;In the&amp;nbsp;Middle&lt;/h3&gt;
&lt;p&gt;Alan&amp;rsquo;s brainstorming technique: first spend a reasonable amount of time focusing on the extremes &amp;mdash; because often, some great ideas for &amp;ldquo;the middle&amp;rdquo; comes out of that&amp;nbsp;brainstorming. &lt;/p&gt;
&lt;h3&gt;Test Design for&amp;nbsp;Automation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The first step &amp;mdash; and most important &amp;mdash; is to think how you&amp;rsquo;re going to&amp;nbsp;test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;From that initial test design effort, you can deduce what aspects of testing could be accomplished more efficiently with automation (and&amp;nbsp;without).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Orchestrating Test&amp;nbsp;Automation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Designing good tests is one of the hardest tasks in software&amp;nbsp;development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;span class="caps"&gt;LOL&lt;/span&gt; &amp;mdash; &lt;span class="caps"&gt;UR&lt;/span&gt; &lt;span class="caps"&gt;AUTOMASHUN&lt;/span&gt; &lt;span class="caps"&gt;SUCKZ&lt;/span&gt;!&lt;/h3&gt;
&lt;p&gt;Your tests don&amp;rsquo;t&amp;nbsp;suck:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when you treat their code like a production code&lt;ul&gt;
&lt;li&gt;core&amp;nbsp;reviews&lt;/li&gt;
&lt;li&gt;static&amp;nbsp;analysis&lt;/li&gt;
&lt;li&gt;running with the debugger to ensure they are doing what you think they&amp;nbsp;are&lt;/li&gt;
&lt;li&gt;trust: if a test fails, it&amp;rsquo;s a product bug, not a test&amp;nbsp;bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;when they execute&amp;nbsp;automatically&lt;/li&gt;
&lt;li&gt;when failures are handled automatically&lt;ul&gt;
&lt;li&gt;bugs are entered automatically &amp;mdash; including logs, call stacks, screen shots, trace information, and other relevant&amp;nbsp;info&lt;/li&gt;
&lt;li&gt;when bug is fixed, it&amp;rsquo;s checked&amp;nbsp;automatically&lt;/li&gt;
&lt;li&gt;generation of &amp;ldquo;Test Result&amp;nbsp;Report&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Musings on Test&amp;nbsp;Design&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Some tests can only be run via some sort of test&amp;nbsp;automation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Some tests can only be done via human&amp;nbsp;interaction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t effectively think about automated testing separately from human&amp;nbsp;testing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In my world, there are no such things as automated testing, exploratory testing, manual testing,&amp;nbsp;etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;There is only&amp;nbsp;testing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Beyond Regression Tests &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Testing with&amp;nbsp;Code&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Useful tests are tests that provide new&amp;nbsp;information. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An automation strategy that only performs regression testing is short-sighted and&amp;nbsp;incomplete.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How to make test&amp;nbsp;useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;model-based&amp;nbsp;testing&lt;/li&gt;
&lt;li&gt;introducing some&amp;nbsp;randomness&lt;/li&gt;
&lt;li&gt;data driven&amp;nbsp;testing&lt;/li&gt;
&lt;li&gt;scaled fault&amp;nbsp;injection &lt;/li&gt;
&lt;li&gt;fuzzing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;More on Test&amp;nbsp;Design&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Test Design ideas are &lt;em&gt;endless.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;To be a &lt;em&gt;good&lt;/em&gt; test designer (and tester), you need a lot of testing ideas, and you need to know how and when to apply&amp;nbsp;them.&lt;/p&gt;
&lt;/blockquote&gt;</content></entry><entry><title>Notes for Course “Intro to Linux”</title><link href="https://aviskase.github.io/articles/2016/07/27/notes-for-course-intro-to-linux/" rel="alternate"></link><published>2016-07-27T00:00:00-04:00</published><updated>2016-07-27T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2016-07-27:/articles/2016/07/27/notes-for-course-intro-to-linux/</id><summary type="html">&lt;p&gt;If there is a Linux course on a platform, I&amp;rsquo;ll always watch it. Those who know me are aware that I am using some kind of Debian-based distributive full time &amp;mdash; I&amp;rsquo;m not a hardcore fan, but I like it here. One might ask: why am I watching all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If there is a Linux course on a platform, I&amp;rsquo;ll always watch it. Those who know me are aware that I am using some kind of Debian-based distributive full time &amp;mdash; I&amp;rsquo;m not a hardcore fan, but I like it here. One might ask: why am I watching all these courses when they are mostly for beginners? Answer is simple: repetition is the mother of learning, plus there are always some tricks that you forget or can become more interesting with&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;So it happened with &lt;a href="https://stepic.org/course/Введение-в-Linux-73"&gt;Intro to Linux&lt;/a&gt;(ru) on Russian platform Stepic. First, I&amp;rsquo;ve got month license for any JetBrains &lt;span class="caps"&gt;IDE&lt;/span&gt; by solving some exercises and that&amp;rsquo;s cool. Second, cute guys from Bioinformatics Institute made me adore tmux and almost persuaded to look at vim.&amp;nbsp;Almost.&lt;/p&gt;
&lt;p&gt;And now as usual, some notes to not to forget. If something looks like a magic: read books or watch some&amp;nbsp;course!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Run program in&amp;nbsp;background: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check if link is&amp;nbsp;available: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="c1"&gt;--spider somelink&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Download files by links from a text&amp;nbsp;file: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;some&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;textfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using arguments in&amp;nbsp;scripts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$#&lt;/code&gt; &amp;mdash; number of&amp;nbsp;arguments&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$0&lt;/code&gt; &amp;mdash; script&amp;nbsp;name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$1&lt;/code&gt; &amp;mdash; the first&amp;nbsp;argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$2&lt;/code&gt; &amp;mdash; the second&amp;nbsp;argument&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How much space does something&amp;nbsp;occupy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;du&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="c1"&gt;--max-depth &amp;lt;depth&amp;gt; -h] &amp;lt;path&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create several directories / files at&amp;nbsp;once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dir1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dir2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dir3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dir4&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fileA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fileB&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;tmux &amp;mdash; terminal&amp;nbsp;multiplexor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to commands mode: &lt;span class="keys"&gt;&lt;kbd class="key-control"&gt;Ctrl&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-b"&gt;B&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Create new window: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-c"&gt;C&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Create vertical split: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-percent"&gt;%&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Create horizontal split: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-double-quote"&gt;"&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Go to window number 1 &amp;hellip; 9: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-1"&gt;1&lt;/kbd&gt;&lt;/span&gt; &amp;hellip; &lt;span class="keys"&gt;&lt;kbd class="key-9"&gt;9&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Go to next window: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-n"&gt;N&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Go to previous window: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-p"&gt;P&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Close window or split: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-x"&gt;X&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Detach (temporal exit): commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-d"&gt;D&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Return to tmux: &lt;code&gt;tmux attach / tmux a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List all running tmux: &lt;code&gt;tmux list-sessions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Course “Intro to DevOps” by Udacity</title><link href="https://aviskase.github.io/articles/2016/07/17/course-intro-to-devops-by-udacity/" rel="alternate"></link><published>2016-07-17T00:00:00-04:00</published><updated>2016-07-17T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2016-07-17:/articles/2016/07/17/course-intro-to-devops-by-udacity/</id><summary type="html">&lt;p&gt;I love MOOCs: Coursera, Udacity, Stepic. There are so many courses to watch for entire life. Just now watched a course &lt;a href="https://www.udacity.com/course/intro-to-devops--ud611"&gt;Intro to DevOps&lt;/a&gt; by&amp;nbsp;Udacity.&lt;/p&gt;
&lt;p&gt;The course is concise and comprehensive. Here are some notes I&amp;rsquo;ve&amp;nbsp;made.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;DevOps&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;DevOps&lt;/em&gt; is the practice of operations and development engineers participating …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love MOOCs: Coursera, Udacity, Stepic. There are so many courses to watch for entire life. Just now watched a course &lt;a href="https://www.udacity.com/course/intro-to-devops--ud611"&gt;Intro to DevOps&lt;/a&gt; by&amp;nbsp;Udacity.&lt;/p&gt;
&lt;p&gt;The course is concise and comprehensive. Here are some notes I&amp;rsquo;ve&amp;nbsp;made.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;DevOps&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;DevOps&lt;/em&gt; is the practice of operations and development engineers participating together in the entire service life-cycle, from design through the development process to production&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;DevOps is also characterized by operations staff making use many of the same techniques as developers for their systems&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;CommitStrip &amp;mdash; &lt;a href="http://www.commitstrip.com/en/2015/02/02/is-your-company-ready-for-devops/"&gt;what DevOps is &lt;em&gt;not&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Components that make up DevOps &amp;mdash; &lt;span class="caps"&gt;CAMS&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Communication &amp;mdash; agile communications, lean,&amp;nbsp;respect&lt;/li&gt;
&lt;li&gt;Automation &amp;mdash; deployment, testing,&amp;nbsp;integration&lt;/li&gt;
&lt;li&gt;Measurement &amp;mdash; monitoring, useful logs, biz metrics, usefulness of tools &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;processes&lt;/li&gt;
&lt;li&gt;Sharing &amp;mdash; shared view of goals, problems, and&amp;nbsp;benefits&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can&amp;rsquo;t measure it, you can&amp;rsquo;t improve&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Solving the Environment&amp;nbsp;Problem&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Golden image&lt;ul&gt;
&lt;li&gt;more work up front &amp;mdash; large install image must be regenerated for any&amp;nbsp;change&lt;/li&gt;
&lt;li&gt;much faster&amp;nbsp;installation/boot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration management&lt;ul&gt;
&lt;li&gt;lighter build process &amp;mdash; integration is done at install/initial boot&amp;nbsp;time&lt;/li&gt;
&lt;li&gt;slower start up&amp;nbsp;process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Combination of 1 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;2&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Monitoring&lt;/h2&gt;
&lt;p&gt;Monitoring data&amp;nbsp;sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;external probing, test&amp;nbsp;queries&lt;/li&gt;
&lt;li&gt;application levels stats (queries per second,&amp;nbsp;latency)&lt;/li&gt;
&lt;li&gt;environment stats (&lt;span class="caps"&gt;JVM&lt;/span&gt; memory&amp;nbsp;profile)&lt;/li&gt;
&lt;li&gt;host/container stats (load average, disk&amp;nbsp;errors)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Monitoring data&amp;nbsp;products:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alerting&lt;/li&gt;
&lt;li&gt;performance&amp;nbsp;analysis&lt;/li&gt;
&lt;li&gt;capacity&amp;nbsp;prediction&lt;/li&gt;
&lt;li&gt;growth&amp;nbsp;measurement&lt;/li&gt;
&lt;li&gt;debugging&amp;nbsp;metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Monitoring systems" src="https://aviskase.github.io/articles/2016/07/17/course-intro-to-devops-by-udacity/monitoring_systems.png"&gt;&lt;/p&gt;
&lt;h2&gt;Additional&amp;nbsp;Resources&lt;/h2&gt;
&lt;h3&gt;Notable&amp;nbsp;Books&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://itrevolution.com/books/phoenix-project-devops-book/"&gt;The Phoenix Project&lt;/a&gt; (by Gene Kim, Kevin Behr, George Spafford) &amp;mdash; a novel about &lt;span class="caps"&gt;IT&lt;/span&gt;, DevOps, and helping your business&amp;nbsp;win&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley-ebook/dp/B003YMNVC0"&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/a&gt; (by Jez Humble, David Farley) &amp;mdash; the principles and technical practices that enable rapid, incremental delivery of high quality, valuable new functionality to&amp;nbsp;users&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Lean-Enterprise-Performance-Organizations-Innovate/dp/1449368425"&gt;Lean Enterprise: How High Performance Organizations Innovate at Scale&lt;/a&gt; (by Jez Humble, Joanne Molesky, Barry O&amp;rsquo;Reilly) &amp;mdash; Lean and Agile principles and patterns to help you move fast at scale &amp;mdash; and demonstrates why and how to apply these methodologies throughout your organization, rather than with just one department or&amp;nbsp;team&lt;/li&gt;
&lt;li&gt;&lt;a href="http://smile.amazon.com/gp/product/B00CBM1WFC"&gt;Building a DevOps Culture&lt;/a&gt; (by Mandi Walls) &amp;mdash; free Kindle book &amp;mdash; DevOps is as much about culture as it is about&amp;nbsp;tools&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notable&amp;nbsp;Presentations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=o7-IuYS0iSE"&gt;Short history of DevOps&lt;/a&gt; &amp;mdash; video by Damon&amp;nbsp;Edwards&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_DEToXsgrPc"&gt;Chef Style DevOps Kungfu&lt;/a&gt; &amp;mdash; Adam Jacob Keynote &amp;mdash; ChefConf&amp;nbsp;2015&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=L1w2_AY82WY"&gt;Jez Humble Keynote&lt;/a&gt; &amp;mdash; ChefConf&amp;nbsp;2015&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimeo.com/69079272"&gt;Leading the Horses to Drink&lt;/a&gt; &amp;mdash; support and initiate a DevOps transformation by Damon&amp;nbsp;Edwards&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Additional DevOps Related Blogs and&amp;nbsp;Sites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.chef.io/blog/2010/07/16/what-devops-means-to-me/"&gt;What DevOps means to me&lt;/a&gt; &amp;mdash; an explanation of the components that make up &lt;span class="caps"&gt;CAMS&lt;/span&gt; (Culture, Automation, Measurement, Sharing), as well additional thoughts on what DevOps is and is not &amp;mdash; by John&amp;nbsp;Willis&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev2ops.org/"&gt;dev2ops&lt;/a&gt; &amp;mdash; delivering change in a DevOps and cloud&amp;nbsp;world&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theagileadmin.com/"&gt;the agile admin&lt;/a&gt; &amp;mdash; blog on topics of DevOps, agile operations, cloud computing, infrastructure automation, Web security (especially AppSec), transparency, open source, monitoring, Web performance optimization, and&amp;nbsp;more&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devopschecklist.com/"&gt;The DevOps checklist&lt;/a&gt; &amp;mdash; this checklist is comprised of 48 items you can use to gauge the maturity of your software delivery competency, and form a baseline to measure your future&amp;nbsp;improvements&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mattstratton.com/"&gt;DevOps &amp;mdash; A Crash Course&lt;/a&gt; by Matt Stratton. A lot of links to good resources on DevOps&amp;nbsp;topics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Additional Resources by&amp;nbsp;Nutanix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stevenpoitras.com/the-nutanix-bible/"&gt;The Nutanix Bible&lt;/a&gt; &amp;mdash; brief history of data centers, visualization, webscale architecture and an explanation of Nutanix hyperconverged&amp;nbsp;architecture&lt;/li&gt;
&lt;li&gt;&lt;a href="http://go.nutanix.com/webscale-101-hyper-converged-infrastructure-guide.html"&gt;Hyperconverged Infrastructure&amp;nbsp;Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://next.nutanix.com/t5/Nutanix-Education-Blog/bg-p/Certifications"&gt;Nutanix Education&amp;nbsp;portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCJupSMWQRKQTvkb2CfkW0Eg"&gt;Nutanix Education YouTube&amp;nbsp;channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://next.nutanix.com/"&gt;Nutanix &lt;span class="caps"&gt;NEXT&lt;/span&gt; community&amp;nbsp;site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Popular Monitoring&amp;nbsp;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nagios.org/"&gt;Nagios&lt;/a&gt; and &lt;a href="http://www.zabbix.com/"&gt;Zabbix&lt;/a&gt; &amp;mdash; comprehensive solutions for monitoring large infrastructure, but maybe too big and complex for small&amp;nbsp;projects&lt;/li&gt;
&lt;li&gt;&lt;a href="http://graphite.wikidot.com/"&gt;Graphite&lt;/a&gt; &amp;mdash; open-source database and a graphing solution for storing and displaying monitoring&amp;nbsp;data&lt;/li&gt;
&lt;li&gt;&lt;a href="https://influxdb.com/"&gt;InfluxDB&lt;/a&gt; &amp;mdash; an open-source distributed time series database for metrics, events, and&amp;nbsp;analytics&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/etsy/statsd"&gt;StatsD&lt;/a&gt; &amp;mdash; simple daemon for easy stats aggregation, by Etsy. Read about the philosophy behind it in the article by it&amp;rsquo;s creators &amp;mdash; &lt;a href="https://codeascraft.com/2011/02/15/measure-anything-measure-everything/"&gt;Measure Anything, Measure&amp;nbsp;Everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://grafana.org/"&gt;Grafana&lt;/a&gt; &amp;mdash; metrics dashboard and graph editor for Graphite and&amp;nbsp;InfluxDB&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pagerduty.com/"&gt;PagerDuty&lt;/a&gt; &amp;mdash; incident resolution life-cycle management platform that integrates with over 100 other systems to streamline the process for large&amp;nbsp;organizations&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/products/logstash"&gt;Logstash&lt;/a&gt; &amp;mdash; log storage and search system, works well with &amp;mdash; &lt;a href="https://www.elastic.co/products/kibana"&gt;Kibana&lt;/a&gt; graphing and visualization&amp;nbsp;software&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Test Planning: Questions by Google (checkvist)</title><link href="https://aviskase.github.io/articles/2016/06/06/test-planning-questions-by-google-checkvist/" rel="alternate"></link><published>2016-06-06T00:00:00-04:00</published><updated>2016-06-06T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2016-06-06:/articles/2016/06/06/test-planning-questions-by-google-checkvist/</id><content type="html">&lt;p&gt;Google Testing Blog made all testers happy &lt;a href="http://googletesting.blogspot.com/2016/06/the-inquiry-method-for-test-planning.html"&gt;one more time&lt;/a&gt;. The article provides a comprehensive list of questions to be asked before writing a test plan (or a test strategy). So I&amp;rsquo;ve made a &lt;a href="https://checkvist.com/checklists/561127-test-planning"&gt;checkvist list of them&lt;/a&gt; to&amp;nbsp;share.&lt;/p&gt;</content></entry><entry><title>Thoughts on “Dear Evil Tester”</title><link href="https://aviskase.github.io/articles/2016/05/09/thoughts-on-dear-evil-tester/" rel="alternate"></link><published>2016-05-09T00:00:00-04:00</published><updated>2016-05-09T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2016-05-09:/articles/2016/05/09/thoughts-on-dear-evil-tester/</id><summary type="html">&lt;p&gt;Recently I&amp;rsquo;ve read a book &amp;ldquo;Dear Evil Tester&amp;rdquo; by Alan Richardson. The book has three parts: published letters, unpublished,&amp;nbsp;essays. &lt;/p&gt;
&lt;p&gt;The first part is kick-ass. You can just quote a random sentence from it and it will be&amp;nbsp;great. &lt;/p&gt;
&lt;p&gt;For instance, I really want to use this one as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I&amp;rsquo;ve read a book &amp;ldquo;Dear Evil Tester&amp;rdquo; by Alan Richardson. The book has three parts: published letters, unpublished,&amp;nbsp;essays. &lt;/p&gt;
&lt;p&gt;The first part is kick-ass. You can just quote a random sentence from it and it will be&amp;nbsp;great. &lt;/p&gt;
&lt;p&gt;For instance, I really want to use this one as a personal&amp;nbsp;motto:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only principle I&amp;rsquo;m prepared to absolutely commit to, with absolute certainty, is that I can change my&amp;nbsp;mind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this one clearly shows the moment when everything starts flying to&amp;nbsp;hell:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a person has the power to cause the project to fail, then they can say ‘testing is not required’, at the point they make the decision to doom the&amp;nbsp;project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, how often it is when a check is &amp;ldquo;done&amp;rdquo;, then no, not a single step back, there will be no time for restesting and&amp;nbsp;rechecking:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And as we all know, once a ‘Test Case’ is done, it can never be&amp;nbsp;undone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Guru by themselves, so&amp;nbsp;classic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enumerate everything that you do, and only you do, and then define ‘true’ Exploratory Testing as the specific combination of items that you&amp;nbsp;enumerated&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The second part wasn&amp;rsquo;t so interesting. Yep, there are more practical and philosophical ideas, but they weren&amp;rsquo;t &lt;em&gt;evil&lt;/em&gt; enough. It also applies to the third&amp;nbsp;part. &lt;/p&gt;
&lt;p&gt;Nevertheless, it&amp;rsquo;s the book you&amp;rsquo;ll want to reread &amp;mdash; cute devil&amp;rsquo;s doodles and provocative style are awesome. And you can buy it on &lt;a href="https://leanpub.com/DearEvilTester"&gt;Leanpub&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Coverage Metrics</title><link href="https://aviskase.github.io/articles/2016/05/02/coverage-metrics/" rel="alternate"></link><published>2016-05-02T00:00:00-04:00</published><updated>2016-05-02T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2016-05-02:/articles/2016/05/02/coverage-metrics/</id><summary type="html">&lt;p&gt;There are two strange metrics on the project where I work: how much is tested and how much works. Every time I should update these two numbers my head explodes. I don&amp;rsquo;t like them at&amp;nbsp;all.&lt;/p&gt;
&lt;h2&gt;What means &amp;ldquo;how much is&amp;nbsp;tested&amp;rdquo;?&lt;/h2&gt;
&lt;p&gt;Traditionally we are writing a percentage of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are two strange metrics on the project where I work: how much is tested and how much works. Every time I should update these two numbers my head explodes. I don&amp;rsquo;t like them at&amp;nbsp;all.&lt;/p&gt;
&lt;h2&gt;What means &amp;ldquo;how much is&amp;nbsp;tested&amp;rdquo;?&lt;/h2&gt;
&lt;p&gt;Traditionally we are writing a percentage of completed checks out of all checks in the checklist. I don&amp;rsquo;t like this tradition, because checks are different. Here you should just assert error&amp;rsquo;s text message, and there you should produce this error under some&amp;nbsp;conditions.&lt;/p&gt;
&lt;p&gt;I see this solution. Every check should have corresponding number like a story point. Let&amp;rsquo;s call it a test point. To check text there is 1 tp, and to reproduce an error &amp;mdash; 3 tp. That way the whole checklist costs 4 tp. When we are going through the checklist, a tester should write how much is tested for every check. For example, text is asserted &amp;mdash; 1 pt. But reproducing is done only for several scenarios, so only 2 tp. In total, we completed 3 out of 4 test&amp;nbsp;points.&lt;/p&gt;
&lt;h2&gt;What means &amp;ldquo;how much&amp;nbsp;works&amp;rdquo;?&lt;/h2&gt;
&lt;p&gt;Based on what are other testers are doing, it is a number of &amp;ldquo;green&amp;rdquo; (or passed) checks out of all&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;Consider this situation: test some kind of import. Test session is started, and voila, there no &amp;ldquo;Import&amp;rdquo; button. That&amp;rsquo;s a blocker and no more checks could be done. What we are writing for &amp;ldquo;how much works&amp;rdquo;? Zero. A developer fixes the button. Checks are flying, everything is perfect, we are writing 100% (a&amp;nbsp;miracle).&lt;/p&gt;
&lt;p&gt;Here is a question: is it correct that we put zero after the first session? After all, it was only a button, everything else was working already. I think it&amp;rsquo;s correct. But we should rename this metric, because it shows not how much &lt;em&gt;works&lt;/em&gt;, but how much is &lt;em&gt;available&lt;/em&gt; to a user and to what&amp;nbsp;extent.&lt;/p&gt;
&lt;h2&gt;And what is in&amp;nbsp;result?&lt;/h2&gt;
&lt;p&gt;Checklists are measured in test points, availability metric is renamed. Now watch carefully. We are throwing away percentages. After all, all checklists are different. Why should we use percentages, when they can&amp;rsquo;t show reality. 20% of a small task with 10 tp &amp;mdash; not bad, 80% of a task with 1000 tp &amp;mdash; can ruin a release. And strictly speaking this method is using not ratio, but interval scale. You &lt;a href="https://en.wikipedia.org/wiki/Level_of_measurement"&gt;can&amp;rsquo;t multiply and divide&lt;/a&gt; in this scale, therefore, can&amp;rsquo;t calculate&amp;nbsp;percentage.&lt;/p&gt;
&lt;h2&gt;Guru&amp;nbsp;talks&lt;/h2&gt;
&lt;p&gt;Michael Bolton writes a lot about choosing right scales and using them properly. Recently there was &lt;a href="http://www.developsense.com/blog/2016/04/is-there-a-simple-coverage-metric/"&gt;yet another article&lt;/a&gt;. His positions is that in testing even interval scale is too much, nominal and ordinal are more correct. There is an excellent example in that article, so I just leave it&amp;nbsp;here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="⚪" class="emoji" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/26aa.png" title=":white_circle:" width="20px"&gt; Level 0: we know nothing at all about this area of the&amp;nbsp;product.&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="😶" class="emoji" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f636.png" title=":no_mouth:" width="20px"&gt; Level 1: we have done a very cursory evaluation of this area. Smoke- or sanity-level; we&amp;rsquo;ve visited this feature and had a brief look at it, but we don&amp;rsquo;t really know very much about it; we haven&amp;rsquo;t probed it in any real&amp;nbsp;depth.&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="😐" class="emoji" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f610.png" title=":neutral_face:" width="20px"&gt; Level 2: we&amp;rsquo;ve had a reasonable look at this area, although we haven&amp;rsquo;t gone all the way deep. We&amp;rsquo;ve examined the common, the core, the critical, the happy paths, the handling of everyday errors or exceptions. We&amp;rsquo;ve pretty familiar with this area. We&amp;rsquo;ve done the kind of testing that would expose some significant bugs, if they were&amp;nbsp;there.&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="😎" class="emoji" height="20px" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/64/1f60e.png" title=":sunglasses:" width="20px"&gt; Level 3: we&amp;rsquo;ve really kicked this area harshly and hard. We&amp;rsquo;ve looked at unusual and complex conditions or states. We&amp;rsquo;ve probed deeply for subtle or hidden bugs. We&amp;rsquo;ve exposed the product to the extreme, the exceptional, the rare, the improbable. We&amp;rsquo;ve looked for bugs that are deep in the corners or hidden in the dark. If there were a serious bug, we&amp;rsquo;re pretty sure we would have found it by&amp;nbsp;now.&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Testing Knowledge Transfer (checkvist)</title><link href="https://aviskase.github.io/articles/2016/04/24/testing-knowledge-transfer-checkvist/" rel="alternate"></link><published>2016-04-24T00:00:00-04:00</published><updated>2016-04-24T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2016-04-24:/articles/2016/04/24/testing-knowledge-transfer-checkvist/</id><content type="html">&lt;p&gt;There is &lt;a href="http://positiveflower.blogspot.in/2016/04/blog-post.html"&gt;an excellent blog post&lt;/a&gt; (ru) by  Elena Poplouhina with the list of what not to forget to tell about testing to project newcomers. So I&amp;rsquo;ve made an English translation with some correction. Here it is &lt;a href="https://checkvist.com/checklists/554667-knowledge-transfer"&gt;on the checkvist&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>List of Articles and Videos on API and Web Services Testing</title><link href="https://aviskase.github.io/articles/2016/01/09/list-of-articles-and-videos-on-api-and-web-services-testing/" rel="alternate"></link><published>2016-01-09T00:00:00-05:00</published><updated>2016-01-09T00:00:00-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2016-01-09:/articles/2016/01/09/list-of-articles-and-videos-on-api-and-web-services-testing/</id><summary type="html">&lt;p&gt;There was a great list on now  discontinued site &lt;code&gt;qahelp.net&lt;/code&gt;. I managed to save it through yandex cache (even google cache and web archive couldn&amp;rsquo;t&amp;nbsp;help).&lt;/p&gt;
&lt;h2&gt;Difference Between &lt;span class="caps"&gt;API&lt;/span&gt; and Web&amp;nbsp;Services&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/808421/api-vs-webservice"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; vs Web Service&lt;/a&gt;, &lt;a href="http://programmers.stackexchange.com/questions/38691/difference-between-web-api-and-web-service"&gt;Difference between web &lt;span class="caps"&gt;API&lt;/span&gt; and web service&lt;/a&gt;, &lt;a href="http://www.differencebetween.net/technology/internet/difference-between-api-and-web-service/#ixzz3l5QC4tYj"&gt;Difference between &lt;span class="caps"&gt;API&lt;/span&gt; and web …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;There was a great list on now  discontinued site &lt;code&gt;qahelp.net&lt;/code&gt;. I managed to save it through yandex cache (even google cache and web archive couldn&amp;rsquo;t&amp;nbsp;help).&lt;/p&gt;
&lt;h2&gt;Difference Between &lt;span class="caps"&gt;API&lt;/span&gt; and Web&amp;nbsp;Services&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/808421/api-vs-webservice"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; vs Web Service&lt;/a&gt;, &lt;a href="http://programmers.stackexchange.com/questions/38691/difference-between-web-api-and-web-service"&gt;Difference between web &lt;span class="caps"&gt;API&lt;/span&gt; and web service&lt;/a&gt;, &lt;a href="http://www.differencebetween.net/technology/internet/difference-between-api-and-web-service/#ixzz3l5QC4tYj"&gt;Difference between &lt;span class="caps"&gt;API&lt;/span&gt; and web&amp;nbsp;service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://readwrite.com/2013/09/19/api-defined/"&gt;What APIs Are And Why They’re Important&lt;/a&gt; &amp;mdash; Brian&amp;nbsp;Proffitt&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html#N10144"&gt;What are web services&lt;/a&gt; (section) &amp;mdash; Nicholas&amp;nbsp;Chase&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cl.cam.ac.uk/~ib249/teaching/Lecture1.handout.pdf"&gt;Introduction to Web Services&lt;/a&gt; (&lt;span class="caps"&gt;PDF&lt;/span&gt;) &amp;mdash; Ioannis G.&amp;nbsp;Baltopoulos&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt; and &lt;span class="caps"&gt;REST&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html#N10278"&gt;Understanding &lt;span class="caps"&gt;SOAP&lt;/span&gt;&lt;/a&gt; (section) &amp;mdash; Nicholas&amp;nbsp;Chase&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.restapitutorial.com/lessons/whatisrest.html"&gt;What is &lt;span class="caps"&gt;REST&lt;/span&gt;?&lt;/a&gt; (video) &amp;mdash; Todd&amp;nbsp;Fredrich&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/apis/understanding-soap-and-rest-basics/"&gt;Understanding &lt;span class="caps"&gt;SOAP&lt;/span&gt; and &lt;span class="caps"&gt;REST&lt;/span&gt; Basics And Differences&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/articles/webber-rest-workflow/"&gt;How to &lt;span class="caps"&gt;GET&lt;/span&gt; a cup of coffee&lt;/a&gt; &amp;mdash; Jim Webber, Savas Parastatidis &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Ian&amp;nbsp;Robinson&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;API&lt;/span&gt; and Web Services&amp;nbsp;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.udemy.com/api-testing/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Testing: Why it matters and how to do it&lt;/a&gt; &amp;mdash; Michael&amp;nbsp;Churchman&lt;/li&gt;
&lt;li&gt;&lt;a href="http://testingisbelieving.blogspot.co.uk/2013/11/johnny-mnemonic-iceovermad.html"&gt;Johnny mnemonic &amp;mdash; &lt;span class="caps"&gt;ICEOVERMAD&lt;/span&gt;&lt;/a&gt; &amp;mdash; Ash&amp;nbsp;Winter&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.soapui.org/testing-dojo/welcome-to-the-dojo/overview.html"&gt;The &lt;span class="caps"&gt;API&lt;/span&gt; Testing Dojo&lt;/a&gt; &amp;mdash; Smart&amp;nbsp;Bear&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qxf2.com/blog/api-testing-ui-tools-postman"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Testing: &lt;span class="caps"&gt;UI&lt;/span&gt; Tools&lt;/a&gt; &amp;mdash; Avinash&amp;nbsp;Shetty&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qxf2.com/blog/api-testing-developer-tools"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Testing: Developer Tools&lt;/a&gt; &amp;mdash; Avinash&amp;nbsp;Shetty&lt;/li&gt;
&lt;li&gt;&lt;a href="http://weekendtesting.com/?p=3898"&gt;&lt;span class="caps"&gt;WTEU&lt;/span&gt;-53 &amp;mdash; An introduction to &lt;span class="caps"&gt;API&lt;/span&gt; Testing&lt;/a&gt; &amp;mdash; Amy&amp;nbsp;Phillips&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.eviltester.com/2015/01/some-api-testing-basic-introductory.html"&gt;Some &lt;span class="caps"&gt;API&lt;/span&gt; Testing Basic Introductory Notes and Tools&lt;/a&gt; &amp;mdash; Alan&amp;nbsp;Richardson&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deep Dive into &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.octo.com/en/design-a-rest-api/"&gt;How to design a &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; &amp;mdash; Antoine Chantalou, Jérémy Buisson, Mohamed Kissa, Florent Jaby, Nicolas Laurent, Augustin Grimprel, Benoit&amp;nbsp;Lafontaine&lt;/li&gt;
&lt;li&gt;&lt;a href="http://toddfredrich.com/commoditization-of-the-user-interface.html"&gt;The commoditization of the user interface&lt;/a&gt; &amp;mdash; Todd&amp;nbsp;Friedrich&lt;/li&gt;
&lt;li&gt;&lt;a href="http://toddfredrich.com/restexpress-api-application-layers.html"&gt;&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; application layers&lt;/a&gt; &amp;mdash; Todd&amp;nbsp;Friedrich&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling"&gt;&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; design: Resource modeling&lt;/a&gt; &amp;mdash; Prakash&amp;nbsp;Subramaniam&lt;/li&gt;
&lt;li&gt;&lt;a href="http://martinfowler.com/articles/richardsonMaturityModel.html"&gt;Richardson maturity model&lt;/a&gt; &amp;mdash; Martin&amp;nbsp;Fowler&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Security&amp;nbsp;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-1-of-3/"&gt;How to Hack an &lt;span class="caps"&gt;API&lt;/span&gt; and Get Away with It (Part 1 of 3)&lt;/a&gt; &amp;mdash; Ole&amp;nbsp;Lensmar&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-2-of-3/"&gt;How to Hack an &lt;span class="caps"&gt;API&lt;/span&gt; and Get Away with It (Part 2 of 3)&lt;/a&gt; &amp;mdash; Ole&amp;nbsp;Lensmar&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-3-of-3/"&gt;How to Hack an &lt;span class="caps"&gt;API&lt;/span&gt; and Get Away with It (Part 3 of 3)&lt;/a&gt; &amp;mdash; Ole&amp;nbsp;Lensmar&lt;/li&gt;
&lt;li&gt;&lt;a href="http://weekendtesting.com/?p=4033"&gt;&lt;span class="caps"&gt;WTEU&lt;/span&gt;-56 &amp;mdash; Security testing for APIs&lt;/a&gt; &amp;mdash; Dan&amp;nbsp;Billing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Service&amp;nbsp;Virtualization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://smartbear.com/all-resources/articles/what-is-service-virtualization"&gt;What is service virtualization&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/readyapi/hardening-your-application-against-api-failures-with-api-virtualization/"&gt;Hardening Your Application Against &lt;span class="caps"&gt;API&lt;/span&gt; Failures with &lt;span class="caps"&gt;API&lt;/span&gt; Virtualization&lt;/a&gt; &amp;mdash; Lorinda&amp;nbsp;Brandon&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.stickyminds.com/article/4-ways-boost-your-test-process-service-virtualization"&gt;4 Ways to Boost Your Test Process with Service Virtualization&lt;/a&gt; &amp;mdash; Bas&amp;nbsp;Dijkstra&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Introduction to&amp;nbsp;Microservices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://martinfowler.com/articles/microservices.html"&gt;Microservices&lt;/a&gt; &amp;mdash; Martin&amp;nbsp;Fowler&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nginx.com/blog/introduction-to-microservices/"&gt;Introduction to microservices&lt;/a&gt; &amp;mdash; Chris&amp;nbsp;Richardson&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/microservices/delving-into-the-microservices-architecture/"&gt;Delving into the Microservices Architecture&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.yourkarma.com/building-microservices-at-karma"&gt;How we build microservices at Karma&lt;/a&gt; &amp;mdash; Stefan&amp;nbsp;Borsje&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.javaworld.com/article/2863409/soa/why-2015-will-be-the-year-of-microservices.html"&gt;Why 2015 will be the year of microservices&lt;/a&gt; &amp;mdash; Eric&amp;nbsp;Knorr&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Microservices&amp;nbsp;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://martinfowler.com/articles/microservice-testing/"&gt;Testing Strategies in a Microservice Architecture&lt;/a&gt; &amp;mdash; Toby Clemson et&amp;nbsp;al.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/apm/performance-issue-considerations-for-microservices-apis/"&gt;Performance Issue Considerations for Microservices APIs&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.xebialabs.com/2014/12/31/8-questions-need-ask-microservices-containers-docker-2015/"&gt;8 Questions You Need to Ask About Microservices, Containers &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Docker in 2015&lt;/a&gt; &amp;mdash; Andrew&amp;nbsp;Phillips&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/presentations/integration-tests-scam"&gt;Integration tests are a scam&lt;/a&gt; &amp;mdash; &lt;span class="caps"&gt;JB&lt;/span&gt;&amp;nbsp;Rainsberger&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prezi.com/09emobpvigo2/throw-away-your-integration-tests/"&gt;Throw away your integration tests&lt;/a&gt; (slides) &amp;mdash; Beth&amp;nbsp;Skurrie&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;More on &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="http://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/" data-proofer-ignore&gt;What is &lt;span class="caps"&gt;API&lt;/span&gt; management &amp;mdash; A Brief Primer&lt;/a&gt; &amp;mdash; Navdeep Sidhu&lt;/del&gt; &lt;em&gt;Upd. resource is no more&amp;nbsp;available&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/research/api-management"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; management platform capabilities&lt;/a&gt; &amp;mdash; Jeevak&amp;nbsp;Kasarkod&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/iot-2/the-api-is-the-invisible-hand-behind-the-internet-of-things"&gt;The &lt;span class="caps"&gt;API&lt;/span&gt; is the Invisible Hand Behind the Internet of Things&lt;/a&gt; &amp;mdash; Jennifer&amp;nbsp;Riggins&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/apis/hypermedia-apis/working-with-hypermedia-apis"&gt;Working with Hypermedia APIs&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.smartbear.com/iot-2/testing-challenges-associated-with-machine-learning-apis"&gt;Testing Challenges Associated with Machine Learning APIs&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>How to Watch SWF in Linux</title><link href="https://aviskase.github.io/articles/2015/12/23/how-to-watch-swf-in-linux/" rel="alternate"></link><published>2015-12-23T00:00:00-05:00</published><updated>2015-12-23T00:00:00-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:aviskase.github.io,2015-12-23:/articles/2015/12/23/how-to-watch-swf-in-linux/</id><summary type="html">&lt;p&gt;Sometimes people use Jing to record videos for bug reports. This pest is saving them as &lt;span class="caps"&gt;SWF&lt;/span&gt; file. So, here is a simple note on how to open these videos in&amp;nbsp;Linux.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s really easy. Firefox can open them (of course, if Shockwave plugin is present). Just download that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes people use Jing to record videos for bug reports. This pest is saving them as &lt;span class="caps"&gt;SWF&lt;/span&gt; file. So, here is a simple note on how to open these videos in&amp;nbsp;Linux.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s really easy. Firefox can open them (of course, if Shockwave plugin is present). Just download that nasty video and open it in &lt;span class="caps"&gt;FF&lt;/span&gt;, all&amp;rsquo;s&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;But there is a catch. I don&amp;rsquo;t know how it&amp;rsquo;s on Windows, but for Linux you should edit mime types. In order to do that you should create a file &lt;code&gt;~/.mime.types&lt;/code&gt; with this&amp;nbsp;content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;application/x-shockwave-flash  swf swfl
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s all! This way is the easiest, because it works only for the owner of the home directory, where the file was&amp;nbsp;created.&lt;/p&gt;
&lt;p&gt;But if you want, you can make this setting global. But be careful, because everything will be reset after an upgrade. You should open the&amp;nbsp;file: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nano /usr/share/mime/packages/freedesktop.org.xml
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and replace this&amp;nbsp;string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;mime-type type=&amp;quot;application/vnd.adobe.flash.movie&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;mime-type type=&amp;quot;application/x-shockwave-flash&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then&amp;nbsp;execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo update-mime-database /usr/share/mime
&lt;/pre&gt;&lt;/div&gt;</content></entry></feed>