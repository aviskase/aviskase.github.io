<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>aviskase</title><link href="https://www.aviskase.com/" rel="alternate"></link><link href="https://www.aviskase.com/feeds/all.atom.xml" rel="self"></link><id>https://www.aviskase.com/</id><updated>2020-06-18T00:30:59-04:00</updated><entry><title>Robust APIs Are Weird</title><link href="https://www.aviskase.com/articles/2020/06/18/robust-apis-are-weird/" rel="alternate"></link><published>2020-06-18T00:30:59-04:00</published><updated>2020-06-18T00:30:59-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-06-18:/articles/2020/06/18/robust-apis-are-weird/</id><summary type="html">&lt;p&gt;My first full-time &lt;span class="caps"&gt;API&lt;/span&gt; testing experience was for &lt;span class="caps"&gt;SOAP&lt;/span&gt; services. There you learn what &lt;span class="caps"&gt;XSD&lt;/span&gt; is. You learn to love&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Of course, you do! With server-side enabled validation based on a schema, you need not worry about stupid testing like checking what happens when you send 100 length string …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My first full-time &lt;span class="caps"&gt;API&lt;/span&gt; testing experience was for &lt;span class="caps"&gt;SOAP&lt;/span&gt; services. There you learn what &lt;span class="caps"&gt;XSD&lt;/span&gt; is. You learn to love&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Of course, you do! With server-side enabled validation based on a schema, you need not worry about stupid testing like checking what happens when you send 100 length string where expected maximum length is 50. Just make sure that &lt;span class="caps"&gt;XSD&lt;/span&gt; is&amp;nbsp;correct.&lt;/p&gt;
&lt;p&gt;After that witchcraft, testing RESTish APIs feels like going back in time. To the very &lt;em&gt;manual&lt;/em&gt; times. But then you learn about &lt;span class="caps"&gt;JSON&lt;/span&gt; Schema (&lt;span class="caps"&gt;RAML&lt;/span&gt;, OpenAPI, etc) and you are happy again! Yay, we can turn on server-side validation and shove off stupid testing&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;The problem is that &lt;span class="caps"&gt;JSON&lt;/span&gt; and &lt;span class="caps"&gt;XML&lt;/span&gt; are different beasts. Assuming at face value that whatever is defined in schema should be blindly validated &lt;strong&gt;can be&amp;nbsp;wrong.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let me explain why. And don&amp;rsquo;t worry, I did the same&amp;nbsp;mistake.&lt;/p&gt;
&lt;p&gt;Here is a simple &lt;span class="caps"&gt;XML&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Ring of the Wild Hunt&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tugrik&amp;gt;&lt;/span&gt;10&lt;span class="nt"&gt;&amp;lt;/tugrik&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Take &lt;em&gt;a good look at&lt;/em&gt; &lt;code&gt;tugrik&lt;/code&gt; element. Without &lt;span class="caps"&gt;XSD&lt;/span&gt; you wouldn&amp;rsquo;t know the expected type. While it looks like something numeric, you can&amp;rsquo;t be sure. Maybe it&amp;rsquo;s a string like a &lt;code&gt;name&lt;/code&gt;? &lt;/p&gt;
&lt;p&gt;Addition of &lt;span class="caps"&gt;XSD&lt;/span&gt; clarifies that &lt;code&gt;tugrik&lt;/code&gt; expects decimal&amp;nbsp;value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xs:schema&lt;/span&gt; &lt;span class="na"&gt;xmlns:xs=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;targetNamespace=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.w3schools.com&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.w3schools.com&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;elementFormDefault=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qualified&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;note&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xs:complexType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xs:sequence&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xs:string&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tugrik&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xs:decimal&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xs:sequence&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xs:complexType&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xs:element&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/xs:schema&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let&amp;rsquo;s convert the same document to &lt;span class="caps"&gt;JSON&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ring of the Wild Hunt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;tugrik&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Oh no, you say, that looks wrong! We know that &lt;code&gt;tugrik&lt;/code&gt; is a number, so make it&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;item&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ring of the Wild Hunt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;tugrik&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yet by doing that, now we don&amp;rsquo;t even need any &lt;span class="caps"&gt;JSON&lt;/span&gt; Schema to guess the property type. No pesky little quotes &amp;mdash; it&amp;rsquo;s a&amp;nbsp;number!&lt;/p&gt;
&lt;p&gt;Perhaps you see where this is going. &lt;span class="caps"&gt;XML&lt;/span&gt; documents are plain-text. Each element&amp;rsquo;s value is a simple string that frameworks cast into proper types using &lt;span class="caps"&gt;XSD&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;So, if &lt;code&gt;tugrik&lt;/code&gt; is defined as decimal&amp;nbsp;field:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;float(&amp;quot;10&amp;quot;) == 10.0
float(&amp;quot;10.0&amp;quot;) == 10.0
float(&amp;quot;blah&amp;quot;) --&amp;gt; Exception
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Maybe there is a trimming in between too, so &lt;code&gt;float("  10  ".trim()) == 10.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Maybe our casting is incredibly smart and can do things like &lt;code&gt;float("ten") == 10.0&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;But I digress. The main point is that &lt;span class="caps"&gt;XML&lt;/span&gt;-based documents often go through casting mechanism. &lt;strong&gt;Validation fails only when casting could not be&amp;nbsp;done.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JSONs are not plain-text. They already have some rudimentary types visible just by looking at them. If you add &lt;span class="caps"&gt;JSON&lt;/span&gt; Schema on top and use any &lt;em&gt;not overly robust&lt;/em&gt; validator, the behavior will be&amp;nbsp;different.&lt;/p&gt;
&lt;p&gt;Because the simplest way to validate a &lt;span class="caps"&gt;JSON&lt;/span&gt; document is first to consume it with some common library that guesses types almost like we do: &amp;ldquo;does it have quotes around? string!&amp;rdquo; And only then, with already cast value, to compare its type with whatever is defined in a&amp;nbsp;schema.&lt;/p&gt;
&lt;p&gt;(Yes, yes, I do oversimplify&amp;nbsp;internals)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;x = parse(&amp;lt;json&amp;gt;) 
assert typeof(x) == &amp;#39;float&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then for:
- &lt;code&gt;"tugrik": 10&lt;/code&gt; passes 
- &lt;code&gt;"tugrik": 10.0&lt;/code&gt; passes 
- &lt;code&gt;"tugrik": "10"&lt;/code&gt; fails 
- &lt;code&gt;"tugrik": "blah"&lt;/code&gt; fails &lt;/p&gt;
&lt;p&gt;Can you guess how &lt;em&gt;really robust&lt;/em&gt; validators are different? Right! They make &lt;code&gt;"tugrik": "10"&lt;/code&gt; to pass validation. Because they follow Postel&amp;rsquo;s&amp;nbsp;law:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Be conservative in what you send, be liberal in what you&amp;nbsp;accept.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While this statement is way more complex than puny little tester&amp;rsquo;s blog could handle, it&amp;rsquo;s important to know its existence and application.  Following Postel&amp;rsquo;s law to any degree is &lt;em&gt;a design&amp;nbsp;choice.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;If your service is designed to handle weak input like &lt;code&gt;"tugrik": "10"&lt;/code&gt; as a valid number, it&amp;rsquo;s not a bug. If you send additional properties in the request and a service ignores them without throwing 4xx error, it&amp;rsquo;s not a bug either. It can be very well a&amp;nbsp;feature. &lt;/p&gt;
&lt;p&gt;And yes, there is definitely a way &lt;a class="external" href="https://techblog.workiva.com/tech-blog/wrestling-postel%E2%80%99s-law"&gt;to do robustness wrong or overdo it&lt;/a&gt;. If you write a browser engine from scratch (why?), you&amp;rsquo;ll follow Postel&amp;rsquo;s law religiously. Another reason would be ensuring the maximum uptime of &lt;span class="caps"&gt;API&lt;/span&gt; clients. More successful requests they do and less work is required from them to connect to your product result in more&amp;nbsp;profit. &lt;/p&gt;
&lt;p&gt;So, when you explore new &lt;span class="caps"&gt;API&lt;/span&gt;, make sure you understand hows and whys around the design before filing bugs &amp;ldquo;Achtung, Achtung, no&amp;nbsp;validation!!!1&amp;rdquo;. &lt;/p&gt;</content><category term="Other"></category><category term="api"></category></entry><entry><title>Hmms: May</title><link href="https://www.aviskase.com/articles/2020/06/02/hmms-may/" rel="alternate"></link><published>2020-06-02T20:33:43-04:00</published><updated>2020-06-02T20:33:43-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-06-02:/articles/2020/06/02/hmms-may/</id><summary type="html">&lt;p&gt;This was a slow month in the sense of discovering&amp;nbsp;new.&lt;/p&gt;
&lt;p&gt;I finished the &lt;a class="external" href="https://learn.particular.net/courses/adsd-online"&gt;&amp;ldquo;Advanced Distributed Systems Design&amp;rdquo; course&lt;/a&gt;. 
&lt;span class="caps"&gt;CQRS&lt;/span&gt;, &lt;span class="caps"&gt;DDD&lt;/span&gt;, messaging patterns: doesn&amp;rsquo;t sound like this course is in any way helpful for testers.
Yet being &lt;em&gt;just a tester&lt;/em&gt; is dull. Exploring such courses helps to diminish the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was a slow month in the sense of discovering&amp;nbsp;new.&lt;/p&gt;
&lt;p&gt;I finished the &lt;a class="external" href="https://learn.particular.net/courses/adsd-online"&gt;&amp;ldquo;Advanced Distributed Systems Design&amp;rdquo; course&lt;/a&gt;. 
&lt;span class="caps"&gt;CQRS&lt;/span&gt;, &lt;span class="caps"&gt;DDD&lt;/span&gt;, messaging patterns: doesn&amp;rsquo;t sound like this course is in any way helpful for testers.
Yet being &lt;em&gt;just a tester&lt;/em&gt; is dull. Exploring such courses helps to diminish the hardest 
&lt;a class="external" href="https://wiki.c2.com/?OrdersOfIgnorance"&gt;order of ignorance&lt;/a&gt; &amp;ldquo;I don&amp;rsquo;t know what I don&amp;rsquo;t know&amp;rdquo;. And as I&amp;rsquo;m wearing an 
&lt;span class="caps"&gt;API&lt;/span&gt; designer hat more and more, learning about broader architectural stuff is&amp;nbsp;essential.&lt;/p&gt;
&lt;p&gt;Another &amp;ldquo;merging the trenches&amp;rdquo; experience was 
&lt;a class="external" href="https://blogs.mulesoft.com/dev/design-dev/intentional-api-consumer-experience/"&gt;an article about using user types and personas for &lt;span class="caps"&gt;API&lt;/span&gt; design&lt;/a&gt;.
Personas are a nifty tool for any team, but for me, it&amp;rsquo;s been difficult to apply them consistently. 
This is something I still need to learn and&amp;nbsp;practice.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In these uncertain times, uncertainty is certain ©.&lt;/em&gt; Right before the quarantine, I ordered a book 
&lt;a class="external" href="http://shop.oreilly.com/product/0636920201755.do"&gt;Continuous &lt;span class="caps"&gt;API&lt;/span&gt; Management&lt;/a&gt;. Well, it arrived. Today. On the 
serious note, I&amp;rsquo;m happy to start reading it, though I could have it finished in e-book format 
while waiting&amp;nbsp;xD&lt;/p&gt;
&lt;p&gt;And a small off-topic, my other purchase this month was a drawing tablet 
&lt;a class="external" href="https://www.huion.com/pen_tablet/Inspiroy/H640P.html"&gt;Huion &lt;span class="caps"&gt;H640P&lt;/span&gt;&lt;/a&gt;. The good thing about it is that there are 
proper drivers for Linux. And it&amp;rsquo;s cheap =) Bad thing is that I&amp;rsquo;ve just upgraded to Ubuntu 20.04 with 5.4 kernel 
that is buggy and prevents these drivers from being installed. Oopsie. So, I&amp;rsquo;m waiting until 5.6 kernel is stable 
enough or  5.4 is fixed to fully dive into e-drawing. At the very least I&amp;rsquo;d like to draw doodles and diagrams with it, 
and maybe, &lt;span class="caps"&gt;MAYBE&lt;/span&gt;, actually learn to&amp;nbsp;draw.&lt;/p&gt;</content><category term="Hmms"></category></entry><entry><title>Hmms: April</title><link href="https://www.aviskase.com/articles/2020/05/02/hmms-april/" rel="alternate"></link><published>2020-05-02T23:43:38-04:00</published><updated>2020-05-02T23:43:38-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-05-02:/articles/2020/05/02/hmms-april/</id><summary type="html">&lt;h1&gt;Learning&lt;/h1&gt;
&lt;p&gt;One of the good things to emerge during the corona times is more educational&amp;nbsp;opportunities.&lt;/p&gt;
&lt;p&gt;For example, you can (and perhaps should) check the
&lt;a class="external" href="https://learn.particular.net/courses/adsd-online"&gt;&amp;ldquo;Advanced Distributed Systems Design&amp;rdquo; course&lt;/a&gt; by Udi&amp;nbsp;Dahan.&lt;/p&gt;
&lt;p&gt;Another way to satisfy knowledge thirst is to attend a virtual&amp;nbsp;conference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://apithedocs.org/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; The Docs&lt;/a&gt; hosts bite-sized …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Learning&lt;/h1&gt;
&lt;p&gt;One of the good things to emerge during the corona times is more educational&amp;nbsp;opportunities.&lt;/p&gt;
&lt;p&gt;For example, you can (and perhaps should) check the
&lt;a class="external" href="https://learn.particular.net/courses/adsd-online"&gt;&amp;ldquo;Advanced Distributed Systems Design&amp;rdquo; course&lt;/a&gt; by Udi&amp;nbsp;Dahan.&lt;/p&gt;
&lt;p&gt;Another way to satisfy knowledge thirst is to attend a virtual&amp;nbsp;conference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://apithedocs.org/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; The Docs&lt;/a&gt; hosts bite-sized virtual events with discussion&amp;nbsp;opportunities.&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.asyncapiconf.com/"&gt;AsyncAPI&lt;/a&gt; has finished already, but you can watch it on&amp;nbsp;YouTube.&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.onlinetestconf.com/"&gt;OnlineTestConf&lt;/a&gt; is soon. I&amp;rsquo;m particularly excited about 
&amp;ldquo;The Lessons we can Learn from the Aviation Industry&amp;rdquo; by Conor&amp;nbsp;Fitzgerald.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;New&amp;nbsp;font&lt;/h1&gt;
&lt;p&gt;Any &amp;ldquo;&lt;span class="caps"&gt;IT&lt;/span&gt; person&amp;rdquo; should have a favorite monospaced font. Except for those weirdos who prefer non-monospaced. 
I wasn&amp;rsquo;t very original in this matter and used &lt;a class="external" href="https://github.com/tonsky/FiraCode"&gt;Fira Code&lt;/a&gt; because it has 
ligatures and proper support for&amp;nbsp;Cyrillic.&lt;/p&gt;
&lt;p&gt;Any &amp;ldquo;&lt;span class="caps"&gt;IT&lt;/span&gt; person&amp;rdquo; should also have a favorite &lt;span class="caps"&gt;IDE&lt;/span&gt;. Mine is PyCharm by JetBrains. Recently an amazing thing has happened:
JetBrains released their own monospaced font, &lt;a class="external" href="https://www.jetbrains.com/lp/mono/"&gt;JetBrains Mono&lt;/a&gt;. The key feature is
an increased height of lowercase letters. Love&amp;nbsp;it!&lt;/p&gt;
&lt;h1&gt;Fam0us&lt;/h1&gt;
&lt;p&gt;I participated in &lt;a class="external" href="https://www.angryweasel.com/ABTesting/abt-343-yuliya-bagriy-aviskase/"&gt;the podcast hosted by Alan Page&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;In retrospect, I should have &amp;ldquo;rehearsed&amp;rdquo; a bit more. For example, I somehow was able to forget the phrase 
&lt;em&gt;open-book management.&lt;/em&gt;  Or some answers could be more laconic and concise. Nevertheless, it was a great&amp;nbsp;experience.&lt;/p&gt;
&lt;h1&gt;Visible&amp;nbsp;work&lt;/h1&gt;
&lt;p&gt;I slowly write &lt;a class="external" href="https://netgovern.github.io/api-guidelines"&gt;our &lt;span class="caps"&gt;API&lt;/span&gt; guidelines&lt;/a&gt;. Still work in progress,
but it&amp;rsquo;s cool to have bits of your work visible and perhaps at some point serving others. 
My admiration for companies who published their guidelines in the same matter 
grew immensely: Adidas, PayPal, Heroku, Microsoft, Zalando, etc. It really helps to be able to see real artifacts and
not just generic &lt;span class="caps"&gt;NDA&lt;/span&gt;-sanitized dev blog&amp;nbsp;posts.&lt;/p&gt;</content><category term="Hmms"></category></entry><entry><title>Using Insomnia for API exploration</title><link href="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/" rel="alternate"></link><published>2020-04-22T01:06:01-04:00</published><updated>2020-04-22T01:06:01-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-04-22:/articles/2020/04/22/using-insomnia-for-api-exploration/</id><summary type="html">&lt;p&gt;One of the tools I use almost daily is &lt;a class="external" href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;. 
It&amp;rsquo;s a great alternative to the &lt;em&gt;P-everyone-knows-that-one.&lt;/em&gt; 
Insomnia is easy to use on Linux, has plugins, and &lt;span class="caps"&gt;UI&lt;/span&gt; is clean and&amp;nbsp;simple.&lt;/p&gt;
&lt;p&gt;Let me show you some basic features. We will use &lt;a class="external" href="https://openweathermap.org/"&gt;OpenWeatherMap &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Workspaces&lt;/h2&gt;
&lt;p&gt;Workspaces are collections of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the tools I use almost daily is &lt;a class="external" href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;. 
It&amp;rsquo;s a great alternative to the &lt;em&gt;P-everyone-knows-that-one.&lt;/em&gt; 
Insomnia is easy to use on Linux, has plugins, and &lt;span class="caps"&gt;UI&lt;/span&gt; is clean and&amp;nbsp;simple.&lt;/p&gt;
&lt;p&gt;Let me show you some basic features. We will use &lt;a class="external" href="https://openweathermap.org/"&gt;OpenWeatherMap &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Workspaces&lt;/h2&gt;
&lt;p&gt;Workspaces are collections of thematically combined requests. Some of my workspaces are service-specific, 
while others contain everything related to the particular client use case or event (i.e.,&amp;nbsp;cross-service). &lt;/p&gt;
&lt;p&gt;Our first examples: get current weather and forecast for Montreal. OpenWeatherMap &lt;span class="caps"&gt;API&lt;/span&gt; requires an &lt;span class="caps"&gt;API&lt;/span&gt; key, 
so you need to add it to the query parameters for each&amp;nbsp;request.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: basic interface" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Environments&lt;/h2&gt;
&lt;p&gt;Too much duplication, isn&amp;rsquo;t&amp;nbsp;it?&lt;/p&gt;
&lt;p&gt;Welcome to environments. Insomnia supports multi-layered variable&amp;nbsp;assignments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Base environment: values are accessible regardless of which environment is&amp;nbsp;selected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sub environments: you can create as many as you want. Especially useful for testing APIs on different&amp;nbsp;servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Folder-level environment: requests can be grouped by folders and sometimes it makes sense to assign specific values 
to all requests in the&amp;nbsp;folder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ok, so for this &lt;span class="caps"&gt;API&lt;/span&gt; let&amp;rsquo;s do like this. &lt;code&gt;https://api.openweathermap.org/data/2.5&lt;/code&gt; can go into base, 
because we have access only to one&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: base environment" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_2.png"&gt;&lt;/p&gt;
&lt;p&gt;An &lt;span class="caps"&gt;API&lt;/span&gt; key is perfect for the sub&amp;nbsp;environment. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: sub environment" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;Montreal&amp;rdquo;&lt;/em&gt; is stored as a folder-level value, just for the sake of&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: folder-level environment" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_4.png"&gt;&lt;/p&gt;
&lt;p&gt;Then, our requests will look like (use &lt;code&gt;{{var_name}}&lt;/code&gt; to access&amp;nbsp;variable):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: requests with variables from environments" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_5.png"&gt;&lt;/p&gt;
&lt;p&gt;You might notice that we still have to fill out the &lt;span class="caps"&gt;API&lt;/span&gt; key query parameter for each request. Kinda boring. 
That&amp;rsquo;s where plugins can help, in this case, it&amp;rsquo;s &lt;code&gt;insomnia-plugin-defaults&lt;/code&gt;. 
Just go into &lt;em&gt;Preferences &amp;gt; Plugins&lt;/em&gt; and type its name to install. 
This plugin allows us to set default headers and/or query parameters in the&amp;nbsp;environments.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: environment setup with query param defaults" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_6.png"&gt;&lt;/p&gt;
&lt;p&gt;And now we can remove it from&amp;nbsp;requests:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: requests with default query params" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_7.png"&gt;&lt;/p&gt;
&lt;h2&gt;Response&amp;nbsp;querying&lt;/h2&gt;
&lt;p&gt;The response for the forecast &lt;span class="caps"&gt;API&lt;/span&gt; is big. What if we want to check all returned values for 
weather descriptions? We can do it by using JSONPath response&amp;nbsp;filtering.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$.list[*].weather[*].description&lt;/code&gt; means &lt;em&gt;&amp;lsquo;Get descriptions from each element of &lt;code&gt;weather&lt;/code&gt; 
array that is a property of elements in the &lt;code&gt;list&lt;/code&gt; array&amp;rsquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: querying response using JSONPath" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_8.png"&gt;&lt;/p&gt;
&lt;h2&gt;Generating&amp;nbsp;values&lt;/h2&gt;
&lt;p&gt;Sometimes we want to use random values. Insomnia has embedded 
&lt;a class="external" href="https://support.insomnia.rest/article/40-template-tags"&gt;template tags&lt;/a&gt; for that, like timestamp and &lt;span class="caps"&gt;UUID&lt;/span&gt;. For other
cases plugins come to the rescue yet again: &lt;code&gt;insomnia-plugin-random&lt;/code&gt; uses &lt;a class="external" href="https://chancejs.com/"&gt;Chance&lt;/a&gt; library 
which gives you tons of&amp;nbsp;options. &lt;/p&gt;
&lt;p&gt;Here is how to generate random latitude and longitude&amp;nbsp;coordinates:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: random value generation" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_9.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: usage of generated values in the request" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_10.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BTW&lt;/span&gt;, use &lt;span class="keys"&gt;&lt;kbd class="key-control"&gt;Ctrl&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-space"&gt;Space&lt;/kbd&gt;&lt;/span&gt; shortcut for the fastest template tag&amp;nbsp;autocomplete.&lt;/p&gt;
&lt;h2&gt;Reusing response&amp;nbsp;values&lt;/h2&gt;
&lt;p&gt;Another commonly used feature is sending a request with values from the response of another request. 
In Insomnia you should use &lt;code&gt;Response&lt;/code&gt; template tag and JSONPath if you want to grab a value from the response&amp;nbsp;body:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: pulling values from previous response" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_11.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Insomnia: request with pulled values" src="https://www.aviskase.com/articles/2020/04/22/using-insomnia-for-api-exploration/insomnia_12.png"&gt;&lt;/p&gt;
&lt;p&gt;Pretty simple,&amp;nbsp;huh? &lt;/p&gt;
&lt;p&gt;There are other useful features and no one stops you from writing a plugin if you miss anything. But, s&amp;rsquo;il te plaît,
don&amp;rsquo;t try to turn it into a complex automation solution. That&amp;rsquo;s what programming languages are&amp;nbsp;for. &lt;/p&gt;</content><category term="Testing"></category><category term="api"></category><category term="tools"></category><category term="practical"></category></entry><entry><title>Hmms: March</title><link href="https://www.aviskase.com/articles/2020/03/31/hmms-march/" rel="alternate"></link><published>2020-03-31T20:24:05-04:00</published><updated>2020-03-31T20:24:05-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-03-31:/articles/2020/03/31/hmms-march/</id><summary type="html">&lt;p&gt;Coronavirus-free&amp;nbsp;edition!&lt;/p&gt;
&lt;h2&gt;Top X Videos and&amp;nbsp;Readings&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Meme: APIs, APIs everywhere" src="https://www.aviskase.com/articles/2020/03/31/hmms-march/apis_meme.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Erik Wilde started a video series about &lt;span class="caps"&gt;API&lt;/span&gt; design, 
and &lt;a class="external" href="https://www.youtube.com/watch?v=qc_DF01qgZg"&gt;the last one&lt;/a&gt; covers pros and cons of exposing system&amp;nbsp;APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tyk explains &lt;a class="external" href="https://tyk.io/considerations-before-building-your-own-api-gateway/"&gt;why you shouldn&amp;rsquo;t write our own &lt;span class="caps"&gt;API&lt;/span&gt; gateway&lt;/a&gt;.
I particularly liked this&amp;nbsp;part:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another chose to build their own …&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Coronavirus-free&amp;nbsp;edition!&lt;/p&gt;
&lt;h2&gt;Top X Videos and&amp;nbsp;Readings&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Meme: APIs, APIs everywhere" src="https://www.aviskase.com/articles/2020/03/31/hmms-march/apis_meme.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Erik Wilde started a video series about &lt;span class="caps"&gt;API&lt;/span&gt; design, 
and &lt;a class="external" href="https://www.youtube.com/watch?v=qc_DF01qgZg"&gt;the last one&lt;/a&gt; covers pros and cons of exposing system&amp;nbsp;APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tyk explains &lt;a class="external" href="https://tyk.io/considerations-before-building-your-own-api-gateway/"&gt;why you shouldn&amp;rsquo;t write our own &lt;span class="caps"&gt;API&lt;/span&gt; gateway&lt;/a&gt;.
I particularly liked this&amp;nbsp;part:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another chose to build their own &lt;span class="caps"&gt;API&lt;/span&gt; gateway because no offerings existed that would operate in their 
preferred Windows-based server environment. 
I haven’t heard from them since as they still haven’t shipped their product &amp;mdash; a full year&amp;nbsp;later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adidas has awesome &lt;span class="caps"&gt;API&lt;/span&gt; guidelines and recently they&amp;rsquo;ve published &lt;a class="external" href="https://github.com/adidas/api-pm-training"&gt;their &lt;span class="caps"&gt;API&lt;/span&gt; training for PMs&lt;/a&gt;.
If they ever decide to offer public trainings, I would love to participate: some of the modules are a bit too
business-y for me to comprehend without hands-on&amp;nbsp;experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Almost non-&lt;span class="caps"&gt;API&lt;/span&gt; topic. Why you should always carefully read RFCs and standards: in this case,
&lt;a class="external" href="https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/"&gt;what is the proper input type for numbers&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Testing vs &lt;span class="caps"&gt;DX&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;While I was reading &lt;a class="external" href="https://nordicapis.com/why-your-api-needs-a-dedicated-developer-experience-team/"&gt;an article about &lt;span class="caps"&gt;DX&lt;/span&gt; teams&lt;/a&gt;,
it came to me that I&amp;rsquo;m (at least partially) not a tester. I mean, I knew it, but I didn&amp;rsquo;t have a proper name for&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;So, what does &lt;span class="caps"&gt;DX&lt;/span&gt; specialist&amp;nbsp;do?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;design &lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;QA&lt;/span&gt;. Clarification: not the obvious &amp;ldquo;I&amp;rsquo;m capable of sending requests&amp;rdquo; part, but more about contract testing, linting, 
style guides, and&amp;nbsp;docs.&lt;/li&gt;
&lt;li&gt;Tooling&lt;/li&gt;
&lt;li&gt;Developer&amp;nbsp;relations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What&amp;rsquo;s funny is that if you read that article carefully you won&amp;rsquo;t find any mentions of testers.
None. There are tech writers, advocates, but no testers whatsoever. In fact, in any non-Postman induced article about &lt;span class="caps"&gt;API&lt;/span&gt;
there are no presence of testers. &lt;em&gt;And it&amp;rsquo;s totally&amp;nbsp;fine.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Remote&amp;nbsp;Work&lt;/h2&gt;
&lt;p&gt;Sorry, it&amp;rsquo;s not totally coronavirus-free edition. Almost everyone works remotely now, so there is an avalanche of 
articles about how to work from home. The company I dearly love even decided to offer &lt;em&gt;a payed&lt;/em&gt; conference (frack&amp;nbsp;you).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve started my career as a fully remote worker and was there for three years. Next two years I was working from home
at least one day a week, often more. One would say I have immense amount of tips and tricks to share, but &lt;em&gt;I don&amp;rsquo;t&lt;/em&gt;. 
Because I&amp;rsquo;ve never been accustomed to the office work in the first place. I had to learn how to work &lt;span class="caps"&gt;NOT&lt;/span&gt; from&amp;nbsp;home.&lt;/p&gt;
&lt;p&gt;All the sad things aside, it&amp;rsquo;s curious how much this experience can change companies in the positive way. 
Some didn&amp;rsquo;t even consider before that their work can be done remotely. Perhaps we will see a surge of remote-friendly 
and/or flexible hours positions (which are rare at the&amp;nbsp;moment)?&lt;/p&gt;</content><category term="Hmms"></category></entry><entry><title>Hmms: February</title><link href="https://www.aviskase.com/articles/2020/03/08/hmms-february/" rel="alternate"></link><published>2020-03-08T00:35:17-05:00</published><updated>2020-03-08T00:35:17-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-03-08:/articles/2020/03/08/hmms-february/</id><summary type="html">&lt;p&gt;It&amp;rsquo;s March already, time to summarize&amp;nbsp;February!&lt;/p&gt;
&lt;h1&gt;APIs&amp;nbsp;Trainings&lt;/h1&gt;
&lt;p&gt;I did a small company-wide training about APIs. Here is &lt;a class="external" href="https://github.com/aviskase/trucs/blob/master/api101.pdf"&gt;the main deck&lt;/a&gt;
and &lt;a class="external" href="https://github.com/aviskase/trucs/blob/master/api_salad.pdf"&gt;supplementary deck&lt;/a&gt; left from dev lunch&amp;amp;learn. 
Anyone is free to use it and if you have questions just ping me somewhere. They don&amp;rsquo;t have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;rsquo;s March already, time to summarize&amp;nbsp;February!&lt;/p&gt;
&lt;h1&gt;APIs&amp;nbsp;Trainings&lt;/h1&gt;
&lt;p&gt;I did a small company-wide training about APIs. Here is &lt;a class="external" href="https://github.com/aviskase/trucs/blob/master/api101.pdf"&gt;the main deck&lt;/a&gt;
and &lt;a class="external" href="https://github.com/aviskase/trucs/blob/master/api_salad.pdf"&gt;supplementary deck&lt;/a&gt; left from dev lunch&amp;amp;learn. 
Anyone is free to use it and if you have questions just ping me somewhere. They don&amp;rsquo;t have notes, so can be pretty
cryptic, but I am inclined to continue improving them to use for new&amp;nbsp;hires. &lt;/p&gt;
&lt;p&gt;The most important feedback was from members of marketing and tech writing teams. I failed to properly address &amp;ldquo;why&amp;rsquo;s&amp;rdquo;
and they felt a bit lost. Which is a great reminder that by being constantly in the &amp;ldquo;dev soup,&amp;rdquo; you falsely assume that everyone
understands how immense APIs&amp;rsquo; power and impact&amp;nbsp;are.&lt;/p&gt;
&lt;h1&gt;Readings&lt;/h1&gt;
&lt;p&gt;&lt;a class="external" href="https://www.canada.ca/en/government/system/digital-government/modern-emerging-technologies/government-canada-standards-apis.html"&gt;Government of Canada published standards on APIs&lt;/a&gt;.
Not perfect, but it&amp;rsquo;s great to see not only corporates showing their development practices but also the public&amp;nbsp;sector.&lt;/p&gt;
&lt;p&gt;Curity suggested a simple &lt;a class="external" href="https://curity.io/resources/architect/api-security/the-api-security-maturity-model/"&gt;&amp;ldquo;&lt;span class="caps"&gt;API&lt;/span&gt; security maturity model&lt;/a&gt;.
All models are wrong, but some are useful, including this&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;While &lt;a class="external" href="https://www.a-sisyphean-task.com/2020/01/why-we-need-to-get-rid-of-thought.html?goal=0_02cca1920b-49fb91397f-289479173&amp;amp;mc_cid=49fb91397f&amp;amp;mc_eid=8933fe8877"&gt;&amp;ldquo;Why we need to get rid of thought leaders&amp;rdquo;&lt;/a&gt;
article by Adam Knight makes interesting points, I actually hoped it to cover &amp;ldquo;the leaders&amp;rdquo; problem. And this segues us
to the next&amp;nbsp;section&amp;hellip;&lt;/p&gt;
&lt;h1&gt;Leaders and Their&amp;nbsp;Followers&lt;/h1&gt;
&lt;p&gt;Perhaps I&amp;rsquo;m stating the obvious fact, but here it is: do not ever assume that appreciating content created
by the person correlates with wanting to be/stay a part of their community. Because true meanings are shown in 
&lt;a class="external" href="https://www.ted.com/talks/derek_sivers_how_to_start_a_movement/transcript?language=en"&gt;the interactions between the leader and the followers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I still have respect and hope for innovations from those people, I will keep it general. There are two communities,
both sparkled by well-known persons. I was eager to join both and quickly enough found them almost at odds. And 
while one is chill and mildly sarcastic about it, the other keeps being almost aggressive. The biggest
problem with the second community &lt;em&gt;for me&lt;/em&gt; is that the most vocal followers act as non-debatable intellectuals 
who paint everything in absolutes and this behavior is &lt;em&gt;supported by their leaders.&lt;/em&gt;  Well. You never know until you
dive&amp;nbsp;in. &lt;/p&gt;</content><category term="Hmms"></category></entry><entry><title>API Testing in Python: requests vs bravado</title><link href="https://www.aviskase.com/articles/2020/02/07/api-testing-in-python-requests-vs-bravado/" rel="alternate"></link><published>2020-02-07T23:40:44-05:00</published><updated>2020-02-07T23:40:44-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-02-07:/articles/2020/02/07/api-testing-in-python-requests-vs-bravado/</id><summary type="html">&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This article is written as a result of collaboration with &lt;a class="external" href="https://testproject.io/"&gt;TestProject&lt;/a&gt;. 
While many of you know me as &lt;a class="internal" href="https://www.aviskase.com/articles/2019/11/25/why-i-dont-use-postman/"&gt;a &lt;span class="caps"&gt;GUI&lt;/span&gt;-driven tools hater&lt;/a&gt;, 
that&amp;rsquo;s just my preference, so if something works for you and your company, that&amp;rsquo;s the only thing 
that matters. There are no best practices …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This article is written as a result of collaboration with &lt;a class="external" href="https://testproject.io/"&gt;TestProject&lt;/a&gt;. 
While many of you know me as &lt;a class="internal" href="https://www.aviskase.com/articles/2019/11/25/why-i-dont-use-postman/"&gt;a &lt;span class="caps"&gt;GUI&lt;/span&gt;-driven tools hater&lt;/a&gt;, 
that&amp;rsquo;s just my preference, so if something works for you and your company, that&amp;rsquo;s the only thing 
that matters. There are no best practices and there are no best tools for&amp;nbsp;everyone. &lt;/p&gt;
&lt;p&gt;What I really admire the TestProject team for is their strategy of creating a knowledge-sharing community.
And their product has a totally free usage tier. You don&amp;rsquo;t see such combo&amp;nbsp;often.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;API&lt;/span&gt; testing is not an uncommon topic and you can find a gazillion of articles about it. If you check tutorials in 
Java or JavaScript, you’ll notice that they use a plethora of diverse libraries. Yet for Python 
&lt;a class="external" href="https://www.dowen.me.uk/Automated-rest-api-testing-with-python/"&gt;tutorials&lt;/a&gt; are usually based on general-purpose 
&lt;a class="external" href="https://requests.kennethreitz.org"&gt;requests&lt;/a&gt; library. In this article, I would like to suggest a different&amp;nbsp;approach. &lt;/p&gt;
&lt;p&gt;Warning: all code examples are written and checked in Python 3.7.
&lt;a class="external" href="https://github.com/aviskase/testproject-api-example"&gt;You can find the source code here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;TestProject has an &lt;span class="caps"&gt;API&lt;/span&gt; based &lt;a class="external" href="https://api.testproject.io/docs/v2/"&gt;on OpenAPI 2.0 specification&lt;/a&gt;. 
I’ll use it as an example. If you want to try yourself, don’t forget to create an &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;key!&lt;/p&gt;
&lt;p&gt;Let’s start with the plain old &lt;em&gt;requests&lt;/em&gt; first. But before diving into coding, I suggest &lt;strong&gt;thinking&lt;/strong&gt; about what your 
framework should be capable of. Don’t spend too much time on the design though, premature overengineering is&amp;nbsp;harmful.&lt;/p&gt;
&lt;p&gt;TestProject &lt;span class="caps"&gt;API&lt;/span&gt; is structured around different resources and methods. For example, to get information about a specific 
project you should use &lt;code&gt;projects/{identifier}&lt;/code&gt; endpoint with method &lt;span class="caps"&gt;GET&lt;/span&gt;. You’ll probably soon get tired writing 
&lt;code&gt;request.get(&amp;lt;params&amp;gt;)&lt;/code&gt; all the time, so let’s create a custom function (or&amp;nbsp;method).&lt;/p&gt;
&lt;p&gt;The next commonly used piece is authorization. All calls to &lt;span class="caps"&gt;API&lt;/span&gt; require &lt;code&gt;Authorization&lt;/code&gt; header with your &lt;span class="caps"&gt;API&lt;/span&gt; key. 
But sometimes you want to pass additional headers, so your framework should support that as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;This is an example class I&amp;nbsp;wrote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;APITestProject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://api.testproject.io/v2&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;auth_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Sometimes we don&amp;#39;t want to authorize requests&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_construct_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Allows to combine authorization header with per-request custom headers&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth_headers&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_specific_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;/projects/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_construct_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it’s time to write simple tests. I use &lt;em&gt;pytest&lt;/em&gt; as a test runner because of its versatility and&amp;nbsp;pluggability.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests_client.api_testproject&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APITestProject&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;APITestProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_specific_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;existing_project&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_specific_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;existing_project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_nonexisting_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_specific_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iZyZmrbAAkuHyqdB3O6fHd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_specific_project_accept_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;existing_project&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_specific_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;existing_project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;406&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are not familiar with pytest fixtures, you can read about them in 
&lt;a class="external" href="https://docs.pytest.org/en/latest/fixture.html"&gt;the official documentation&lt;/a&gt;. In short, here I have three&amp;nbsp;fixtures: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;api_key&lt;/code&gt; — defined in &lt;code&gt;conftest.py&lt;/code&gt; and returns a string with my &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;existing_project&lt;/code&gt; — defined in &lt;code&gt;conftest.py&lt;/code&gt; and returns a string with id of one of my&amp;nbsp;project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api&lt;/code&gt; — constructs a default client for &lt;span class="caps"&gt;API&lt;/span&gt; using an &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tests are pretty&amp;nbsp;straightforward:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieve information about the existing&amp;nbsp;project.&lt;/li&gt;
&lt;li&gt;Attempt to get information using non-existing project&amp;nbsp;id.&lt;/li&gt;
&lt;li&gt;Attempt to retrieve information about the existing project while asking to send information in the &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;format.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They assert only responses’ status codes (not the best tests ever). But take a look at the last test. At the time 
of writing the only officially supported response content types were: &lt;code&gt;application/json&lt;/code&gt;, &lt;code&gt;text/json&lt;/code&gt;, &lt;code&gt;text/plain&lt;/code&gt;, and
&lt;code&gt;application/json-patch+json&lt;/code&gt;. Though, if you take a careful look at the description doc, you’ll notice that 
&lt;code&gt;application/xml&lt;/code&gt; is supported too. Anyway, with &lt;code&gt;Accept: text/html&lt;/code&gt; you’d expect server to respond with 
&lt;code&gt;406 Not Acceptable&lt;/code&gt;. Yet, that’s not the case: the current version responds with 200 code and plain text json body. 
It&amp;rsquo;s not a serious issue, but it&amp;rsquo;s worth exploring because it means that there are places where server capabilities 
don&amp;rsquo;t match the published description doc. I suspect it&amp;rsquo;s a sign of a design-first approach (which I like!), but it can 
be hard to&amp;nbsp;manage.&lt;/p&gt;
&lt;p&gt;As you noticed, for creating &lt;span class="caps"&gt;API&lt;/span&gt; tests using requests library we need to write a lot of boilerplate&amp;nbsp;code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wrappers for headers and query string&amp;nbsp;managements.&lt;/li&gt;
&lt;li&gt;Methods/functions written in business terms rather than &lt;span class="caps"&gt;GET&lt;/span&gt;/&lt;span class="caps"&gt;POST&lt;/span&gt;/etc&amp;nbsp;way.&lt;/li&gt;
&lt;li&gt;Constructing endpoints path (concatenating the main &lt;span class="caps"&gt;URL&lt;/span&gt; with paths, ids, and query&amp;nbsp;parameters).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, you create a whole &lt;span class="caps"&gt;API&lt;/span&gt; client. And we haven’t even touched data models. Oh, if only this could be 
simplified and automated, right? And it can! Welcome to the brave &lt;em&gt;old&lt;/em&gt; world of client generation based on &lt;span class="caps"&gt;API&lt;/span&gt; 
description docs. TestProject doesn&amp;rsquo;t just provide endpoints but also has a description doc to describe their &lt;span class="caps"&gt;API&lt;/span&gt;. 
Currently, it’s based on Open &lt;span class="caps"&gt;API&lt;/span&gt; 2.0, or, as many people still call it, Swagger. This description doc is used to 
generate a documentation &lt;span class="caps"&gt;UI&lt;/span&gt; with &amp;ldquo;Try out&amp;rdquo; capabilities, and it also can be used for client generation. Personally, I 
ended up using &lt;a class="external" href="https://github.com/Yelp/bravado"&gt;bravado&lt;/a&gt; library for this&amp;nbsp;task.&lt;/p&gt;
&lt;p&gt;Here is how our small class will look with&amp;nbsp;bravado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bravado.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SwaggerClient&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bravado.requests_client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RequestsClient&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;APITestProject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;api.testproject.io&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;swagger_spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://api.testproject.io/docs/v2/swagger.json&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;swagger_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;swagger.json&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;http_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequestsClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;http_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_api_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param_in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;header&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Usually I&amp;#39;ll use `from_url` generation, but current version of specification is not valid OpenAPI 2.0&lt;/span&gt;
        &lt;span class="c1"&gt;# self.client = SwaggerClient.from_url(self.swagger_spec, http_client=http_client)&lt;/span&gt;
        &lt;span class="n"&gt;swagger_spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swagger_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SwaggerClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swagger_spec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http_client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;http_client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two ways to generate a client with bravado: pointing either to &lt;span class="caps"&gt;URL&lt;/span&gt; where description doc is hosted or to 
the local file. The example uses local file because bravado doesn&amp;rsquo;t just simply generate client, but also can 
perform validation, and unfortunately at the time of writing TestProject &lt;span class="caps"&gt;API&lt;/span&gt; description doc contains some invalid 
attributes. But that’s a great thing! Even though developers should be using linters to check for such problems, it 
is still a good idea to recheck during integration tests. Another nice feature is that bravado performs requests and 
response validation, which can help find dynamic problems. For example, if the description doc says that the field in 
the response should be an integer, yet you received a string, you’ll get an exception even if there were no explicit 
assertions for that field in the test. Of course, you can disable all validations, though, I wouldn&amp;rsquo;t recommend&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;So, let’s go back to the tests and see how they look with bravado based&amp;nbsp;client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bravado.exception&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTTPNotAcceptable&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bravado_client.api_testproject&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APITestProject&lt;/span&gt;


&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;APITestProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_specific_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;existing_project&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Projects_GetProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;projectId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;existing_project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_nonexisting_project&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTTPNotFound&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Projects_GetProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;projectId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iZyZmrbAAkuHyqdB3O6fHd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_get_specific_project_accept_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;existing_project&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTTPNotAcceptable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Projects_GetProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;projectId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;existing_project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;_request_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;headers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Did you notice magic there? I don’t need to write code with GETs anymore. Bravado generates resources and methods 
for them automagically. Usually, they are based on tag and &lt;code&gt;operationId&lt;/code&gt;, so for getting a specific project: 
&lt;code&gt;tag=Projects&lt;/code&gt; and &lt;code&gt;operationId=Projects_GetProject&lt;/code&gt;. Another difference is that bravado throws an exception if the 
response code is not 2xx. In my view, &lt;code&gt;HTTPNotAcceptable&lt;/code&gt; is more readable than a number&amp;nbsp;406.&lt;/p&gt;
&lt;p&gt;Now it’s time to check how using client generation library helps to improve on a barebone approach with&amp;nbsp;requests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No need for custom headers and query string management, it’s already written by library developers. 
With bravado you can have default headers for each request as well as per request custom&amp;nbsp;headers.&lt;/li&gt;
&lt;li&gt;Methods/functions are generated and sound more domain-specific (though, it depends on how accurate was 
naming of&amp;nbsp;operationIds).&lt;/li&gt;
&lt;li&gt;The only endpoint you should worry about is where the description doc is hosted, or, if using the local file, 
the &lt;code&gt;host&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don’t forget, all magic comes with a price. Client generators are not perfect for&amp;nbsp;everyone:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Autogeneration is useless for constantly changing APIs. Though, it’s considered a bad practice, 
because real customers also use client generators and each breaking change is a pain for&amp;nbsp;them.&lt;/li&gt;
&lt;li&gt;Sometimes you want to make invalid requests. In some cases, you can simply turn off request validation, 
but usually making real fuzzy tests is easier with general-purpose &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;libraries.&lt;/li&gt;
&lt;li&gt;Not your code. There could be bugs. Be careful when selecting a library, it’s better to be open source with 
fresh contributions. Also, pay attention to supported specifications: bravado does not support OpenAPI 3.0&amp;nbsp;=(&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The world of &lt;span class="caps"&gt;API&lt;/span&gt; related tools and libraries is enormous. Some people prefer &lt;span class="caps"&gt;GUI&lt;/span&gt;-driven tools like Postman or 
TestProject, others prefer to code. Next time you’ll be writing automation, don’t feel restricted to common generic 
libraries and consider different&amp;nbsp;alternatives. &lt;/p&gt;</content><category term="Testing"></category><category term="api"></category><category term="practical"></category><category term="tools"></category></entry><entry><title>Hmms: January</title><link href="https://www.aviskase.com/articles/2020/02/01/hmms-january/" rel="alternate"></link><published>2020-02-01T23:16:38-05:00</published><updated>2020-02-01T23:16:38-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2020-02-01:/articles/2020/02/01/hmms-january/</id><summary type="html">&lt;p&gt;Hi! Weekly hmms are transformed into monthly hmms, mostly because writing mandatory weekly posts is too cumbersome 
and leaves no time to do more thematic writing. Of course, there are other reasons too. Almost all winter holidays 
I had a cold (&lt;span class="caps"&gt;TWICE&lt;/span&gt;!) and being ill isn&amp;rsquo;t the best motivation …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi! Weekly hmms are transformed into monthly hmms, mostly because writing mandatory weekly posts is too cumbersome 
and leaves no time to do more thematic writing. Of course, there are other reasons too. Almost all winter holidays 
I had a cold (&lt;span class="caps"&gt;TWICE&lt;/span&gt;!) and being ill isn&amp;rsquo;t the best motivation&amp;nbsp;ever. &lt;/p&gt;
&lt;h2&gt;Knowledge&amp;nbsp;Bits&lt;/h2&gt;
&lt;p&gt;I didn&amp;rsquo;t read or watch much, but some of the interesting findings&amp;nbsp;were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://servicemesh.io/"&gt;A good site&amp;amp;article about service meshes&lt;/a&gt; Be wary though, the author is quite&amp;nbsp;opinionated.&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.youtube.com/watch?v=O8Hx4tFW4PU"&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;Crafting effective 1:1s for distributed teams&amp;rdquo;&lt;/a&gt; talk by Spencer&amp;nbsp;Norman.&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://phil.tech/api/2019/12/28/modern-web-api-frameworks/"&gt;What Phil Sturgeon expects from modern Web &lt;span class="caps"&gt;API&lt;/span&gt; frameworks&lt;/a&gt;. He expects a lot&amp;nbsp;=)&lt;/li&gt;
&lt;li&gt;Great summary about &lt;a class="external" href="https://martinfowler.com/articles/on-pair-programming.html"&gt;pair programming by Birgitta Böckeler and Nina Siessegger&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A very old article &lt;a class="external" href="https://pdfs.semanticscholar.org/7eee/629b22cd3db63296cac13a0c37cb0a7235f6.pdf"&gt;by Robert L. Glass on fundamental software engineering facts&lt;/a&gt;. Perhaps some of the facts are questionable, but &amp;ldquo;Reviews and inspections&amp;rdquo; section is&amp;nbsp;awesome.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Work&amp;nbsp;Things&lt;/h2&gt;
&lt;p&gt;The company I work for was recognized as one of &lt;a class="external" href="https://reviews.canadastop100.com/top-employer-netgovern"&gt;Montreal&amp;rsquo;s top employers&lt;/a&gt;. 
While I&amp;rsquo;m quite skeptical of such ratings and rewards, I know for sure that &lt;em&gt;we are better than some other&amp;nbsp;winners.&lt;/em&gt; &lt;/p&gt;
&lt;h2&gt;Gaming&lt;/h2&gt;
&lt;p&gt;Ouch. Even though I was near computers from birth, I never was a gamer. I played&amp;nbsp;only:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;old Tomb Raiders (up until missions with driving: I suck at&amp;nbsp;it), &lt;/li&gt;
&lt;li&gt;Lineage2 (started playing because classmates were talking about it, but it&amp;rsquo;s impossible to solo&amp;nbsp;there)&lt;/li&gt;
&lt;li&gt;Dofus / Wakfu (to learn&amp;nbsp;French)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Strictly speaking, my approach is more of a &amp;ldquo;watcher.&amp;rdquo; I watched my father play Wolfenstein, Doom, and Quake. And I&amp;rsquo;m 
subscribed to &lt;a class="external" href="https://www.youtube.com/user/SovietWomble"&gt;SovietWomble channel&lt;/a&gt;. &lt;span class="caps"&gt;BTW&lt;/span&gt;, it&amp;rsquo;s really awesome, once you watch
one or two videos and understand relationships between Soviet, Cy, and others, you&amp;rsquo;d perceive these videos not as some
gaming stream cuts, but as a real-life sitcom. Honestly, way funnier than &lt;span class="caps"&gt;TBBT&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Recently I&amp;rsquo;ve read an article about space/volume perception. Usually, you learn how to properly calculate your own 
&amp;ldquo;body volume&amp;rdquo; and other objects&amp;rsquo; during childhood. In my case, it didn&amp;rsquo;t work out well, so I still have trouble navigating
narrow spaces. Combined with slow conscious reaction time it&amp;rsquo;s a no-no for driving. Yet, apparently, computer games
prove to be very effective in improving volume perception and reaction times for&amp;nbsp;adults. &lt;/p&gt;
&lt;p&gt;I also wanted to do something other than watching YouTube during the braindead moments. So, I&amp;rsquo;ve decided to find a 
solo-friendly game, with a big open world, not hardcore, 
and preferable &lt;span class="caps"&gt;MMO&lt;/span&gt;: even though I prefer to play by myself, there is something comforting in seeing real people 
around and occasionally helping others (or receiving help). The perfect choice is The Elder Scrolls Online. The other
recommended game is Star Wars: The Old Republic, but it&amp;rsquo;s too much Star Wars today. And &lt;span class="caps"&gt;TES&lt;/span&gt; has great lore. 
Even though I never played Skyrim or Morrowind, &lt;span class="caps"&gt;TES&lt;/span&gt; wiki is an awesome read for people interested in sci-fi &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; fantasy&amp;nbsp;genres.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;FYI&lt;/span&gt;, I play on the &lt;span class="caps"&gt;PC&lt;/span&gt; &lt;span class="caps"&gt;NA&lt;/span&gt; server&amp;nbsp;;)&lt;/p&gt;</content><category term="Hmms"></category></entry><entry><title>Lunch&amp;Learn: Linting OpenAPI Description Docs</title><link href="https://www.aviskase.com/articles/2019/12/26/lunchlearn-linting-openapi-description-docs/" rel="alternate"></link><published>2019-12-26T19:21:00-05:00</published><updated>2019-12-26T19:21:00-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-12-26:/articles/2019/12/26/lunchlearn-linting-openapi-description-docs/</id><summary type="html">&lt;p&gt;Last yearly company retrospective showed that we want to be better at knowledge sharing. One of the suggested formats is Lunch&amp;amp;Learn, kinda like Google&amp;rsquo;s &lt;a class="external" href="https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html"&gt;Testing on the Toilet&lt;/a&gt;: short non-mandatory meeting during the lunchtime (30min) with shared recording&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve started to use them for &lt;span class="caps"&gt;API&lt;/span&gt; related …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last yearly company retrospective showed that we want to be better at knowledge sharing. One of the suggested formats is Lunch&amp;amp;Learn, kinda like Google&amp;rsquo;s &lt;a class="external" href="https://testing.googleblog.com/2007/01/introducing-testing-on-toilet.html"&gt;Testing on the Toilet&lt;/a&gt;: short non-mandatory meeting during the lunchtime (30min) with shared recording&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve started to use them for &lt;span class="caps"&gt;API&lt;/span&gt; related topics. Tools, terminology, and other small but important things that would be beneficial to most of the development team (&lt;span class="caps"&gt;FYI&lt;/span&gt;, &lt;em&gt;testers are part of the dev team, duh&lt;/em&gt;). Also, it&amp;rsquo;s an opportunity to organize my brain, so I&amp;rsquo;ll be posting notes here for future reference. One thing though, &lt;strong&gt;these posts are not supposed to be comprehensive:&lt;/strong&gt; there is only information applicable to my&amp;nbsp;team!&lt;/p&gt;
&lt;h2&gt;Validation vs.&amp;nbsp;Linting&lt;/h2&gt;
&lt;p&gt;Anyone remotely familiar with coding knows that validators and linters are important for successful development. Shortly, validators check &amp;ldquo;does X conform to the standards/specification,&amp;rdquo; whereas linters complain about style and design issues. Usually, tools combine both in some&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;Here I&amp;rsquo;ll cover linters for OpenAPI description documents. But you can use linting for everything, from obvious source code files to shell scripts or markdown&amp;nbsp;documents.&lt;/p&gt;
&lt;h2&gt;Why We Need a Linter for OpenAPI Description&amp;nbsp;Docs&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve started writing style guidelines for our APIs. Usually, I am that nitpicky person to review description docs; but I am lazy. &lt;em&gt;I choose to automate myself out of the job.&lt;/em&gt; I don&amp;rsquo;t want to spend time checking for obvious style violations like capitalization or error definitions. And by the way, it would speed up the&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;Because of that, our current requirements for the linter&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy to set up and run locally (so that devs and testers could use it without&amp;nbsp;pain)&lt;/li&gt;
&lt;li&gt;can be run via&amp;nbsp;Jenkins&lt;/li&gt;
&lt;li&gt;possible to customize with our own&amp;nbsp;rules&lt;/li&gt;
&lt;li&gt;support for OpenAPI&amp;nbsp;2&lt;/li&gt;
&lt;li&gt;has a future: development is active and there is at least the possibility of OpenAPI 3&amp;nbsp;support&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Current Implicit&amp;nbsp;Validation&lt;/h2&gt;
&lt;p&gt;Right now we have description docs validation during integration tests, where we use &lt;a class="external" href="https://github.com/Yelp/bravado"&gt;bravado&lt;/a&gt; library for client generation. By default, it has some validation on doc load, and if the doc is invalid, bravado will complain. Internally it uses &lt;a class="external" href="https://github.com/Yelp/swagger_spec_validator"&gt;swagger_spec_validator&lt;/a&gt;. Here is a small script to show how it&amp;rsquo;s typical &lt;em&gt;exceptional&lt;/em&gt; output looks&amp;nbsp;like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;swagger_spec_validator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;validate_spec_url&lt;/span&gt;


&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;openapi_spec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_uri&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;validate_spec_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openapi_spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜ python validate.py  api.json
Traceback (most recent call last):
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/common.py&amp;quot;, line 24, in wrapper
    return method(*args, **kwargs)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/util.py&amp;quot;, line 60, in validate_spec_url
    validator.validate_spec(spec_json, spec_url)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&amp;quot;, line 170, in validate_spec
    validate_apis(apis, bound_deref)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&amp;quot;, line 376, in validate_apis
    validate_unresolvable_path_params(api_name, all_path_params)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&amp;quot;, line 602, in validate_unresolvable_path_params
    raise SwaggerValidationError(msg)
swagger_spec_validator.common.SwaggerValidationError: Path parameter &amp;#39;tenantID&amp;#39; used is not documented on &amp;#39;/{tenantID}/administrators/&amp;#39;

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &amp;quot;validate.py&amp;quot;, line 12, in &amp;lt;module&amp;gt;
    validate_spec_url(p.openapi_spec)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/common.py&amp;quot;, line 29, in wrapper
    sys.exc_info()[2])
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/six.py&amp;quot;, line 695, in reraise
    raise value.with_traceback(tb)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/common.py&amp;quot;, line 24, in wrapper
    return method(*args, **kwargs)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/util.py&amp;quot;, line 60, in validate_spec_url
    validator.validate_spec(spec_json, spec_url)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&amp;quot;, line 170, in validate_spec
    validate_apis(apis, bound_deref)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&amp;quot;, line 376, in validate_apis
    validate_unresolvable_path_params(api_name, all_path_params)
  File &amp;quot;&amp;lt;...&amp;gt;/venv/lib/python3.7/site-packages/swagger_spec_validator/validator20.py&amp;quot;, line 602, in validate_unresolvable_path_params
    raise SwaggerValidationError(msg)
swagger_spec_validator.common.SwaggerValidationError: (&amp;quot;Path parameter &amp;#39;tenantID&amp;#39; used is not documented on &amp;#39;/{tenantID}/administrators/&amp;#39;&amp;quot;, SwaggerValidationError(&amp;quot;Path parameter &amp;#39;tenantID&amp;#39; used is not documented on &amp;#39;/{tenantID}/administrators/&amp;#39;&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also, bravado performs bits of contract testing: by default, it validates incoming responses against description&amp;nbsp;docs.&lt;/p&gt;
&lt;p&gt;It serves us nice, but feedback is slow. At least we know when our spec is blatantly broken (beloved duplication of &lt;code&gt;operationId&lt;/code&gt;s).&lt;/p&gt;
&lt;h2&gt;Zally&lt;/h2&gt;
&lt;p&gt;&lt;a class="external" href="https://github.com/zalando/zally"&gt;Zally&lt;/a&gt; is a linter from Zalando, which is famous for its open-sourced &lt;a class="external" href="https://opensource.zalando.com/restful-api-guidelines/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It ticks all our requirements except for the ease of setup: Zally is written in Kotlin. I was too lazy even to try running it. I&amp;rsquo;m sure it&amp;rsquo;s an excellent tool, but not for&amp;nbsp;us.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BTW&lt;/span&gt;, it has nice &lt;span class="caps"&gt;UI&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Zally web UI with violations highlighting and links" src="https://www.aviskase.com/articles/2019/12/26/lunchlearn-linting-openapi-description-docs/zally.png"&gt;&lt;/p&gt;
&lt;h2&gt;Speccy&lt;/h2&gt;
&lt;p&gt;Welcome to JavaScript galore. &lt;a class="external" href="https://github.com/wework/speccy"&gt;Speccy&lt;/a&gt; and all next linters are run using node.js. Even though I&amp;rsquo;m not a fan of &lt;span class="caps"&gt;JS&lt;/span&gt;, it&amp;rsquo;s easy to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;So, back to Speccy. It was a popular tool once, but won&amp;rsquo;t work in our&amp;nbsp;company:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no support for OpenAPI&amp;nbsp;2&lt;/li&gt;
&lt;li&gt;is (was?) developed by WeWork.&amp;nbsp;Ouch.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;IBM&lt;/span&gt; OpenAPI&amp;nbsp;Validator&lt;/h2&gt;
&lt;p&gt;&lt;a class="external" href="https://github.com/IBM/openapi-validator"&gt;The next candidate is from &lt;span class="caps"&gt;IBM&lt;/span&gt;&lt;/a&gt;. Respectable origin.  I like how it reports problems with the exact origins of&amp;nbsp;errors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜ npx ibm-openapi-validator -e api.json
npx: installed 244 in 5.108s

errors

  Message :   PUT and POST operations must have a non-empty `consumes` field.
  Path    :   paths./{tenantID}/saml/{SAMLApplicationID}/metadata.xml.post.consumes
  Line    :   20

  Message :   operationIds must be unique
  Path    :   paths./{tenantID}/saml/{SAMLApplicationID}/metadata.xml.post.operationId
  Line    :   20

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, it&amp;rsquo;s not customizable enough. You can only tweak existing rules, change severity, or disable&amp;nbsp;them.&lt;/p&gt;
&lt;h2&gt;Spectral&lt;/h2&gt;
&lt;p&gt;And the last one, &lt;a class="external" href="https://stoplight.io/p/docs/gh/stoplightio/spectral"&gt;Spectral&lt;/a&gt;. As far as I know, a clear&amp;nbsp;winner:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;core devs are also contributors to OpenAPI and &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;Schema&lt;/li&gt;
&lt;li&gt;the most flexible, adding new rules is easy (&lt;a class="external" href="https://github.com/openapi-contrib/style-guides"&gt;examples&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The one smallish problem I see is that the &lt;span class="caps"&gt;CLI&lt;/span&gt; report is not as fun as &lt;span class="caps"&gt;IBM&lt;/span&gt;&amp;rsquo;s, just line&amp;nbsp;numbers. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;➜ npx @stoplight/spectral lint -DF error api.json
OpenAPI 2.0 (Swagger) detected

/&amp;lt;...&amp;gt;/api.json
  3972:24  error  operation-operationId-unique   Every operation must have a unique `operationId`.
  4024:24  error  operation-operationId-unique   Every operation must have a unique `operationId`.
  5029:17  error  oas2-valid-definition-example  `example` property type should be object
 11602:26  error  no-$ref-siblings               $ref cannot be placed next to any other properties

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can either use Stoplight Studio or integrate with your &lt;span class="caps"&gt;IDE&lt;/span&gt; of choice to click lazily on an error to go to its source: I did with Sublime and SublimeLinter plugin, worked fine. PyCharm (and other IDEAs) are ok&amp;nbsp;too.&lt;/p&gt;</content><category term="Testing"></category><category term="api"></category><category term="practical"></category><category term="tools"></category></entry><entry><title>Weekly Hmms: API Practices, Yegor Bugaenko, Culture</title><link href="https://www.aviskase.com/articles/2019/12/21/weekly-hmms-api-practices-yegor-bugaenko-culture/" rel="alternate"></link><published>2019-12-21T19:33:46-05:00</published><updated>2019-12-21T19:33:46-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-12-21:/articles/2019/12/21/weekly-hmms-api-practices-yegor-bugaenko-culture/</id><summary type="html">&lt;h2&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Practices If You Hate Your&amp;nbsp;Customers&lt;/h2&gt;
&lt;p&gt;A fun &lt;a class="external" href="https://queue.acm.org/detail.cfm?ref=rss&amp;amp;id=3375635"&gt;article from &lt;span class="caps"&gt;ACM&lt;/span&gt; Queue magazine&lt;/a&gt; about how to alienate
customers from using your &lt;span class="caps"&gt;API&lt;/span&gt;. I like an &lt;a class="external" href="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/"&gt;&amp;ldquo;anti-tutorial&amp;rdquo; form&lt;/a&gt;, 
it is easier to recall bad patterns and&amp;nbsp;behaviors.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One such form I filled out required me to describe the application I …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;h2&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Practices If You Hate Your&amp;nbsp;Customers&lt;/h2&gt;
&lt;p&gt;A fun &lt;a class="external" href="https://queue.acm.org/detail.cfm?ref=rss&amp;amp;id=3375635"&gt;article from &lt;span class="caps"&gt;ACM&lt;/span&gt; Queue magazine&lt;/a&gt; about how to alienate
customers from using your &lt;span class="caps"&gt;API&lt;/span&gt;. I like an &lt;a class="external" href="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/"&gt;&amp;ldquo;anti-tutorial&amp;rdquo; form&lt;/a&gt;, 
it is easier to recall bad patterns and&amp;nbsp;behaviors.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One such form I filled out required me to describe the application I planned to write. &amp;lt;&amp;hellip;&amp;gt;
Sadly, I didn&amp;rsquo;t have a particular application in mind. I was going to explore the &lt;span class="caps"&gt;API&lt;/span&gt; and write a few simple 
Python-based utilities to automate some daily tasks. I didn&amp;rsquo;t want to explain all that, however, for fear that 
my answer would not be good enough for whoever was judging my application. 
In a panic, I simply described my application as &amp;ldquo;dark purple with white highlights.&amp;rdquo; 
A few weeks later my application was approved. So far, I haven&amp;rsquo;t been visited by any auditor &lt;span class="caps"&gt;SWAT&lt;/span&gt; teams, 
but as a precaution my code editor has been themed in dark purple with white highlights ever&amp;nbsp;since.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This particular quote hit&amp;nbsp;hard:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nothing says &amp;ldquo;we don&amp;rsquo;t actually want you to use our &lt;span class="caps"&gt;API&lt;/span&gt;&amp;rdquo; like making your &lt;span class="caps"&gt;API&lt;/span&gt; documentation invisible 
to search engines. The &amp;ldquo;build, run, debug&amp;rdquo; cycle of decades ago has been replaced by &amp;ldquo;run, crash, Google,&amp;nbsp;fix.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once we tried to research our competitors and we couldn&amp;rsquo;t find even screenshots. How the hell 
a potential customer is supposed to evaluate your product if you hide &lt;strong&gt;everything&lt;/strong&gt;?&lt;/p&gt;
&lt;h2&gt;Yegor Bugaenko on &lt;span class="caps"&gt;QA&lt;/span&gt; vs&amp;nbsp;Testing&lt;/h2&gt;
&lt;p&gt;Yegor Bugaenko presented &lt;a class="external" href="https://www.youtube.com/watch?v=jZitXMQaXvE"&gt;&amp;ldquo;Quality Assurance vs. Testing&amp;rdquo; on &lt;span class="caps"&gt;QA&lt;/span&gt; Fest 2019&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And I am&amp;nbsp;disappointed. &lt;/p&gt;
&lt;p&gt;For those who don&amp;rsquo;t know Yegor, he is famous for controversial &lt;a class="external" href="https://www.xdsd.org/"&gt;eXtremely Distributed Software Development&lt;/a&gt; 
methodology. One of the ideas is to pay only for closed&amp;nbsp;tasks.&lt;/p&gt;
&lt;p&gt;So, I grabbed popcorn and expected blood and gore. Didn&amp;rsquo;t happen, it was dull, except for one or two topics.
The talk started with an obvious difference between &lt;span class="caps"&gt;QA&lt;/span&gt; and testing and moved to explain the importance of 
quantitative metrics to measure tester&amp;rsquo;s productivity. Unfortunately, he suggested the most stupid metric ever: the 
number of bugs logged. I also was annoyed by his notion that testers should not talk to devs much and must log every issue. 
My practice shows that working with dev together and fixing bugs as we go is way more productive and requires less time. 
Perhaps, his ideas works in &lt;span class="caps"&gt;XDSD&lt;/span&gt;, where everyone is expendable, but I hope others won&amp;rsquo;t borrow them into normal agile&amp;nbsp;teams.&lt;/p&gt;
&lt;h2&gt;Cultures and&amp;nbsp;Sci-Fi&lt;/h2&gt;
&lt;p&gt;Speaking of&amp;nbsp;teams.&lt;/p&gt;
&lt;p&gt;Prelude: I&amp;rsquo;m a fan of space sci-fi series. Not a nerd, but I watched my&amp;nbsp;share:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Star Trek: &lt;span class="caps"&gt;TOS&lt;/span&gt; (bits), &lt;span class="caps"&gt;TNG&lt;/span&gt;, &lt;span class="caps"&gt;DS9&lt;/span&gt;, Voyager,&amp;nbsp;Enterprise&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;LEXX&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Battlestar Galactica (with spin-offs, except&amp;nbsp;Caprica)&lt;/li&gt;
&lt;li&gt;Firefly&lt;/li&gt;
&lt;li&gt;Babylon 5 (and all&amp;nbsp;spin-offs)&lt;/li&gt;
&lt;li&gt;Farscape&lt;/li&gt;
&lt;li&gt;Andromeda&lt;/li&gt;
&lt;li&gt;Stargate &lt;span class="caps"&gt;SG&lt;/span&gt;-1 (in&amp;nbsp;progress)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you may notice, there is no Expanse, Orville, or new Star Treks (Discovery, Short Trek). We watch only
finished stuff. I hope to avoid spoilers, but it&amp;rsquo;s impossible with the new Star Treks. Also, I doubt I would even
want to watch them (mushroom drives? horrid&amp;nbsp;Klingons??).&lt;/p&gt;
&lt;p&gt;This week I stumbled upon a &lt;a class="external" href="https://www.youtube.com/watch?v=rnlxugk3Qb0"&gt;comparison between &lt;span class="caps"&gt;TNG&lt;/span&gt; and Short Trek&lt;/a&gt;. 
How this is related to teams and culture? Well, the basic problem is the same for both series: a crew member with a quirky 
behavior who doesn&amp;rsquo;t fit a&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;TNG&lt;/span&gt; solved the problem by trying to help Lieutenant Barclay to overcome his anxiety and integrate into the team. 
While he remained awkward for the rest of the series, some of his quirks were channeled into a productive direction and
helped to save the crew numerous&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;Short Trek&amp;rsquo;s approach was&amp;hellip; different. Edward Larkin died and was called an idiot by his &lt;em&gt;&amp;ldquo;competent&amp;rdquo;&lt;/em&gt; captain. 
Just watch it. The captain wanted to transfer that scientist even &lt;em&gt;before he made a mistake.&lt;/em&gt; Show defenders say that 
it&amp;rsquo;s just a comedy, but these series are not marketed as a parody show.  It&amp;rsquo;s a canon now. Which means, 
that obnoxious and demeaning conduct of the captain is considered ok in that universe. No one reprimanded her for
causing an ecological disaster, and she never showed any remorse for the &amp;ldquo;idiot&amp;rsquo;s&amp;rdquo;&amp;nbsp;death. &lt;/p&gt;
&lt;p&gt;I understand that showrunners are just money hoarders and want to have a comedy because it&amp;rsquo;s profitable. They 
probably never consider how it affects existing&amp;nbsp;canon. &lt;/p&gt;
&lt;p&gt;Still. I wonder, what this &lt;em&gt;modern&lt;/em&gt; approach tells about our&amp;nbsp;society? &lt;/p&gt;</content><category term="Weekly Hmms"></category></entry><entry><title>Weekly Hmms: Advent of Code, NGINX, APIs</title><link href="https://www.aviskase.com/articles/2019/12/14/weekly-hmms-advent-of-code-nginx-apis/" rel="alternate"></link><published>2019-12-14T22:32:58-05:00</published><updated>2019-12-14T22:32:58-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-12-14:/articles/2019/12/14/weekly-hmms-advent-of-code-nginx-apis/</id><summary type="html">&lt;h2&gt;Advent Of&amp;nbsp;Code&lt;/h2&gt;
&lt;p&gt;Last week I forgot to mention that I started solving the &lt;a class="external" href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; challenges. This is my first year, so I don&amp;rsquo;t even try to have elegant solutions. Old trusty Python, &lt;a class="external" href="https://github.com/aviskase/advent-of-code"&gt;lists&amp;rsquo; and dicts&amp;rsquo; galore&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The reason is simple: the goal is to go through …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Advent Of&amp;nbsp;Code&lt;/h2&gt;
&lt;p&gt;Last week I forgot to mention that I started solving the &lt;a class="external" href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; challenges. This is my first year, so I don&amp;rsquo;t even try to have elegant solutions. Old trusty Python, &lt;a class="external" href="https://github.com/aviskase/advent-of-code"&gt;lists&amp;rsquo; and dicts&amp;rsquo; galore&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The reason is simple: the goal is to go through all 25 days. Being consistent is not easy, and today I had to solve two days because of yesterday&amp;rsquo;s Christmas&amp;nbsp;party.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;NGINX&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="external" href="https://meduza.io/en/feature/2019/12/13/what-s-yours-is-ours"&gt;The news about police raids in &lt;span class="caps"&gt;NGINX&lt;/span&gt; office&lt;/a&gt; is at the same time surprising and not. Before there were VKontakte and Euroset; for some reason being honestly successful is not allowed in&amp;nbsp;Russia.&lt;/p&gt;
&lt;h2&gt;APIs&lt;/h2&gt;
&lt;p&gt;&lt;a class="external" href="https://idratherbewriting.com/blog/api-design-usability-arnaud-lauret-podcast/"&gt;Tom Johnson released a podcast with Arnaud Lauret&lt;/a&gt;. Even though it&amp;rsquo;s a tech writing perspective, I strongly recommend testers to check it out. Laments about not being able to influence design are fun to hear: it&amp;rsquo;s almost like Agile, DevOps, WhatNotOps missed out tech&amp;nbsp;writers.&lt;/p&gt;
&lt;p&gt;Also, I found two interesting &lt;span class="caps"&gt;API&lt;/span&gt; related newsletters: &lt;a class="external" href="https://apideveloperweekly.com/"&gt;&amp;ldquo;&lt;span class="caps"&gt;API&lt;/span&gt; Developer Weekly&amp;rdquo;&lt;/a&gt; and&lt;a class="external" href="https://tinyletter.com/NetAPINotes/archive"&gt;&amp;ldquo;Net &lt;span class="caps"&gt;API&lt;/span&gt; Notes&amp;rdquo;&lt;/a&gt;. If you look at the signup page for the first one, I bet you will notice that it doesn&amp;rsquo;t mention testers. I wonder, is it because their team follows &lt;span class="caps"&gt;MT&lt;/span&gt;-like approach and includes testers into dev set? Hope&amp;nbsp;so.&lt;/p&gt;</content><category term="Weekly Hmms"></category></entry><entry><title>Weekly Hmms: Communities, Laptops &amp; Linux</title><link href="https://www.aviskase.com/articles/2019/12/07/weekly-hmms-communities-laptops-linux/" rel="alternate"></link><published>2019-12-07T23:50:35-05:00</published><updated>2019-12-07T23:50:35-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-12-07:/articles/2019/12/07/weekly-hmms-communities-laptops-linux/</id><summary type="html">&lt;p&gt;This time, the proper title would be &amp;ldquo;Weekly&amp;nbsp;Arghs.&amp;rdquo;&lt;/p&gt;
&lt;h2&gt;Testing&amp;nbsp;Communities&lt;/h2&gt;
&lt;p&gt;When I decided to become a tester, the first-ever topic I encountered was &lt;del&gt;discussions&lt;/del&gt; rants about &amp;ldquo;&lt;span class="caps"&gt;ISO&lt;/span&gt;/&lt;span class="caps"&gt;IEC&lt;/span&gt;/&lt;span class="caps"&gt;IEEE&lt;/span&gt; 29119 Software Testing&amp;rdquo; set of standards. I was fresh out of the university, so I couldn&amp;rsquo;t have legal access …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This time, the proper title would be &amp;ldquo;Weekly&amp;nbsp;Arghs.&amp;rdquo;&lt;/p&gt;
&lt;h2&gt;Testing&amp;nbsp;Communities&lt;/h2&gt;
&lt;p&gt;When I decided to become a tester, the first-ever topic I encountered was &lt;del&gt;discussions&lt;/del&gt; rants about &amp;ldquo;&lt;span class="caps"&gt;ISO&lt;/span&gt;/&lt;span class="caps"&gt;IEC&lt;/span&gt;/&lt;span class="caps"&gt;IEEE&lt;/span&gt; 29119 Software Testing&amp;rdquo; set of standards. I was fresh out of the university, so I couldn&amp;rsquo;t have legal access to these documents, and naturally, I sided with opponents. Good or bad (mostly bad), I don&amp;rsquo;t care: if you wish to have guidelines or standards for the profession, it must be freely accessible to everyone. The&amp;nbsp;end.&lt;/p&gt;
&lt;p&gt;But that&amp;rsquo;s not the thing I want to talk about. It&amp;rsquo;s just an example of my first deep dive into testing: it was a sign of what to come. Basically, everything is dividing our community: terminology, schools of thoughts, views. Dammit, testing in itself is a tiny thingy, we mostly reuse and apply knowledge and methods from other fields. Nevertheless, we keep constantly bickering with each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not a saint either. I rant, joke, correct, discuss, persuade, and roll my eyes. Maybe it comes with the profession. Or it&amp;rsquo;s a normal thing for any community. What amazes me, that this much concentration of disagreements exists around the pettiest and smallish topics. Sometimes people even talk about the same ideas but with different examples, and it results in confrontations (direct or&amp;nbsp;indirect).&lt;/p&gt;
&lt;p&gt;Giving recent cases wouldn&amp;rsquo;t be humanly correct in regard to individuals involved. Let&amp;rsquo;s just say: I participate in several slack workspaces. And it&amp;rsquo;s quite common to a discussion in one to provoke posts in others with opposite reactions like &amp;ldquo;good work&amp;rdquo; and &amp;ldquo;it drives me&amp;nbsp;insane.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Though, I want to quote&amp;nbsp;one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Testing vs Checking is like Russian revolution &amp;mdash; senseless and&amp;nbsp;merciless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can replace &amp;ldquo;testing vs checking&amp;rdquo; with whatever you want, and it will hold true to a lot of prevalent&amp;nbsp;discussions.&lt;/p&gt;
&lt;h2&gt;Laptops &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Linux&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve got a new laptop: Dell &lt;span class="caps"&gt;XPS15&lt;/span&gt; 7590. My old one is a Lenovo G560, almost 9 years old. It served me well, but it&amp;rsquo;s got too hard to keep even just Pycharm and Firefox running side by side. I squeezed every last bit out if it: maxing out memory to &lt;span class="caps"&gt;8GB&lt;/span&gt;, adding &lt;span class="caps"&gt;SSD&lt;/span&gt;, using Fedora with a lighter desktop environment (&lt;span class="caps"&gt;XFCE&lt;/span&gt;). Still, its time has&amp;nbsp;come.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;XPS&lt;/span&gt; is a good choice for several&amp;nbsp;reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extensible: I&amp;rsquo;ll be able to add more memory (&lt;span class="caps"&gt;32GB&lt;/span&gt;), change &lt;span class="caps"&gt;SSD&lt;/span&gt; or WiFi card, add &lt;span class="caps"&gt;HDD&lt;/span&gt; (but with a smaller&amp;nbsp;battery)&lt;/li&gt;
&lt;li&gt;Linux&amp;nbsp;friendly&lt;/li&gt;
&lt;li&gt;good&amp;nbsp;battery&lt;/li&gt;
&lt;li&gt;there was an awesome discount which is significant because I didn&amp;rsquo;t want to go wild with work&amp;nbsp;budget&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But there are some disappointments. Let&amp;rsquo;s start with the objective one:&amp;nbsp;keyboard.&lt;/p&gt;
&lt;p&gt;This is my old keyboard: it has Numpad, all keys, and even separate volume controls.
&lt;img alt="Lenovo G560 keyboard" src="https://www.aviskase.com/articles/2019/12/07/weekly-hmms-communities-laptops-linux/lenovo_keyboard.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is the new&amp;nbsp;one:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dell XPS15 keyboard" src="https://www.aviskase.com/articles/2019/12/07/weekly-hmms-communities-laptops-linux/dell_keyboard.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I begrudgingly accepted not to have a Numpad and volume control keys, yet I didn&amp;rsquo;t even consider that there wouldn&amp;rsquo;t be separate Home, End, PgUp, and PgDn! Also, no right Fn key. Wow. What bewilders me more is that a previous model did have separate keys: but &lt;a class="external" href="https://www.dell.com/community/XPS/Control-Home-Control-End-Keys/td-p/6212592"&gt;people complained about it on the Dell forum&lt;/a&gt;. You, guys, I hate you. You&amp;rsquo;re exactly like &lt;a class="external" href="https://xkcd.com/1172/"&gt;from that &lt;span class="caps"&gt;XKCD&lt;/span&gt; comic strip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next disappointment is a display. Beware, this will be unexpected&amp;hellip; I don&amp;rsquo;t like HiDPI. I&amp;rsquo;m so accustomed to shitty displays, that better ones feel wrong and uncomfortable. Colors and images are fine, but text, yikes. Letters are not crisp enough, there is something smudgy about&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;I can already hear that it&amp;rsquo;s because I&amp;rsquo;m on Linux. &lt;span class="caps"&gt;NOPE&lt;/span&gt;. This laptop came with Windows 10 (I left it in a dual boot), but the text is blurry too. Even more, I think Linux actually does better jobs with antialiasing, because old Windows apps look particularly&amp;nbsp;horrible.&lt;/p&gt;
&lt;p&gt;Maybe someone will say that I should try 4k or Mac with Retina. Thanks, but no. I saw those displays too. First, I don&amp;rsquo;t understand, why people keep using them without any scaling: font size is unbearably small. Second, I still don&amp;rsquo;t like&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;So yeah, completely subjective feelings with physical problems: my eyes are way more strained now. Habits die&amp;nbsp;hard.&lt;/p&gt;
&lt;p&gt;Oh, and I also switched from &lt;span class="caps"&gt;XFCE&lt;/span&gt; to Gnome, and this drives me crazy even more. My first  Linux was Ubuntu with Gnome 2, and, surprisingly, &lt;span class="caps"&gt;UX&lt;/span&gt; in &lt;span class="caps"&gt;XFCE&lt;/span&gt; is closer to it than in Gnome 3. I&amp;rsquo;m too lazy to reinstall again, so, I guess, I&amp;rsquo;ll try to&amp;nbsp;relearn.&lt;/p&gt;</content><category term="Weekly Hmms"></category></entry><entry><title>Weekly Hmms: Watching, Reading, Learning</title><link href="https://www.aviskase.com/articles/2019/11/30/weekly-hmms-watching-reading-learning/" rel="alternate"></link><published>2019-11-30T19:13:56-05:00</published><updated>2019-11-30T19:13:56-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-30:/articles/2019/11/30/weekly-hmms-watching-reading-learning/</id><summary type="html">&lt;h2&gt;Watching&lt;/h2&gt;
&lt;p&gt;During lunch, I watch videos from conferences. This week my favorites&amp;nbsp;were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://www.youtube.com/watch?v=yYEne30CWUQ"&gt;Mike Kistler: The Importance of &lt;span class="caps"&gt;API&lt;/span&gt; Design&amp;nbsp;Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.youtube.com/watch?v=qCdpTji8nxo"&gt;Kevin Lacker: How to Design Great&amp;nbsp;APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second one has a nice quotable&amp;nbsp;passage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A good &lt;span class="caps"&gt;API&lt;/span&gt; will let you be&amp;nbsp;lazy.&lt;/p&gt;
&lt;p&gt;A great &lt;span class="caps"&gt;API&lt;/span&gt; will empower you …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;h2&gt;Watching&lt;/h2&gt;
&lt;p&gt;During lunch, I watch videos from conferences. This week my favorites&amp;nbsp;were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://www.youtube.com/watch?v=yYEne30CWUQ"&gt;Mike Kistler: The Importance of &lt;span class="caps"&gt;API&lt;/span&gt; Design&amp;nbsp;Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.youtube.com/watch?v=qCdpTji8nxo"&gt;Kevin Lacker: How to Design Great&amp;nbsp;APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second one has a nice quotable&amp;nbsp;passage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A good &lt;span class="caps"&gt;API&lt;/span&gt; will let you be&amp;nbsp;lazy.&lt;/p&gt;
&lt;p&gt;A great &lt;span class="caps"&gt;API&lt;/span&gt; will empower you to be &lt;em&gt;really lazy&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Reading&lt;/h2&gt;
&lt;p&gt;Started&amp;nbsp;reading: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="external" href="https://www.manning.com/books/the-design-of-web-apis"&gt;The Design of Web APIs&lt;/a&gt; by Arnaud Lauret. I&amp;rsquo;ve got a hard copy,&amp;nbsp;yay!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="external" href="https://www.amazon.ca/Universal-Principles-Design-William-Lidwell/dp/1592530079"&gt;Universal Principles of Design&lt;/a&gt; by William Lidwell, Kritina Holden, and Jill Butler. There is a newer shorter edition, but I decided to try out the original one first. It was available in the local library, but I had to wait almost two months in the request queue: the book is old yet still&amp;nbsp;relevant.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;p&gt;&lt;a class="external" href="https://www.angryweasel.com/ABTesting/"&gt;Alan and Brent&lt;/a&gt; talk a lot about basing feature development on testable hypotheses. Brent mentioned that he doesn&amp;rsquo;t even use the word &amp;ldquo;requirements&amp;rdquo;&amp;nbsp;anymore.&lt;/p&gt;
&lt;p&gt;And just in time came a Coursera&amp;rsquo;s newsletter with the link to
&lt;a class="external" href="https://www.coursera.org/learn/uva-darden-agile-testing"&gt;Hypothesis-Driven Development&lt;/a&gt; course, which is a part four out of five in the agile development specialization. So, ideally, you shouldn’t start with it. Nevertheless, I’ve finished the first week’s materials and looks like time spent will be&amp;nbsp;worthwhile.&lt;/p&gt;
&lt;p&gt;Though, there are some&amp;nbsp;problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The instructor seems to sell his &amp;ldquo;venture design process.&amp;rdquo; That doesn&amp;rsquo;t make that methodology inherently bad, but keep it in&amp;nbsp;mind.&lt;/li&gt;
&lt;li&gt;The way he talks makes hard for me to concentrate. Too&amp;nbsp;choppy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The course is short, so I&amp;rsquo;ll give it a chance (perhaps to the whole&amp;nbsp;specialization).&lt;/p&gt;</content><category term="Weekly Hmms"></category></entry><entry><title>Why I Don’t Use Postman</title><link href="https://www.aviskase.com/articles/2019/11/25/why-i-dont-use-postman/" rel="alternate"></link><published>2019-11-25T01:20:58-05:00</published><updated>2019-11-25T01:20:58-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-25:/articles/2019/11/25/why-i-dont-use-postman/</id><summary type="html">&lt;p&gt;Being an &lt;span class="caps"&gt;API&lt;/span&gt; person, many people would expect me to use Postman. It&amp;rsquo;s the most well-known tool for &lt;span class="caps"&gt;HTTP&lt;/span&gt;-based APIs and it&amp;rsquo;s so ubiquitous that some use it even for &lt;span class="caps"&gt;SOAP&lt;/span&gt; (not the best idea&amp;nbsp;ever).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I did use Postman.&lt;/em&gt; &lt;a class="external" href="https://gist.github.com/aviskase/e642248c35e400b56e2489430952369f"&gt;My gist with installation scripts for Linux …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Being an &lt;span class="caps"&gt;API&lt;/span&gt; person, many people would expect me to use Postman. It&amp;rsquo;s the most well-known tool for &lt;span class="caps"&gt;HTTP&lt;/span&gt;-based APIs and it&amp;rsquo;s so ubiquitous that some use it even for &lt;span class="caps"&gt;SOAP&lt;/span&gt; (not the best idea&amp;nbsp;ever).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I did use Postman.&lt;/em&gt; &lt;a class="external" href="https://gist.github.com/aviskase/e642248c35e400b56e2489430952369f"&gt;My gist with installation scripts for Linux&lt;/a&gt; was so popular that Postman support team reached me out when it started causing non-obvious issues with updates. I also used this tool for internship courses. Yet I won&amp;rsquo;t do it anymore and let me explain&amp;nbsp;why.&lt;/p&gt;
&lt;h2&gt;I&amp;rsquo;m Not a Tech&amp;nbsp;Writer&lt;/h2&gt;
&lt;p&gt;Postman isn&amp;rsquo;t just a tool for testing: it&amp;rsquo;s often used for writing documentation. I&amp;rsquo;m a tester, thus, this use case does not apply to my day-to-day work. Maybe it can be useful for your organization, though I don&amp;rsquo;t approve of the inability to&amp;nbsp;self-host.&lt;/p&gt;
&lt;h2&gt;I&amp;rsquo;m Confused by &lt;span class="caps"&gt;GUI&lt;/span&gt;-Driven&amp;nbsp;Tools&lt;/h2&gt;
&lt;p&gt;I still have &lt;span class="caps"&gt;PTSD&lt;/span&gt; from SoapUI. It&amp;rsquo;s the best exploratory testing tool for &lt;span class="caps"&gt;SOAP&lt;/span&gt; services, but, damn, scenarios more difficult than request+response are brain busters. Many people don&amp;rsquo;t have problems with &lt;span class="caps"&gt;GUI&lt;/span&gt;-driven&amp;nbsp;stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JMeter for load&amp;nbsp;testing&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;UI&lt;/span&gt; git&amp;nbsp;apps&lt;/li&gt;
&lt;li&gt;Point&amp;amp;click tools for web&amp;nbsp;automation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me, all these are torture devices for anything more involved than two clicks. &lt;em&gt;It&amp;rsquo;s something psychological,&lt;/em&gt; because if &lt;span class="caps"&gt;GUI&lt;/span&gt; tool requires tinkering with &lt;span class="caps"&gt;LEGO&lt;/span&gt;-like loop/if steps or  pre/post-scripts, my nerve cells start audibly screeching. I&amp;rsquo;m not a command line nerd and I use these tools for certain activities, but not for complex&amp;nbsp;automation.&lt;/p&gt;
&lt;h2&gt;I Can&amp;nbsp;Code&lt;/h2&gt;
&lt;p&gt;Here we go to the obvious part: I am comfortable with code. Yeah, shitty smelling code, nevertheless, I find it way more intuitive to write a for loop &lt;em&gt;purely&lt;/em&gt; in a programming language than to glue together pieces of JavaScript with &lt;span class="caps"&gt;GUI&lt;/span&gt;-level&amp;nbsp;bits.&lt;/p&gt;
&lt;p&gt;My language of choice is Python because it&amp;rsquo;s very easy to scribble down a working script. It also has packages for any &lt;span class="caps"&gt;API&lt;/span&gt; needs imaginable, be it &lt;a class="external" href="https://requests.kennethreitz.org/en/master/"&gt;Requests&lt;/a&gt;, &lt;a class="external" href="https://github.com/Yelp/bravado"&gt;Bravado&lt;/a&gt;, &lt;a class="external" href="https://python-zeep.readthedocs.io/en/master/"&gt;Zeep&lt;/a&gt;, or &lt;a class="external" href="https://github.com/yandex/yandex-tank"&gt;Yandex.Tank&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;I Use&amp;nbsp;Insomnia&lt;/h2&gt;
&lt;p&gt;Until recently I still used Postman a bit. I switched to Insomnia for mostly emotional&amp;nbsp;reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Insomnia is&amp;nbsp;open-source.&lt;/li&gt;
&lt;li&gt;Postman is bloated with features I don&amp;rsquo;t&amp;nbsp;need. &lt;/li&gt;
&lt;li&gt;There is &lt;em&gt;too much&lt;/em&gt; Postman around. They even organize a conference now! I wonder is there a certification somewhere&amp;nbsp;already.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Insomnia is a case where &lt;em&gt;less is more.&lt;/em&gt; I hope its recent acquisition by a bigger company won&amp;rsquo;t be detrimental, but being open-source we can always fork&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;Though it&amp;rsquo;s not the only tool I use for exploratory &lt;span class="caps"&gt;API&lt;/span&gt; testing. My general patterns&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rapid data creation or testing simple requests:&amp;nbsp;curl&lt;/li&gt;
&lt;li&gt;Requests with bigger payloads: SwaggerUI or&amp;nbsp;Insomnia&lt;/li&gt;
&lt;li&gt;Chained, looped, or other complex stuff: reusing bravado-based adapters from automation&amp;nbsp;framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And for actual automation, it&amp;rsquo;s code and code&amp;nbsp;only.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Your brain is your brain. Your context is your context. Mine resulted in avoiding &lt;span class="caps"&gt;GUI&lt;/span&gt;-driven tools. Research, try different approaches, and don&amp;rsquo;t simply default to the most popular&amp;nbsp;choice.&lt;/p&gt;</content><category term="Testing"></category><category term="API"></category><category term="tools"></category><category term="thoughts"></category></entry><entry><title>Weekly Hmms: Fowler, Collaborations, HTML, and CTS</title><link href="https://www.aviskase.com/articles/2019/11/23/weekly-hmms-fowler-collaborations-html-and-cts/" rel="alternate"></link><published>2019-11-23T02:45:30-05:00</published><updated>2019-11-23T02:45:30-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-23:/articles/2019/11/23/weekly-hmms-fowler-collaborations-html-and-cts/</id><summary type="html">&lt;p&gt;New week, new&amp;nbsp;hmms!&lt;/p&gt;
&lt;h2&gt;Martin Fowler and Exploratory&amp;nbsp;Testing&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;All&lt;/em&gt; testers&amp;rsquo; slack groups, forums, and blogs erupted this week with the tidings of joy: &lt;a class="external" href="https://martinfowler.com/bliki/ExploratoryTesting.html"&gt;Martin Fowler wrote a post about exploratory testing&lt;/a&gt;. Of course, it seems a bit &lt;em&gt;late&lt;/em&gt; and &lt;em&gt;cursory,&lt;/em&gt; but at least now we have &lt;em&gt;a very respected …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;New week, new&amp;nbsp;hmms!&lt;/p&gt;
&lt;h2&gt;Martin Fowler and Exploratory&amp;nbsp;Testing&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;All&lt;/em&gt; testers&amp;rsquo; slack groups, forums, and blogs erupted this week with the tidings of joy: &lt;a class="external" href="https://martinfowler.com/bliki/ExploratoryTesting.html"&gt;Martin Fowler wrote a post about exploratory testing&lt;/a&gt;. Of course, it seems a bit &lt;em&gt;late&lt;/em&gt; and &lt;em&gt;cursory,&lt;/em&gt; but at least now we have &lt;em&gt;a very respected source&lt;/em&gt; to point&amp;nbsp;to. &lt;/p&gt;
&lt;h2&gt;Collaborations&lt;/h2&gt;
&lt;h3&gt;Mob&amp;nbsp;Programming&lt;/h3&gt;
&lt;p&gt;Finally found time to read a &lt;a class="external" href="https://mobprogrammingguidebook.xyz/"&gt;&amp;ldquo;Mob Programming Guidebook&amp;rdquo; by Maaret Pyhäjärvi&lt;/a&gt;. I&amp;rsquo;m not entirely sure about applying it at the moment, but it looks like an interesting method for knowledge sharing&amp;nbsp;facilitation.&lt;/p&gt;
&lt;p&gt;And contributions style roles can be reused as hats in other&amp;nbsp;activities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;driver (intelligent input&amp;nbsp;device)&lt;/li&gt;
&lt;li&gt;sponsor (supporting others from a unique&amp;nbsp;position)&lt;/li&gt;
&lt;li&gt;nose (noticing things about the&amp;nbsp;code)&lt;/li&gt;
&lt;li&gt;navigator (translating ideas into&amp;nbsp;code)&lt;/li&gt;
&lt;li&gt;researcher (having better information&amp;nbsp;available)&lt;/li&gt;
&lt;li&gt;automationist (recognizing&amp;nbsp;repetition)&lt;/li&gt;
&lt;li&gt;conductor (enhancing others&amp;nbsp;contributions)&lt;/li&gt;
&lt;li&gt;mobber (always contributing in different&amp;nbsp;ways)&lt;/li&gt;
&lt;li&gt;rear admiral (helping designated navigator do better and&amp;nbsp;learn)&lt;/li&gt;
&lt;li&gt;archivist (improving team&amp;nbsp;visibility)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tips for Code&amp;nbsp;Review&lt;/h3&gt;
&lt;p&gt;Google Testing blog is still alive and has posted a nice &lt;a class="external" href="https://testing.googleblog.com/2019/11/code-health-respectful-reviews-useful.html"&gt;short guide about being a good code reviewer&lt;/a&gt;. The best thing is that there are not only tips for reviewers but also &lt;em&gt;for authors.&lt;/em&gt; Likewise, they could and should be applied for issue reports and other&amp;nbsp;communications.&lt;/p&gt;
&lt;h2&gt;Validation for Email&amp;nbsp;Inputs&lt;/h2&gt;
&lt;p&gt;Standards are weird. We had a tiny funny problem this week with an OpenAPI spec and a &lt;code&gt;format: email.&lt;/code&gt; The&amp;nbsp;context:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SwaggerUI generates &lt;code&gt;input&lt;/code&gt; fields, and with this format it will have &lt;code&gt;type=email&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When I don&amp;rsquo;t care about cross-browser stuff, I use&amp;nbsp;Chrome.&lt;/li&gt;
&lt;li&gt;Our middleware seems to validate email formats, somewhere very deep in&amp;nbsp;dependencies.&lt;/li&gt;
&lt;li&gt;We also have a custom&amp;nbsp;validation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, I checked a request with a garbage email. It failed on the middleware layer. Then I checked an email with non-&lt;span class="caps"&gt;ASCII&lt;/span&gt; characters, but our validation failed. That meant that validation in middleware was passing; therefore, its validation checks were better than&amp;nbsp;ours. &lt;/p&gt;
&lt;p&gt;The dev who worked on fixing the bug noticed an interesting behavior. If you use Firefox to open SwaggerUI, it will add a red highlighting for an email input field when a value contains non-&lt;span class="caps"&gt;ASCII&lt;/span&gt; characters. According to the &lt;a class="external" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email"&gt;&lt;span class="caps"&gt;MDN&lt;/span&gt; docs&lt;/a&gt;, this is a known problem due to &lt;a class="external" href="https://github.com/whatwg/html/issues/4562"&gt;&lt;span class="caps"&gt;HTML5&lt;/span&gt; issue&lt;/a&gt;. The specification proposes using a simple regex for&amp;nbsp;validation! &lt;/p&gt;
&lt;p&gt;Chrome does not complain about internationalized values. And it means that Firefox implemented &lt;span class="caps"&gt;HTML5&lt;/span&gt; spec &lt;em&gt;too well,&lt;/em&gt; introducing a confusing behavior.&amp;nbsp;Oops.&lt;/p&gt;
&lt;h2&gt;Carpal Tunnel&amp;nbsp;Syndrome&lt;/h2&gt;
&lt;p&gt;I wasn&amp;rsquo;t diagnosed with &lt;span class="caps"&gt;CTS&lt;/span&gt; (yet), but my posture at home is awful, so my right hand &lt;em&gt;hurts.&lt;/em&gt; I don&amp;rsquo;t have a proper desk and usually I sit with a laptop at a &lt;em&gt;round table.&lt;/em&gt; Thus, there is not enough room to position a &amp;ldquo;mouse&amp;rdquo;&amp;nbsp;hand.&lt;/p&gt;
&lt;p&gt;A year ago I bought a cheap &lt;a class="external" href="https://www.amazon.ca/Anker-Wireless-Vertical-Ergonomic-Optical/dp/B00FGI2QVC"&gt;Anker vertical mouse&lt;/a&gt;. It&amp;rsquo;s great, even with my shitty habits I have had no pain. But it&amp;rsquo;s wired, and soon I&amp;rsquo;ll need a wireless one. Logitech is always my first choice in this case because it doesn&amp;rsquo;t drain batteries too fast. Unfortunately, their only vertical mouse is unreasonably expensive, so I&amp;rsquo;ve decided to experiment with their &lt;a class="external" href="https://www.amazon.ca/Logitech-910-001799-M570-Wireless-Trackball/dp/B0043T7FXE/"&gt;M570 trackball&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s cool that you don&amp;rsquo;t need to move your hand at all, but &lt;em&gt;the pain has returned:&lt;/em&gt; it looks like vertical mouse works better for small spaces. For a trackball, you should be able to lay down your hand somewhere fully. Though, the more expensive trackball model can be vertically adjusted. Anyway, I&amp;rsquo;ll get a real own desk soon, will see how it&amp;nbsp;goes. &lt;/p&gt;</content><category term="Weekly Hmms"></category></entry><entry><title>Weekly Hmms: Valuations, Job Titles, Conferences, APIs</title><link href="https://www.aviskase.com/articles/2019/11/16/weekly-hmms-valuations-job-titles-conferences-apis/" rel="alternate"></link><published>2019-11-16T02:53:21-05:00</published><updated>2019-11-16T02:53:21-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-16:/articles/2019/11/16/weekly-hmms-valuations-job-titles-conferences-apis/</id><summary type="html">&lt;p&gt;To assume I could push anything on Fridays was too optimistic. Thus, I&amp;rsquo;ll commit to&amp;nbsp;Saturdays. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s&amp;nbsp;start.&lt;/p&gt;
&lt;h2&gt;SaaS&amp;nbsp;Valuations&lt;/h2&gt;
&lt;p&gt;My current company, &lt;a class="external" href="https://www.netgovern.com/"&gt;NetGovern&lt;/a&gt;, operates with an open-book management mindset. Apart from other information, all employees know company finances so we can better understand what is our real …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To assume I could push anything on Fridays was too optimistic. Thus, I&amp;rsquo;ll commit to&amp;nbsp;Saturdays. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s&amp;nbsp;start.&lt;/p&gt;
&lt;h2&gt;SaaS&amp;nbsp;Valuations&lt;/h2&gt;
&lt;p&gt;My current company, &lt;a class="external" href="https://www.netgovern.com/"&gt;NetGovern&lt;/a&gt;, operates with an open-book management mindset. Apart from other information, all employees know company finances so we can better understand what is our real position and where we plan to go&amp;nbsp;next. &lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s tough to wrap your head around balance sheets or cash flows, especially for me: I was born in 1992, a year after Kazakhstan declared independence from the Soviet Union. Suddenly, generations raised in the planned economy plunged into the free market (didn&amp;rsquo;t go well). I&amp;rsquo; came from the culture of mixed and uncertain economic literacy, hence, all these stocks, investing, growth rates and margins don&amp;rsquo;t flow naturally into my&amp;nbsp;brain. &lt;/p&gt;
&lt;p&gt;Nevertheless, I don&amp;rsquo;t shy away from these topics because &lt;strong&gt;learning anything is the best hobby.&lt;/strong&gt; This week, we read a paper explaining how to valuate typical SaaS companies (how to calculate a&amp;nbsp;price).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve created a &lt;a class="external" href="https://www.mindomo.com/mindmap/saas-company-valuation-59d6caef92ab298681a766bc9aa5f367"&gt;mind map&lt;/a&gt; (or an &lt;a class="external" href="https://www.mindomo.com/outline/saas-company-valuation-59d6caef92ab298681a766bc9aa5f367"&gt;outline&lt;/a&gt;, Mindomo supports both at the same time) with the main&amp;nbsp;info:&lt;/p&gt;
&lt;iframe width="500" height="500" src="https://www.mindomo.com/outline/saas-company-valuation-59d6caef92ab298681a766bc9aa5f367" frameborder="0" allowfullscreen&gt;Your browser does not support frames. &lt;a href="https://www.mindomo.com/outline/saas-company-valuation-59d6caef92ab298681a766bc9aa5f367" target="_blank"&gt;View&lt;/a&gt; this map on its original site. It was created using &lt;a href="https://www.mindomo.com" target="_blank"&gt;Mindomo&lt;/a&gt;.&lt;/iframe&gt;

&lt;h2&gt;Some Tech Writers Avoid the Word &amp;ldquo;Writer&amp;rdquo; in Their&amp;nbsp;Titles&lt;/h2&gt;
&lt;p&gt;The last myth from &lt;a class="external" href="https://idratherbewriting.com/blog/ten-myths-about-api-documentation/"&gt;the podcast &amp;ldquo;10 myths about &lt;span class="caps"&gt;API&lt;/span&gt; documentation&amp;rdquo;&lt;/a&gt; is: &lt;em&gt;people will respect you more if the word &amp;ldquo;writer&amp;rdquo; isn&amp;rsquo;t in your job&amp;nbsp;title.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Insecure tech writers prefer to call&amp;nbsp;themselves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Information&amp;nbsp;developers&lt;/li&gt;
&lt;li&gt;User assistance&amp;nbsp;developers&lt;/li&gt;
&lt;li&gt;Information&amp;nbsp;strategists&lt;/li&gt;
&lt;li&gt;Content&amp;nbsp;strategists&lt;/li&gt;
&lt;li&gt;Technical communications&amp;nbsp;professionals&lt;/li&gt;
&lt;li&gt;Content&amp;nbsp;engineers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, these are so funny. Second, the testing field has the same tendency. My official job title is &amp;ldquo;&lt;span class="caps"&gt;QA&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; escalations analyst,&amp;rdquo; whatever this means. Testers don&amp;rsquo;t avoid the word &amp;ldquo;test,&amp;rdquo; but they do try to shoehorn hardcoreness with words &amp;ldquo;developer,&amp;rdquo; &amp;ldquo;engineer,&amp;rdquo; or&amp;nbsp;&amp;ldquo;analyst.&amp;rdquo;&lt;/p&gt;
&lt;h2&gt;OnlineTestConf&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s not a secret that I&amp;rsquo;m not a fan of testing-only conferences. Not rolling your eyes is impossible when you see mind-blowing prices for the &lt;span class="caps"&gt;STAR&lt;/span&gt; conference and find there &lt;em&gt;popular&lt;/em&gt; workshops like &amp;ldquo;Learning Git.&amp;rdquo;&amp;nbsp;Pass.&lt;/p&gt;
&lt;p&gt;Still, I checkout out some occasionally. Heisenbug is amazing. But most of the talks are in Russian, sorry&amp;nbsp;folks. &lt;/p&gt;
&lt;p&gt;The next available conference is &lt;a class="external" href="https://www.onlinetestconf.com/"&gt;OnlineTestConf&lt;/a&gt;, December 3&lt;sup&gt;rd&lt;/sup&gt;-4&lt;sup&gt;th&lt;/sup&gt; 2019. The previous one was passable, this one seems to have a similar structure. Still, nothing beats free and online. There will be big names, yet what caught my eye was the &amp;ldquo;Adidas Testing Platform&amp;rdquo; talk. Adidas &lt;span class="caps"&gt;API&lt;/span&gt; guidelines are awesome, and learning more about their processes would be&amp;nbsp;cool.&lt;/p&gt;
&lt;h2&gt;Me and&amp;nbsp;APIs&lt;/h2&gt;
&lt;p&gt;Should this be a regular rubric?&amp;nbsp;Perhaps.&lt;/p&gt;
&lt;p&gt;Though &lt;strong&gt;I love APIs,&lt;/strong&gt; my knowledge is unsatisfactory and insufficient to be confident in &lt;em&gt;my new undertaking: writing &lt;span class="caps"&gt;API&lt;/span&gt; design guidelines.&lt;/em&gt; Without this document, your APIs will soon become an inconsistent mess. You need to have conventions on even the most basic stuff like capitalization or pluralization. We should have created this doc a year ago; doing consolidation and standardization will require painful fixing of existing clients, but better sooner than&amp;nbsp;later. &lt;/p&gt;
&lt;p&gt;As I said, I&amp;rsquo;m not an expert on &lt;span class="caps"&gt;API&lt;/span&gt; design. And I&amp;rsquo;m not a good writer either. I&amp;rsquo;m a tester whose job description is to &lt;em&gt;find ways to improve quality.&lt;/em&gt; Next months will be fun: doing research, poking devs with sticks, and asking stupid questions in the &amp;ldquo;APIs You Won&amp;rsquo;t Hate&amp;rdquo; slack&amp;nbsp;group.&lt;/p&gt;</content><category term="Weekly Hmms"></category></entry><entry><title>Weekly Hmms: __init__</title><link href="https://www.aviskase.com/articles/2019/11/11/weekly-hmms-__init__/" rel="alternate"></link><published>2019-11-11T03:40:16-05:00</published><updated>2019-11-11T03:40:16-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-11-11:/articles/2019/11/11/weekly-hmms-__init__/</id><summary type="html">&lt;h2&gt;__init__&lt;/h2&gt;
&lt;p&gt;This post initializes a series of weekly ponderings, interesting links, and other &lt;em&gt;hmms.&lt;/em&gt; Think of it as typical a &amp;ldquo;Five for Friday,&amp;rdquo; but without number constraint and more emphasis on effects on my thought process. These posts should come out on Fridays, but because &lt;em&gt;I forgot to commit,&lt;/em&gt; this …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__init__&lt;/h2&gt;
&lt;p&gt;This post initializes a series of weekly ponderings, interesting links, and other &lt;em&gt;hmms.&lt;/em&gt; Think of it as typical a &amp;ldquo;Five for Friday,&amp;rdquo; but without number constraint and more emphasis on effects on my thought process. These posts should come out on Fridays, but because &lt;em&gt;I forgot to commit,&lt;/em&gt; this one is&amp;nbsp;late.&lt;/p&gt;
&lt;p&gt;Oh, and if you have no idea what &lt;code&gt;__init__&lt;/code&gt; is, that&amp;rsquo;s &lt;a class="external" href="https://docs.python.org/3/reference/datamodel.html#object.__init__"&gt;from Python&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Write the Docs Podcast: Episode&amp;nbsp;25&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve just started plunging in and out tech writers&amp;rsquo; media, and so far it keeps amusing me. &lt;a class="external" href="https://podcast.writethedocs.org/2019/10/20/episode-25-how-devs-use-api-documentation-andrew-head/"&gt;&lt;span class="caps"&gt;WTD&lt;/span&gt; #25&lt;/a&gt; is interesting for two&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;First, this episode covers research on how developers use &lt;span class="caps"&gt;API&lt;/span&gt; documentation. Unlike predominant web services based papers, this research focuses on C++. One discovery was that developers prefer checking header files (aka interface definitions) to implementation or&amp;nbsp;documentation.&lt;/p&gt;
&lt;p&gt;Second, I noticed again that we, testers, and &lt;span class="caps"&gt;API&lt;/span&gt; tech writers have a common identity crisis: given enough time, developers can do our work. One guy from the podcast sounded relieved when he heard that not all the docs and comments in Google are written by devs. Maybe Alan and Brent should pitch modern testing principles to tech writers&amp;nbsp;too?&lt;/p&gt;
&lt;h2&gt;Read the Damn&amp;nbsp;Code&lt;/h2&gt;
&lt;p&gt;This week testing slack group had an almost holy war about testers looking at code. The consensus seemed to be &amp;ldquo;access to code is awesome,&amp;rdquo; nevertheless, there were other&amp;nbsp;opinions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should have a strong bias seeing the code. It will be more difficult to search for the&amp;nbsp;unknowns.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh my. I don&amp;rsquo;t do it as often as I should, but &lt;em&gt;I love checking&amp;nbsp;commits:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Skimming through commit messages for the current&amp;nbsp;build.&lt;/li&gt;
&lt;li&gt;Checking what and how was touched for implemented&amp;nbsp;tasks.&lt;/li&gt;
&lt;li&gt;Reading commits associated with bug&amp;nbsp;fixes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And every time I uncover some unknowns. Just very recent&amp;nbsp;examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caught that the task for implementing &lt;span class="caps"&gt;API&lt;/span&gt; &lt;em&gt;blah-blah&lt;/em&gt; also has commits for &lt;span class="caps"&gt;API&lt;/span&gt; &lt;em&gt;meh-meh.&lt;/em&gt; Not only I wouldn&amp;rsquo;t know about these changes without the Git God, but also those were scheduled with a different design for&amp;nbsp;later.&lt;/li&gt;
&lt;li&gt;Identified code duplication and asked the dev to fix the bug in the remaining dups or refactor the code (hehe, sorry,&amp;nbsp;Eric).&lt;/li&gt;
&lt;li&gt;Suspected that the bug fix was incomplete, asked dev, he confirmed and refixed. Not spending time on build&amp;amp;install&amp;amp;test is&amp;nbsp;priceless.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, dear testers, &lt;strong&gt;read the damn code.&lt;/strong&gt; Stop behaving like special snowflakes whose mind will be forever damaged if you&amp;rsquo;ll learn to code a bit. I learned Pascal at school. My father taught himself on paper using journal articles. That&amp;rsquo;s not rocket science. The way modern society goes, coding is close to become a part of common literacy. No one asks for enterprise-levels skill, but as long as your system isn&amp;rsquo;t written in &lt;a class="external" href="https://en.wikipedia.org/wiki/Brainfuck"&gt;Brainfuck&lt;/a&gt;, even basics should be&amp;nbsp;fine. &lt;/p&gt;</content><category term="Weekly Hmms"></category></entry><entry><title>A Tester’s Guide on Hunting for API Related Sources</title><link href="https://www.aviskase.com/articles/2019/10/26/a-testers-guide-on-hunting-for-api-related-sources/" rel="alternate"></link><published>2019-10-26T16:52:40-04:00</published><updated>2019-10-26T16:52:40-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-10-26:/articles/2019/10/26/a-testers-guide-on-hunting-for-api-related-sources/</id><summary type="html">&lt;p&gt;You&amp;rsquo;ve got interested in APIs. Or you&amp;rsquo;re not a fan (yet) but you have to test it. Whatever the cause, you&amp;rsquo;d want to develop a mental model of this vast field. And a model construction demands a generous supply of information to consume and&amp;nbsp;digest. &lt;/p&gt;
&lt;p&gt;I prefer …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You&amp;rsquo;ve got interested in APIs. Or you&amp;rsquo;re not a fan (yet) but you have to test it. Whatever the cause, you&amp;rsquo;d want to develop a mental model of this vast field. And a model construction demands a generous supply of information to consume and&amp;nbsp;digest. &lt;/p&gt;
&lt;p&gt;I prefer to seek knowledge in these five&amp;nbsp;areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;standards&lt;/li&gt;
&lt;li&gt;dev&amp;nbsp;experience&lt;/li&gt;
&lt;li&gt;usability&lt;/li&gt;
&lt;li&gt;tech&amp;nbsp;writers&lt;/li&gt;
&lt;li&gt;vendors and&amp;nbsp;companies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article, I&amp;rsquo;ll explain a bit why each area matters and give a bunch of sources. I won’t go into details why I selected these sources in particular: some just came to my mind first. Treat them as examples, and if you know not mentioned &lt;em&gt;must-reads,&lt;/em&gt; I&amp;rsquo;m happy to learn about&amp;nbsp;them.&lt;/p&gt;
&lt;h2&gt;Standards&lt;/h2&gt;
&lt;p&gt;Standards are the foundation. And reading abridged explanations in Wikipedia or someone’s blog is never enough. True understanding requires the ability to read and reason based on original documents. Details do matter for&amp;nbsp;APIs.&lt;/p&gt;
&lt;p&gt;For web services, the most valuable sources are &lt;abbr title="Request for Comments"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt;&lt;/abbr&gt;, &lt;span class="caps"&gt;API&lt;/span&gt; description and schema specifications. While some of them are community-driven, others, like GraphQL or gRPC, are backed by&amp;nbsp;companies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://tools.ietf.org/html/rfc7396"&gt;&lt;abbr title="Request for Comments"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt;&lt;/abbr&gt; 7396. &lt;span class="caps"&gt;JSON&lt;/span&gt; Merge&amp;nbsp;Patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://tools.ietf.org/html/rfc7807"&gt;&lt;abbr title="Request for Comments"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt;&lt;/abbr&gt; 7807. Problem Details for &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://tools.ietf.org/html/rfc8594"&gt;&lt;abbr title="Request for Comments"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt;&lt;/abbr&gt; 8594. The Sunset &lt;span class="caps"&gt;HTTP&lt;/span&gt; Header&amp;nbsp;Field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://swagger.io/specification/"&gt;OpenAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://raml.org/"&gt;&lt;span class="caps"&gt;RAML&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://json-schema.org/"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://grpc.io/"&gt;gRPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dev&amp;nbsp;Experience&lt;/h2&gt;
&lt;p&gt;Barebone foundation is important, but let&amp;rsquo;s add some meat. While you can try to speculate about practical differences between GraphQL and &lt;span class="caps"&gt;REST&lt;/span&gt;+&lt;span class="caps"&gt;HTTP&lt;/span&gt;/2, you&amp;rsquo;ll learn faster from those who develop and use APIs as their career. I&amp;rsquo;m talking about developers, of course. For some inexplicable reason, some so-called &amp;ldquo;professionals&amp;rdquo; still perpetuate a myth about testers not being able to understand devs&amp;rsquo; books and articles, so prove those haters&amp;nbsp;wrong!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://martinfowler.com"&gt;Martin&amp;nbsp;Fowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.mnot.net/blog/"&gt;Mark&amp;nbsp;Nottingham&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://phil.tech/"&gt;Phil&amp;nbsp;Sturgeon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://apisyouwonthate.com"&gt;APIs You Won&amp;rsquo;t&amp;nbsp;Hate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Usability&lt;/h2&gt;
&lt;p&gt;I &lt;a class="internal" href="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/"&gt;like &lt;span class="caps"&gt;API&lt;/span&gt; usability&lt;/a&gt; &lt;a class="internal" href="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/"&gt;very much&lt;/a&gt;. Compared to performance or security, this theme is often overlooked. &lt;abbr title="Human–computer interaction"&gt;&lt;span class="caps"&gt;HCI&lt;/span&gt;&lt;/abbr&gt; is the whole field of study with real research and statistics magic, which may feel overwhelming at first. &lt;a class="external" href="https://docsbydesign.com/2017/09/20/a-brief-history-of-api-docs/"&gt;Here is a selection of papers to begin with&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By the way, there is a term in &lt;abbr title="Human–computer interaction"&gt;&lt;span class="caps"&gt;HCI&lt;/span&gt;&lt;/abbr&gt;: developer&amp;rsquo;s experience. &lt;span class="caps"&gt;DX&lt;/span&gt; is like &lt;span class="caps"&gt;UX&lt;/span&gt;, but when a user is a&amp;nbsp;developer. &lt;/p&gt;
&lt;h2&gt;Tech&amp;nbsp;Writers&lt;/h2&gt;
&lt;p&gt;I insist that without proper documentation an otherwise perfect &lt;span class="caps"&gt;API&lt;/span&gt; is still a shit. And who knows about docs better than technical writers? APIs are a hot topic for them, simply because that&amp;rsquo;s higher-paying&amp;nbsp;field.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://docsbydesign.com"&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;Docs by Design&amp;rdquo; by Bob&amp;nbsp;Watson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://idratherbewriting.com/"&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;I&amp;rsquo;d Rather Be Writing&amp;rdquo; by Tom&amp;nbsp;Johnson &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the side note, it&amp;rsquo;s curious from the tester&amp;rsquo;s viewpoint that tech writers have the same holy war about how &amp;ldquo;technical&amp;rdquo; they should be. Cute, isn&amp;rsquo;t&amp;nbsp;it?&lt;/p&gt;
&lt;h2&gt;Vendors and&amp;nbsp;Companies&lt;/h2&gt;
&lt;p&gt;Almost all &lt;span class="caps"&gt;IT&lt;/span&gt; companies now have blogs and even conferences, and those prove to be an excellent source. I&amp;rsquo;d suggest paying attention&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vendors who create tools to work with &lt;span class="caps"&gt;API&lt;/span&gt;:&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.getpostman.com"&gt;Postman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://stoplight.io/blog/"&gt;Stoplight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;companies whose main business is to provide or consume APIs:&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://zapier.com/engineering/"&gt;The Zapier&amp;nbsp;Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://stripe.com/en-ca/blog/engineering"&gt;Stripe&amp;nbsp;Engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Though, be skeptical. The former tries to sell their tools, whereas the latter tend to&amp;nbsp;show-off.&lt;/p&gt;
&lt;h2&gt;Testers&lt;/h2&gt;
&lt;p&gt;Some of you are probably asking where are recommendations on testers? Well&amp;hellip; &lt;strong&gt;fuck&amp;nbsp;testers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Don&amp;rsquo;t even bother reading &lt;strong&gt;attentively&lt;/strong&gt; testers&amp;rsquo; blogs about &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/em&gt; Don&amp;rsquo;t make my mistake! I&amp;rsquo;ve lost an unimaginable amount of time doing that: oftentimes, all of them can be divided into three&amp;nbsp;categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to apply well-known testing methods and techniques to&amp;nbsp;APIs.&lt;/li&gt;
&lt;li&gt;Basic theory on how APIs&amp;nbsp;work. &lt;/li&gt;
&lt;li&gt;Tutorials on using &lt;code&gt;&amp;lt;insert a library or a tool name&amp;gt;&lt;/code&gt; to test &lt;span class="caps"&gt;API&lt;/span&gt;. All those RestAssured, Karate, you name&amp;nbsp;it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Don&amp;rsquo;t get me wrong, I do understand that I&amp;rsquo;m also an offender and write similar articles. There is some value in them. For me, it&amp;rsquo;s a way to sort my thoughts. And reading still helps making sense on what to look for. Moreover, if you&amp;rsquo;ve just started your tester&amp;rsquo;s journey, perhaps you&amp;rsquo;re not so comfortable with test theory, then &lt;a class="external" href="https://www.developsense.com/blog/2018/07/exploratory-testing-on-an-api-part-1/"&gt;stories about its application&lt;/a&gt; are useful. Nevertheless, I can go on a day-long rant about how &lt;em&gt;learning &lt;strong&gt;only&lt;/strong&gt; from testers stupefies&amp;nbsp;you.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;So, heed my advice. I bet you already follow all those testers and see &lt;span class="caps"&gt;API&lt;/span&gt; related stuff from them once in a while. Skim through, there could be some interesting info, but don&amp;rsquo;t rely on them. Fun fact: the most popular talks on the &lt;a class="external" href="https://heisenbug.ru/en/"&gt;Heisenbug conference&lt;/a&gt; are from non-testers. Testing can never be an idea by itself; you need a practical application to other fields to give testing a sense and direction. That&amp;rsquo;s why studying those fields proves to be productive and enlightening. &lt;strong&gt;Always hunt for other&amp;nbsp;sources!&lt;/strong&gt; &lt;/p&gt;</content><category term="Testing"></category><category term="api"></category></entry><entry><title>How to Test API Usability: Part 2</title><link href="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/" rel="alternate"></link><published>2019-10-19T00:00:00-04:00</published><updated>2019-10-19T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-10-19:/articles/2019/10/19/how-to-test-api-usability-part-2/</id><summary type="html">&lt;p&gt;This is part two of a two-parter. Check out &lt;a class="internal" href="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/"&gt;part one&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Empirical&amp;nbsp;Methods&lt;/h2&gt;
&lt;p&gt;The distinction between analytical and empirical methods is that the latter investigates how real users will use the&amp;nbsp;product.&lt;/p&gt;
&lt;p&gt;But don&amp;rsquo;t assume that empirical methods are by default better than analytical: both are important because they …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is part two of a two-parter. Check out &lt;a class="internal" href="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/"&gt;part one&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Empirical&amp;nbsp;Methods&lt;/h2&gt;
&lt;p&gt;The distinction between analytical and empirical methods is that the latter investigates how real users will use the&amp;nbsp;product.&lt;/p&gt;
&lt;p&gt;But don&amp;rsquo;t assume that empirical methods are by default better than analytical: both are important because they discover different problems. &lt;a class="external" href="https://link.springer.com/content/pdf/10.1007%2F978-3-642-34347-6_10.pdf"&gt;This research&lt;/a&gt; showed that heuristics were more efficient in finding documentation and structural problems, whereas empirical methods were more useful in finding &lt;abbr title="User Experience"&gt;&lt;span class="caps"&gt;UX&lt;/span&gt;&lt;/abbr&gt; and runtime specific&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Barchart with comparison of different issue types found via different methods" src="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/api_ux_barchart.png"&gt;&lt;/p&gt;
&lt;h3&gt;Monitoring&lt;/h3&gt;
&lt;p&gt;Monitoring is used to gather usage statistics. For web services, it&amp;rsquo;s rather easy. For instance, you can discover that one &lt;span class="caps"&gt;API&lt;/span&gt; endpoint is never called. Hence, you should consider the causes: is it missing in the documentation or not needed to anyone? Monitoring also helps to map scenarios: what kind of requests, to which services, and in what order happen most&amp;nbsp;often.&lt;/p&gt;
&lt;p&gt;And don&amp;rsquo;t forget to monitor not only successful requests but also failures. Imagine, some business errors are stockpiling: maybe you need to reconsider &lt;span class="caps"&gt;API&lt;/span&gt; design or error&amp;nbsp;handling?&lt;/p&gt;
&lt;p&gt;Another thing to monitor is data volumes. Analysts from the project I worked on assumed that  type A documents should be more common than type B documents, so the service was better optimized for the first type. It was quite a surprise when we did a simple &lt;span class="caps"&gt;SQL&lt;/span&gt; count and found out that the number of type A documents were 600 thousand, while type B accounted for 80 million. After that discovery, we had to prioritize tasks related to service B way&amp;nbsp;higher.&lt;/p&gt;
&lt;h3&gt;Support&amp;nbsp;Tickets&lt;/h3&gt;
&lt;p&gt;If you have a support team, you&amp;rsquo;re in luck: analyze tickets, pick out those related to usability, and identify the most serious issues. Previously I &lt;a class="internal" href="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/"&gt;wrote about accidental Cyrillic symbols instead of English in service schema&lt;/a&gt;: these problems resurfaced specifically via&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;Moreover, support tickets offer insight into the most common tools and workflows used to work with your &lt;span class="caps"&gt;API&lt;/span&gt;. Once we had an external developer who generated &lt;code&gt;soapAction&lt;/code&gt; dynamically based on a root request structure by trimming the word &lt;code&gt;Request&lt;/code&gt;. For example, &lt;code&gt;importHouseRequest&lt;/code&gt; gave &lt;code&gt;importHouse&lt;/code&gt;. But one of our services with a name &lt;code&gt;importPaymentDocumentRequest&lt;/code&gt; expected &lt;code&gt;soapAction=importPaymentDocumentData&lt;/code&gt; instead of &lt;code&gt;importPaymentDocument&lt;/code&gt; (what the developer would expect). On the one hand, the user&amp;rsquo;s solution was poor: you&amp;rsquo;d better use &lt;abbr title="Web Services Description Language"&gt;&lt;span class="caps"&gt;WSDL&lt;/span&gt;&lt;/abbr&gt;. On the other hand, maybe they didn’t have a choice  and we probably should ask ourselves why naming wasn&amp;rsquo;t&amp;nbsp;consistent.&lt;/p&gt;
&lt;h3&gt;Surveys&lt;/h3&gt;
&lt;p&gt;Not everyone has a support service. Or perhaps it doesn&amp;rsquo;t give enough information. In that case, surveying &lt;span class="caps"&gt;API&lt;/span&gt; users is helpful. There is no point in giving examples: this topic is highly contextual. But you can start with the basics: &amp;ldquo;What do you like?&amp;rdquo;, &amp;ldquo;What do you don&amp;rsquo;t like?&amp;rdquo;, and &amp;ldquo;What would you like to&amp;nbsp;change?&amp;rdquo;.&lt;/p&gt;
&lt;h3&gt;User&amp;nbsp;Sessions&lt;/h3&gt;
&lt;p&gt;User sessions are the most expensive and cumbersome usability evaluation method. You need to find people based on a typical user profile, give them some tasks, watch the process, and analyze&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;Each company administers sessions in its own way. &lt;a class="external" href="http://apiux.com/2014/06/10/usability-dropbox-api/"&gt;Some perform remote sessions&lt;/a&gt;, &lt;a class="external" href="http://blog.pamelafox.org/2012/03/api-usability-testing.html"&gt;others invite developers on site&lt;/a&gt;. In both cases developers can use their own laptops and favorite IDEs: first, it&amp;rsquo;s closer to real-world conditions, second, it minimizes stress from an unknown&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;Yet, there are more exotic examples. A developer is led to the room with a one-way mirror (yup, like in movies). A usability expert sits behind the mirror and observes developer actions as well as what&amp;rsquo;s happening on the dev&amp;rsquo;s computer screen. The developer can ask questions, but the expert will answer only in rare cases. In my opinion, it&amp;rsquo;s too&amp;nbsp;sterile.&lt;/p&gt;
&lt;p&gt;Generally, all &lt;span class="caps"&gt;API&lt;/span&gt; related user sessions have two phases. The first phase is &lt;strong&gt;a developer workshop&lt;/strong&gt; with tasks&amp;nbsp;like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solve a problem in the notebook without an &lt;span class="caps"&gt;IDE&lt;/span&gt; (to get an idea of how developers would design &lt;span class="caps"&gt;API&lt;/span&gt; on their&amp;nbsp;own).&lt;/li&gt;
&lt;li&gt;Practical tasks for &lt;span class="caps"&gt;API&lt;/span&gt; usage (e.g., write a code for file upload using a&amp;nbsp;service).&lt;/li&gt;
&lt;li&gt;Read and review a code snippet to assess its clarity and readability (use printouts to make this task more&amp;nbsp;challenging).&lt;/li&gt;
&lt;li&gt;Debug a faulty code snippet (this helps to study how a user will handle and correct an&amp;nbsp;error).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second phase is &lt;strong&gt;an interview&lt;/strong&gt; where you&amp;nbsp;ask:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name three biggest issues you encountered during the workshop and how did you overcome them (documentation, support, StackOverflow, a friend&amp;rsquo;s&amp;nbsp;help)?&lt;/li&gt;
&lt;li&gt;How much time did you spend looking for additional information outside official&amp;nbsp;documentation?&lt;/li&gt;
&lt;li&gt;Did you encounter unexpected error messages? If yes, did they help you correct a&amp;nbsp;problem?&lt;/li&gt;
&lt;li&gt;Name at least three ways to improve official&amp;nbsp;documentation.&lt;/li&gt;
&lt;li&gt;Name at least three ways to improve &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;design.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Personas&lt;/h2&gt;
&lt;p&gt;Personas are used both in analytical and empirical methods. All you need is to figure out which characteristics best describe your users (in case of &lt;span class="caps"&gt;API&lt;/span&gt;, developers). These descriptions tend to be humanized by assigning a name and a photo, adding information about fears and preferences. You can wear a &amp;ldquo;persona hat&amp;rdquo; while applying heuristics or rely on them while selecting developers for user&amp;nbsp;sessions.&lt;/p&gt;
&lt;p&gt;Typical developers&amp;rsquo;&amp;nbsp;personas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Systematic developers&lt;/strong&gt; don&amp;rsquo;t trust &lt;span class="caps"&gt;API&lt;/span&gt; and write code defensively. They are usually deductive, write on C++, C, or even&amp;nbsp;Assembly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pragmatic developers&lt;/strong&gt; are more common and work both in deductive and inductive manners. Typically they code desktop and mobile apps in Java or&amp;nbsp;C#.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opportunistic developers&lt;/strong&gt; concentrate on solving business problems in an exploratory and inductive fashion. Guess what language they prefer?&amp;nbsp;JavaScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition warning"&gt;
&lt;p&gt;Now, I want to point out that the aforementioned language discrimination is not my invention. If you&amp;rsquo;re lucky, perhaps you&amp;rsquo;ll find the original article by Visual Studio usability expert, where these quirky definitions were introduced. Unfortunately, I was able to get only &lt;a class="external" href="https://web.archive.org/web/20190402085549/http://www.drdobbs.com/windows/measuring-api-usability/184405654"&gt;its first page in the Wayback Machine&lt;/a&gt;, so you have to take my word for it. Nevertheless, I hope this example can encourage you to create your own&amp;nbsp;personas. &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We can also combine personas with cognitive dimensions. Create &lt;a class="external" href="https://en.wikipedia.org/wiki/Radar_chart"&gt;a radar chart&lt;/a&gt; with 12 axes, where each axis is a cognitive dimension. Next, plot current values for your &lt;span class="caps"&gt;API&lt;/span&gt; and values according to the persona&amp;rsquo;s expectations. This chart is great for comparing how existing &lt;span class="caps"&gt;API&lt;/span&gt; corresponds to user&amp;nbsp;values. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Radar chart with comparison of developer expectations vs current state of API" src="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/api_ux_chart.png"&gt;&lt;/p&gt;
&lt;p&gt;Developer from the example chart (blue line) prefers &lt;span class="caps"&gt;API&lt;/span&gt; with a high level of consistency (10) and hates writing boilerplate (4). As we can see, the current state of &lt;span class="caps"&gt;API&lt;/span&gt; (black line) doesn&amp;rsquo;t satisfy these&amp;nbsp;criteria.&lt;/p&gt;
&lt;h2&gt;Summing&amp;nbsp;Up&lt;/h2&gt;
&lt;p&gt;Readers comfortable with &lt;span class="caps"&gt;GUI&lt;/span&gt; usability testing would say: &amp;ldquo;That&amp;rsquo;s exactly the same stuff!&amp;rdquo;. And you&amp;rsquo;re right, there is nothing supernatural about &lt;span class="caps"&gt;API&lt;/span&gt; usability. Even though it&amp;rsquo;s called an &lt;em&gt;application programming&lt;/em&gt; interface, programs are yet to learn how to find other APIs and use them automatically; they still need us, meatbags. That&amp;rsquo;s why almost everything applied for &lt;span class="caps"&gt;GUI&lt;/span&gt; usability evaluation is reusable for &lt;span class="caps"&gt;API&lt;/span&gt; with some&amp;nbsp;adjustments.&lt;/p&gt;
&lt;p&gt;Now, what about &lt;em&gt;the best method?&lt;/em&gt;  None, apply them all! &lt;a class="external" href="https://link.springer.com/content/pdf/10.1007%2F978-3-642-34347-6_10.pdf"&gt;According to this research&lt;/a&gt;, each method can identify unique&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Venn diagram showing how different methods overlap in finding different issues" src="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/api_ux_stats.png"&gt;&lt;/p&gt;
&lt;p&gt;If you are tight on resources, I suggest using the least expensive methods: heuristics, cognitive dimensions, walkthrough, and support tickets. Even the simplest techniques can drive &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;improvements.&lt;/p&gt;
&lt;p&gt;Someone would argue that &lt;span class="caps"&gt;API&lt;/span&gt; usability is not that important: &amp;ldquo;we don&amp;rsquo;t have time for that, it&amp;rsquo;s a dev thingy.&amp;rdquo; But developers created &lt;a class="external" href="https://github.com/google/styleguide"&gt;style guides&lt;/a&gt; not just to be fancy; this serves to accelerate the achievement of shippable quality. We care about hidden code quality, therefore we need to care about externally visible code like APIs even&amp;nbsp;more.&lt;/p&gt;</content><category term="Testing"></category><category term="api"></category><category term="usability"></category></entry><entry><title>How to Test API Usability: Part 1</title><link href="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/" rel="alternate"></link><published>2019-10-13T00:00:00-04:00</published><updated>2019-10-13T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-10-13:/articles/2019/10/13/how-to-test-api-usability-part-1/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; this is a translation of &lt;a class="external" href="https://quality-lab.ru/blog/api-usability-testing/"&gt;the article&lt;/a&gt; written 2 years ago for a corporate blog. Bear in mind, at the moment of the writing I was testing &lt;span class="caps"&gt;SOAP&lt;/span&gt; services and Excel-based import/export at big government project, so most of the examples relate to that&amp;nbsp;experience.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Usability is one …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; this is a translation of &lt;a class="external" href="https://quality-lab.ru/blog/api-usability-testing/"&gt;the article&lt;/a&gt; written 2 years ago for a corporate blog. Bear in mind, at the moment of the writing I was testing &lt;span class="caps"&gt;SOAP&lt;/span&gt; services and Excel-based import/export at big government project, so most of the examples relate to that&amp;nbsp;experience.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Usability is one of the most crucial quality attributes of an &lt;span class="caps"&gt;API&lt;/span&gt;. Let&amp;rsquo;s talk about why, when, and how we can assess this&amp;nbsp;characteristic.&lt;/p&gt;
&lt;p&gt;Today (hopefully) no one doubts the necessity of usability testing of &lt;abbr title="Graphical user interface"&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;&lt;/abbr&gt;. Yet, according to &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_9241"&gt;&lt;span class="caps"&gt;ISO&lt;/span&gt; 9241&lt;/a&gt;, &lt;em&gt;usability is the effectiveness, efficiency and satisfaction with which specified users achieve specified goals in particular environments.&lt;/em&gt; There is no mention of menus, fonts, or buttons color. Hence, we can evaluate usability of any product, be it a mobile app, a vacuum cleaner, or an &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For testing &lt;span class="caps"&gt;API&lt;/span&gt; usability we can use methods developed in the field of &lt;abbr title="Human-computer interaction"&gt;&lt;span class="caps"&gt;HCI&lt;/span&gt;&lt;/abbr&gt;; same as used for &lt;abbr title="Graphical user interface"&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;&lt;/abbr&gt;. Generally, these methods can be divided into two categories: analytical and&amp;nbsp;empirical.&lt;/p&gt;
&lt;h2&gt;Analytical&amp;nbsp;Methods&lt;/h2&gt;
&lt;p&gt;Analytical methods involve exploration based on some expert knowledge. Loosely speaking, you and/or the whole dev team try to evaluate and find hypothetical usability problems without users&amp;nbsp;input.&lt;/p&gt;
&lt;h3&gt;Heuristic&amp;nbsp;Evaluation&lt;/h3&gt;
&lt;p&gt;Easiest way is to use heuristics. There are no strict lists of what criteria you should check; all depends on what kind of &lt;span class="caps"&gt;API&lt;/span&gt; you have (e.g., library or &lt;span class="caps"&gt;REST&lt;/span&gt;&amp;nbsp;service).&lt;/p&gt;
&lt;p&gt;For instance, &lt;a class="external" href="https://link.springer.com/content/pdf/10.1007%2F978-3-642-34347-6_10.pdf"&gt;a paper on a structural analysis of usability problem categories&lt;/a&gt; mentions this set of&amp;nbsp;heuristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complexity.&lt;/strong&gt; An &lt;span class="caps"&gt;API&lt;/span&gt; should not be too complex. Complexity and flexibility should be balanced. Use&amp;nbsp;abstraction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Naming.&lt;/strong&gt; Names should be self-documenting and used&amp;nbsp;consistently. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caller&amp;rsquo;s perspective.&lt;/strong&gt; Make the code readable, e.g. &lt;code&gt;makeTV(Color)&lt;/code&gt; is better than &lt;code&gt;makeTV(true)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation.&lt;/strong&gt; Provide documentation and&amp;nbsp;examples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency  and  conventions.&lt;/strong&gt; Design consistent APIs (order of parameters, call semantics) and obey conventions (get/set&amp;nbsp;methods).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conceptual correctness.&lt;/strong&gt; Help programmers to use an &lt;span class="caps"&gt;API&lt;/span&gt; properly by using correct&amp;nbsp;elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Method parameters and return type.&lt;/strong&gt; Do not use many parameters. Return values should indicate a result of the method. Use exceptions when exceptional processing is&amp;nbsp;demanded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parametrized  constructor.&lt;/strong&gt; Always provide default constructor and setters rather than a constructor with multiple&amp;nbsp;parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Factory pattern.&lt;/strong&gt; Use factory pattern only when&amp;nbsp;inevitable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data types.&lt;/strong&gt; Choose correct data types. Do not force users to use casting. Avoid using strings if better type&amp;nbsp;exists.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concurrency.&lt;/strong&gt; Anticipate concurrent access in&amp;nbsp;mind.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error handling and exceptions.&lt;/strong&gt; Define class members as public only when necessary. Exceptions should be handled near from where it occurred. Error message should convey sufficient&amp;nbsp;information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Leftovers for client code.&lt;/strong&gt; Make the user type as few code as&amp;nbsp;possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple ways to do one.&lt;/strong&gt; Do not provide multiple ways to achieve one&amp;nbsp;thing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Long chain of references.&lt;/strong&gt; Do not use long complex inheritance&amp;nbsp;hierarchies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implementation vs. interface.&lt;/strong&gt; Interface dependencies should be preferred as they are more&amp;nbsp;flexible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s try to apply some of these heuristics.
There was a time when every new tester came to me during the onboarding and asked about the error message &amp;ldquo;House with &lt;span class="caps"&gt;ID&lt;/span&gt; &amp;lt;&amp;gt; was not found.&amp;rdquo; I told them to use internal system id instead of global &lt;span class="caps"&gt;FIAS&lt;/span&gt; id (Russian index system for buildings). And every one looked startled and answered me that there is no such parameter in the &lt;span class="caps"&gt;API&lt;/span&gt; request! Well, the problem was that you had to use the same parameter named &lt;code&gt;FIASHouseGUID&lt;/code&gt;. For some reason when system was designed no one thought that the better name would have been &lt;code&gt;HouseID&lt;/code&gt; as it could be filled either with &lt;span class="caps"&gt;FIAS&lt;/span&gt; id or with internal id. Even though current name was misleading (naming heuristic), it was no longer possible to change without breaking backward&amp;nbsp;compatibility. &lt;/p&gt;
&lt;p&gt;Next example is about error handling. One service I tested had a very common error &amp;ldquo;Access is denied.&amp;rdquo; There were numerous reasons for this error: no entitling documents, documents are not in the status &amp;ldquo;published,&amp;rdquo; other organization already created the same object. Reasons were different, but the received error message was the same; users couldn&amp;rsquo;t guess what was their&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;There are other, more &amp;ldquo;serious&amp;rdquo; heuristics for &lt;span class="caps"&gt;API&lt;/span&gt;. Often they target specific technical details. You need to be able to code to understand them. For example, &lt;a class="external" href="http://www.cs.bc.edu/~muller/teaching/cs102/s06/lib/pdf/api-design"&gt;criteria from Joshua Bloch&lt;/a&gt;. Or &lt;a class="external" href="https://www.cs.cmu.edu/~NatProg/papers/Stylos2007CreateSetCall.pdf"&gt;a usability research made by Microsoft&lt;/a&gt; to determine which constructor is better: default constructor with setters and getters or constructor with required parameters. Results showed that the first method was more preferable; this became a heuristic for library&amp;nbsp;design.&lt;/p&gt;
&lt;h3&gt;Cognitive&amp;nbsp;Dimensions&lt;/h3&gt;
&lt;p&gt;These are distinct criteria used predominately for evaluating usability of notations, user interfaces, and programming languages &amp;mdash; or, generally speaking, information artifacts. In my view, they intersect with some heuristics, but there is a difference: heuristics are contextually selected by some experts, whereas cognitive dimensions are more or less stable set of principles. You can read about the main set described by Thomas &lt;span class="caps"&gt;R.G.&lt;/span&gt; Green and Marian Petre &lt;a class="external" href="https://en.wikipedia.org/wiki/Cognitive_dimensions_of_notations"&gt;in the Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some companies customize cognitive dimensions for their needs, like &lt;a class="external" href="https://web.archive.org/web/20190402085549/http://www.drdobbs.com/windows/measuring-api-usability/184405654"&gt;a framework suggested by Visual Studio usability group&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Abstraction level.&lt;/strong&gt; The minimum and maximum levels of abstraction exposed by the &lt;span class="caps"&gt;API&lt;/span&gt;, and the minimum and maximum levels usable by a targeted&amp;nbsp;developer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learning style.&lt;/strong&gt; The learning requirements posed by the &lt;span class="caps"&gt;API&lt;/span&gt; and the learning styles available to a targeted&amp;nbsp;developer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working framework.&lt;/strong&gt; The size of the conceptual chunk (developer working set) needed to work&amp;nbsp;effectively.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Work-step unit.&lt;/strong&gt; How much of a programming task must/can be completed in a single&amp;nbsp;step.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Progressive evaluation.&lt;/strong&gt; To what extent partially completed code can be executed to obtain feedback on code&amp;nbsp;behavior.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Premature commitment.&lt;/strong&gt; The number of decisions that developers have to make when writing code for a given scenario and the consequences of those&amp;nbsp;decisions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Penetrability.&lt;/strong&gt; How the &lt;span class="caps"&gt;API&lt;/span&gt; facilitates exploration, analysis, and understanding of its components, and how targeted developers go about retrieving what is&amp;nbsp;needed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;API&lt;/span&gt; elaboration.&lt;/strong&gt; The extent to which the &lt;span class="caps"&gt;API&lt;/span&gt; must be adapted to meet the needs of targeted&amp;nbsp;developers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;API&lt;/span&gt; viscosity.&lt;/strong&gt; The barriers to change inherent in the &lt;span class="caps"&gt;API&lt;/span&gt; and how much effort a targeted developer needs to expend to make a&amp;nbsp;change.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency.&lt;/strong&gt; How much of the rest of an &lt;span class="caps"&gt;API&lt;/span&gt; can be inferred once part of it is&amp;nbsp;learned.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Role expressiveness.&lt;/strong&gt; How apparent the relationship is between each component exposed by an &lt;span class="caps"&gt;API&lt;/span&gt; and the program as a&amp;nbsp;whole.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Domain correspondence.&lt;/strong&gt; How clearly the &lt;span class="caps"&gt;API&lt;/span&gt; components map to the domain and any special tricks that the developer needs to be aware of to accomplish some&amp;nbsp;functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example for domain correspondence. Service main entity was a house. Common apartment building can have several entryways, each leading to set of apartments. But in Kaliningrad this doesn&amp;rsquo;t apply: a typical address there can look like &amp;ldquo;2-4 Green Street,&amp;rdquo; where entryways are house 2 and house 4. This bizarre (and initially unknown) domain model broke the whole logic behind &lt;span class="caps"&gt;API&lt;/span&gt; design. For instance, we had to allow users to add house-level metering devices to entryways if it&amp;rsquo;s actually a&amp;nbsp;house.&lt;/p&gt;
&lt;h3&gt;Cognitive&amp;nbsp;Walkthrough&lt;/h3&gt;
&lt;p&gt;While the first two methods are based on checking &lt;span class="caps"&gt;API&lt;/span&gt; against some kind of list of criteria, cognitive walkthrough is closer to scenario-based testing. Essentially, an expert comes up with typical &lt;span class="caps"&gt;API&lt;/span&gt; usage scenarios and attempts to perform&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cognitive walkthrough example" src="https://www.aviskase.com/articles/2019/10/13/how-to-test-api-usability-part-1/walkthrough.png"&gt;&lt;/p&gt;
&lt;p&gt;You can combine this method with heuristics. When we analyzed services, we found out that there were  problems with the consistency: when you sent a request to create an entity, some services responded with entity version id, while others provided root id. Moreover, most of the services required entity id for creation of other entities, and again, it could be either root or version id. It didn&amp;rsquo;t look that bad, until we tried walking through a business&amp;nbsp;scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an entitling&amp;nbsp;document&lt;/li&gt;
&lt;li&gt;Create a metering device providing document root&amp;nbsp;id&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In existing &lt;span class="caps"&gt;API&lt;/span&gt; workflow you had to do it in 3 steps  instead of&amp;nbsp;2:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an entitling document → server responds with document version&amp;nbsp;id&lt;/li&gt;
&lt;li&gt;Retrieve the document using provided version id and get document root id from the&amp;nbsp;response&lt;/li&gt;
&lt;li&gt;Create a metering device providing document root&amp;nbsp;id&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This middle step is objectively unnecessary and generates additional server load. Here, using cognitive walkthrough, we also detected an inconsistency with heuristic &amp;ldquo;minimal working code&amp;nbsp;size.&amp;rdquo;&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Peer&amp;nbsp;Review&lt;/h3&gt;
&lt;p&gt;Heuristics and walkthroughs are great methods, but they could be quite subjective. For better objectivity you&amp;rsquo;d better use group evaluations, where several persons analyze &lt;span class="caps"&gt;API&lt;/span&gt;. You can read about how and why this method can find usability problems which are rarely found by empirical methods in &lt;a class="external" href="https://pdfs.semanticscholar.org/b936/17a339d2a1dfa167e6700d15e31d813c331c.pdf"&gt;this Microsoft paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Peer reviews involve these four&amp;nbsp;roles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Usability expert who will organize and moderate the evaluation process from usability&amp;nbsp;perspective&lt;/li&gt;
&lt;li&gt;A person who is an owner for the specific &lt;span class="caps"&gt;API&lt;/span&gt; chunk under&amp;nbsp;review&lt;/li&gt;
&lt;li&gt;A person who is an owner of the &lt;span class="caps"&gt;API&lt;/span&gt; unit (or system) where the reviewed chunk resides and who knows the context of &lt;span class="caps"&gt;API&lt;/span&gt; usage and its interactions with other&amp;nbsp;APIs&lt;/li&gt;
&lt;li&gt;3-4 persons who will complete some task which will be used to actually evaluate usability (usually just other&amp;nbsp;developers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the planning process, a usability expert and a chunk owner should&amp;nbsp;discuss:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key tasks to be completed during the review (e.g., how to create a document using an &lt;span class="caps"&gt;API&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Code examples to be&amp;nbsp;reviewed&lt;/li&gt;
&lt;li&gt;Who are the other participants (they can be selected based on specific criteria, like knowledge of &lt;span class="caps"&gt;SOAP&lt;/span&gt; services and&amp;nbsp;Java)&lt;/li&gt;
&lt;li&gt;Place and time for review&amp;nbsp;session&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should start a peer review session with the explanation of how this meeting will proceed and communicate basic information related to the evaluated &lt;span class="caps"&gt;API&lt;/span&gt; chunk. Next you distribute code examples and discuss them, asking these main&amp;nbsp;questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you understand what this code does and what its objective&amp;nbsp;is?&lt;/li&gt;
&lt;li&gt;Is this objective achieved in logical and rational&amp;nbsp;manner?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on the answers, a usability expert asks to elaborate details. For example, hearing that naming is weird, expert should ask why a person thinks that way and what different name would be&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;The final step is to analyze problems. Here is where an &lt;span class="caps"&gt;API&lt;/span&gt; unit owner can help to identify the most significant issues and could they be resolved or&amp;nbsp;not.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That&amp;rsquo;s the end of part one. Empirical methods are covered in &lt;a class="internal" href="https://www.aviskase.com/articles/2019/10/19/how-to-test-api-usability-part-2/"&gt;part two&lt;/a&gt;.&lt;/p&gt;</content><category term="Testing"></category><category term="api"></category><category term="usability"></category></entry><entry><title>Internal Struggle with Language Gymnastics</title><link href="https://www.aviskase.com/articles/2019/10/05/internal-struggle-with-language-gymnastics/" rel="alternate"></link><published>2019-10-05T00:00:00-04:00</published><updated>2019-10-05T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-10-05:/articles/2019/10/05/internal-struggle-with-language-gymnastics/</id><summary type="html">&lt;p&gt;During the &lt;span class="caps"&gt;RSTA&lt;/span&gt; class I asked a question about language and&amp;nbsp;communications:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On one hand, I wholly agree with the notion that we should be attentive with words. Like checking vs testing, &amp;ldquo;quality assurance&amp;rdquo;, and all those other things. I find myself as they say &amp;ldquo;nit-picking&amp;rdquo; quite&amp;nbsp;often.&lt;/p&gt;
&lt;p&gt;On the …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;During the &lt;span class="caps"&gt;RSTA&lt;/span&gt; class I asked a question about language and&amp;nbsp;communications:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On one hand, I wholly agree with the notion that we should be attentive with words. Like checking vs testing, &amp;ldquo;quality assurance&amp;rdquo;, and all those other things. I find myself as they say &amp;ldquo;nit-picking&amp;rdquo; quite&amp;nbsp;often.&lt;/p&gt;
&lt;p&gt;On the other hand, I also follow a rule &amp;ldquo;if your team understands you, words don&amp;rsquo;t matter&amp;rdquo;. Especially, if you come to the established project with existing vocabulary. It can be bizarre and absurd (my favorite was &amp;ldquo;bug validation&amp;rdquo; for the process of checking bug fixes), but it&amp;rsquo;s habitual to everyone, so you&amp;rsquo;ll likely spend more time trying to &amp;ldquo;reteach&amp;rdquo; than working. And you&amp;rsquo;ll probably&amp;nbsp;fail.&lt;/p&gt;
&lt;p&gt;So&amp;hellip; how to live with this&amp;nbsp;contradiction?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And&amp;nbsp;later:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As I understand you, contradiction is resolved by considering how much harm it can&amp;nbsp;create?&lt;/p&gt;
&lt;p&gt;That makes sense. Pain and risk analysis in practice. Even though I said that &amp;ldquo;defect validation&amp;rdquo; absurdity was my favorite, it wasn&amp;rsquo;t harmful for thinking processes: we usually didn&amp;rsquo;t even call it like that and used abbreviation &amp;ldquo;&lt;span class="caps"&gt;DV&lt;/span&gt;&amp;rdquo;. Or sometimes &lt;span class="caps"&gt;QA&lt;/span&gt; (grrr). I noticed that majority of non-dev colleagues don&amp;rsquo;t even know what A stands for. Probably it&amp;rsquo;s the reason why some testers come up with new reinterpretations like &amp;ldquo;Advocate&amp;rdquo; or &amp;ldquo;Assistant&amp;rdquo;. &lt;span class="caps"&gt;BTW&lt;/span&gt;, here is a &lt;a class="external" href="https://thebrokentest.com/50-shades-of-quality/"&gt;funny example&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While James debated that there is no contradiction, it is there. It&amp;rsquo;s my internal contradiction. I feel these sides of me constantly struggling; for an outside viewer it can be perceived as&amp;nbsp;inconsistency.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t found resolution to this conflict yet, but it occurred to me that it is based on the conflict between characteristic testers&amp;rsquo; nit-pickiness and my amateur linguistics&amp;nbsp;studies. &lt;/p&gt;
&lt;p&gt;You see, when it comes to languages in general, my position is 100% on the side of &amp;ldquo;all is fine as long we understand each other&amp;rdquo;.&amp;nbsp;Why? &lt;/p&gt;
&lt;h2&gt;Pronunciation&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m not English native speaker. And I&amp;rsquo;m not gifted with an ability to perfectly emulate a native pronunciation. In fact, sometimes I have to speak with an even heavier Russian accent than my usual, because it&amp;rsquo;s easier to understand for some&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;Now, if we go even further, &lt;em&gt;what is a native pronunciation?&lt;/em&gt; Standard American? Or Royal &lt;span class="caps"&gt;UK&lt;/span&gt;? Or Canadian, eh? So, even if I could speak using one proper variant, it still won&amp;rsquo;t be &lt;em&gt;really native&lt;/em&gt; in many&amp;nbsp;contexts.&lt;/p&gt;
&lt;h2&gt;Vocabulary&lt;/h2&gt;
&lt;p&gt;Obvious point with the same examples as before. But that&amp;rsquo;s English, the de-facto new Latin. Let me tell you an anecdote from Russian. I was born in the Northern Kazakhstan in the city on the border with Russia. You&amp;rsquo;d imagine not many vocabulary differences. Yet, the moment you cross the border everyone can tell that you&amp;rsquo;re from Kazakhstan just by one extremely common word: &lt;em&gt;&amp;ldquo;sotka&amp;rdquo;&lt;/em&gt; (contraction for &amp;ldquo;a cell phone&amp;rdquo;). In Russia they use &lt;em&gt;&amp;ldquo;mobilka&amp;rdquo;&lt;/em&gt; (contraction from &amp;ldquo;a mobile phone&amp;rdquo;). This reminds me of &amp;ldquo;smoke&amp;rdquo; vs &amp;ldquo;sanity&amp;rdquo; testing a&amp;nbsp;lot.&lt;/p&gt;
&lt;h2&gt;Words&amp;nbsp;Origins&lt;/h2&gt;
&lt;p&gt;Some words with the same spelling can have completely distinct origins. For example, &lt;em&gt;&amp;ldquo;bear&amp;rdquo;&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as for an animal came from Proto-Indo-European &lt;code&gt;*bʰerH-&lt;/code&gt; (grey, brown) or &lt;code&gt;*ǵʰwer-&lt;/code&gt; (wild&amp;nbsp;animal)&lt;/li&gt;
&lt;li&gt;as for &amp;ldquo;to sustain&amp;rdquo; came from Proto-Indo-European &lt;code&gt;*bʰer-&lt;/code&gt; (to&amp;nbsp;carry)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the opposite situation, when words with different spelling and meaning came from the same origin, e.g. &lt;em&gt;&amp;ldquo;suit&amp;rdquo;&lt;/em&gt; and &lt;em&gt;&amp;ldquo;suite&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;People tend to make wrong assumptions about modern spelling and pronunciation. We think we understand words and their relative closeness. We don&amp;rsquo;t. Therefore, many  everyday conclusions about them are also faulty. Those who try to be on a safe side refer to dictionaries, but here is a catch: dictionaries are opinionated language slices. That&amp;rsquo;s why there are so many dictionaries: general, jargon-specific, etymological. There is no single point of truth you can safely refer to. Isn&amp;rsquo;t it funny when you read news about some big-name dictionary &lt;em&gt;finally&lt;/em&gt; including a word that was in use for a long&amp;nbsp;time?&lt;/p&gt;
&lt;p&gt;By the way, in Russian &lt;em&gt;&amp;ldquo;тестер&amp;rdquo;&lt;/em&gt; while being direct calque of &amp;ldquo;tester&amp;rdquo; is a name for devices like multimeter. Electrical engineers coined this term in Russian earlier than our role was invented (so we are named &amp;ldquo;тестировщик&amp;rdquo; ~ &amp;ldquo;testist&amp;rdquo;). It&amp;rsquo;s quite funny considering how much emphasize is there on testing being human&amp;nbsp;activity. &lt;/p&gt;
&lt;h2&gt;Evolution of&amp;nbsp;Languages&lt;/h2&gt;
&lt;p&gt;All aforementioned are just smaller parts of overall language evolution. For some reason we are accustomed to perceive a language as something stagnant and with rigid unchanging rules. Maybe because it&amp;rsquo;s easier to teach like that in school? And nothing can be further from true because languages are perpetually in flux, either for historical or geographical reasons. Before it was happening naturally without many obstacles, but now we have schools, official authorities like Académie française, and beloved&amp;nbsp;grammar-nazis. &lt;/p&gt;
&lt;p&gt;One of the best examples is an accentual system in Russian (stress). Whoever tried to learn how to pronounce Russian words would be certainly baffled how illogical it is. Natives make mistakes all the time. The reason is simple: current system is in the transition state from highly ordered and easy Proto-Slavic accent to the new someday also ordered but different accent. Yet right now transition is around 30% mark and it breaks havoc within speakers. What makes things worse are all those regulatory bodies and opinionated people who try to control this process and make you speak already obsolete&amp;nbsp;way. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I won&amp;rsquo;t be able to stop arguing about some words. Even those who say that they are sick and tired of some common testing debates, still nit-pick on other concepts. It&amp;rsquo;s a part of human nature which is common not only in testing community: recently I&amp;rsquo;ve read &lt;a class="external" href="https://www.troyhunt.com/your-api-versioning-is-wrong-which-is/"&gt;an article by Troy Hunt&lt;/a&gt; about which way of &lt;span class="caps"&gt;API&lt;/span&gt; versioning is better. And the most valuable lesson from there&amp;nbsp;is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unfortunately this very often gets philosophical and loses sight of what the real goal should be: &lt;strong&gt;building software that&amp;nbsp;works&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Testing"></category><category term="thoughts"></category></entry><entry><title>Achievement Unlocked: RSTA</title><link href="https://www.aviskase.com/articles/2019/09/30/achievement-unlocked-rsta/" rel="alternate"></link><published>2019-09-30T00:00:00-04:00</published><updated>2019-09-30T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-30:/articles/2019/09/30/achievement-unlocked-rsta/</id><summary type="html">&lt;p&gt;Landscape of testing related courses is problematic. On one hand, there are &lt;em&gt;lots&lt;/em&gt; of courses. On the other hand, there are &lt;em&gt;few&lt;/em&gt; courses &lt;em&gt;I would consider.&lt;/em&gt; Either they are lackluster and certificate-centered, or entry-level-only, or mind-bogglingly expensive. And about the last bit. Many say that if a company provide a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Landscape of testing related courses is problematic. On one hand, there are &lt;em&gt;lots&lt;/em&gt; of courses. On the other hand, there are &lt;em&gt;few&lt;/em&gt; courses &lt;em&gt;I would consider.&lt;/em&gt; Either they are lackluster and certificate-centered, or entry-level-only, or mind-bogglingly expensive. And about the last bit. Many say that if a company provide a training budget, costs don&amp;rsquo;t matter. Well, maybe if that company is one of &lt;a class="external" href="https://en.wikipedia.org/wiki/Facebook,_Apple,_Amazon,_Netflix_and_Google"&gt;&lt;span class="caps"&gt;FAANG&lt;/span&gt;&lt;/a&gt;, you can think so. But I work in a small one and I don&amp;rsquo;t want to throw its (our?) money&amp;nbsp;away.&lt;/p&gt;
&lt;p&gt;Nevertheless, there are always some courses and trainings which you just want to attend to. For example, those from Satisfice, Inc. That&amp;rsquo;s why I applied as soon as I saw time convenient online version of Rapid Software Testing Applied. And, &lt;span class="caps"&gt;BTW&lt;/span&gt;, the price was&amp;nbsp;decent.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to write about the course agenda and curriculum: google is your friend. I will neither sing praises to its appeal and importance nor criticize its materials. We can argue as much as we like on should testers be able to code or not, but the knowledge of who James Bach and Michael Bolton are can be a mark of competency (necessary but not sufficient). And based on this knowledge, I think, it&amp;rsquo;s quite obvious what you can expect from such course. I also won&amp;rsquo;t describe what &lt;em&gt;I learned:&lt;/em&gt; the most useful attainments are tacit and will surface in future work and&amp;nbsp;articles. &lt;/p&gt;
&lt;p&gt;So, this article is about technical moments. My previous place of work, Quality Lab, provides trainings, and from there I&amp;rsquo;ve discovered an interest in learning and comparing processes used in&amp;nbsp;education.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;RSTA&lt;/span&gt; was held September 18-20, completely online. It was nice that we used Mattermost for communications; I used this open source messenger before. Usually, it&amp;rsquo;s always scary how courses handle linux users: sometimes they require skype (which became quite awful) or webinars are streamed with god knows what. Here everything was ok, linuxhead&amp;rsquo;s feelings were not&amp;nbsp;offended.&lt;/p&gt;
&lt;p&gt;After the course we received &lt;strong&gt;all&lt;/strong&gt; materials, not just slides and recordings, but&amp;nbsp;also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Agenda &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;log &lt;/li&gt;
&lt;li&gt;Recordings&lt;/li&gt;
&lt;li&gt;Class materials (like slides and articles to&amp;nbsp;read)&lt;/li&gt;
&lt;li&gt;Session reports with attachments (with comments by&amp;nbsp;instructor)&lt;/li&gt;
&lt;li&gt;Bug list (with comments and&amp;nbsp;attachments)&lt;/li&gt;
&lt;li&gt;Group chats&amp;nbsp;archive &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last part is really awesome. I, like a fool, sat and copied all important messages. Even woke up during the night realizing I forgot to save some PDFs. And it turned out not to be a problem at all, because I have the whole archive now.&amp;nbsp;Super.&lt;/p&gt;
&lt;p&gt;One thing I would change is a duration: three days for &amp;ldquo;Applied&amp;rdquo; is too fast. You&amp;rsquo;d want more practice. For example, double all assignments, where the first time would be a &amp;ldquo;learning&amp;rdquo; and the second time &amp;mdash; &amp;ldquo;reinforcement and revision&amp;rdquo;. Reporting assignments would be a great addition too. Also, it would be interesting to intensify students&amp;rsquo; cooperations: working in teams was possible, but wasn&amp;rsquo;t required. What if there was one obligatory assignment for paired&amp;nbsp;testing?..&lt;/p&gt;
&lt;p&gt;Our group, as I understand, was smaller than usual. But for me it was an upside, because I read all assignments and bug reports. As usual, some students were more active than others: big shoutout for them for questions and&amp;nbsp;discussions!&lt;/p&gt;
&lt;p&gt;Overall atmosphere was pleasant. I noticed that in some other courses instructors were present only as talking heads in the pre-recorded videos and names in the ads. Not in this case. James answered questions himself and commented on assignments and bugs; peers advisors only&amp;nbsp;helped.&lt;/p&gt;
&lt;p&gt;Active students, honest instructor and peer advisors are the most significant  qualities for me. We go to the training to get out from our bubble; the more communications and sharing we get, the more valuable is this experience. And &lt;span class="caps"&gt;RSTA&lt;/span&gt; definitely fulfilled this&amp;nbsp;expectation.&lt;/p&gt;</content><category term="Testing"></category><category term="course"></category></entry><entry><title>New Domain</title><link href="https://www.aviskase.com/articles/2019/09/24/new-domain/" rel="alternate"></link><published>2019-09-24T00:00:00-04:00</published><updated>2019-09-24T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-24:/articles/2019/09/24/new-domain/</id><summary type="html">&lt;p&gt;Yay, I&amp;rsquo;ve bought my own&amp;nbsp;domain! &lt;/p&gt;
&lt;p&gt;First I though about fancy-schmancy &lt;code&gt;.me&lt;/code&gt; or &lt;code&gt;.io&lt;/code&gt;. Or maybe &lt;code&gt;aviska.se&lt;/code&gt;. But I went with simple aviskase.com. Not that I am particularly invested into &lt;span class="caps"&gt;SEO&lt;/span&gt; and stuff, but all the articles recommend to be boring. Also, I used &lt;em&gt;comparable products&lt;/em&gt; heuristic …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yay, I&amp;rsquo;ve bought my own&amp;nbsp;domain! &lt;/p&gt;
&lt;p&gt;First I though about fancy-schmancy &lt;code&gt;.me&lt;/code&gt; or &lt;code&gt;.io&lt;/code&gt;. Or maybe &lt;code&gt;aviska.se&lt;/code&gt;. But I went with simple aviskase.com. Not that I am particularly invested into &lt;span class="caps"&gt;SEO&lt;/span&gt; and stuff, but all the articles recommend to be boring. Also, I used &lt;em&gt;comparable products&lt;/em&gt; heuristic: most of the blogs I am subscribed to have the same dull &lt;span class="caps"&gt;TLD&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BTW&lt;/span&gt;, if anyone ever was subscribed to &lt;span class="caps"&gt;RSS&lt;/span&gt;, sorry for whole new regeneration&amp;nbsp;=(&lt;/p&gt;</content><category term="Other"></category><category term="writing"></category></entry><entry><title>SOAP Testing 101</title><link href="https://www.aviskase.com/articles/2019/09/15/soap-testing-101/" rel="alternate"></link><published>2019-09-15T00:00:00-04:00</published><updated>2019-09-15T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-15:/articles/2019/09/15/soap-testing-101/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; this is a translation of &lt;a class="external" href="https://quality-lab.ru/blog/soap-api-testing/"&gt;the article&lt;/a&gt; written 2 years ago for a corporate blog. I didn&amp;rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &amp;ldquo;official.&amp;rdquo; Also, some examples don&amp;rsquo;t make …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; this is a translation of &lt;a class="external" href="https://quality-lab.ru/blog/soap-api-testing/"&gt;the article&lt;/a&gt; written 2 years ago for a corporate blog. I didn&amp;rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &amp;ldquo;official.&amp;rdquo; Also, some examples don&amp;rsquo;t make sense in English. Still, I didn&amp;rsquo;t update it too radically. Bear in mind, at the moment of the writing I was testing &lt;span class="caps"&gt;SOAP&lt;/span&gt; services and Excel-based import/export at big government project, so most of the examples relate to that&amp;nbsp;experience.  &lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Sometimes you&amp;rsquo;ll see a block like that. It will contain my current thoughts on the subject or&amp;nbsp;comments.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt; (Simple Object Access Protocol) is a standardized protocol for communication between a server and a client. Typically, it&amp;rsquo;s used over &lt;span class="caps"&gt;HTTP&lt;/span&gt;(S), but it can operate over other application level protocols like &lt;span class="caps"&gt;SMTP&lt;/span&gt; or &lt;span class="caps"&gt;FTP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Testing &lt;span class="caps"&gt;SOAP&lt;/span&gt; services is not drastically different from any other &lt;span class="caps"&gt;API&lt;/span&gt; testing, but you need to learn some specifics and use better suited tools. This article will provide a small checklist of know-hows and skills which you can use as a guide for getting started and improving your&amp;nbsp;work.&lt;/p&gt;
&lt;h2&gt;Theory&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt; is a protocol, so you need to read about the protocol itself as well as standards and other protocols it uses and, when the time comes, about its&amp;nbsp;extensions.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; is a markup language similar to &lt;span class="caps"&gt;HTML&lt;/span&gt;. Every message sent via &lt;span class="caps"&gt;SOAP&lt;/span&gt; is a &lt;span class="caps"&gt;XML&lt;/span&gt;-document, where you can easily identify how data are&amp;nbsp;structured.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;note&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;to&amp;gt;&lt;/span&gt;aviskase&lt;span class="nt"&gt;&amp;lt;/to&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;from&amp;gt;&lt;/span&gt;universe&lt;span class="nt"&gt;&amp;lt;/from&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;heading&amp;gt;&lt;/span&gt;Reminder&lt;span class="nt"&gt;&amp;lt;/heading&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;Do not forget to translate the article!&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/note&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can read about &lt;span class="caps"&gt;XML&lt;/span&gt; in details on &lt;a class="external" href="https://www.w3schools.com/xml/default.asp"&gt;w3schools&lt;/a&gt;. Pay attention to &lt;a class="external" href="https://www.w3schools.com/xml/xml_namespaces.asp"&gt;namespaces&lt;/a&gt; (name conflict resolution method for &lt;span class="caps"&gt;XML&lt;/span&gt; elements), they are used in &lt;span class="caps"&gt;SOAP&lt;/span&gt; a&amp;nbsp;lot.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;XSD&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s quite handy to have standardized description of possible &lt;span class="caps"&gt;XML&lt;/span&gt;-documents and to be able to validate them. For that we use &lt;span class="caps"&gt;XML&lt;/span&gt; Schema Definition (or &lt;span class="caps"&gt;XSD&lt;/span&gt;). Two key &lt;span class="caps"&gt;XSD&lt;/span&gt; features for a tester are data type definitions and an ability to restrict possible values. For instance, element &lt;code&gt;body&lt;/code&gt; from the previous example can be set as optional and with a maximum string length of&amp;nbsp;255. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;xs:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;minOccurs=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;xs:simpleType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xs:restriction&lt;/span&gt; &lt;span class="na"&gt;base=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xs:string&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;xs:maxLength&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;255&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xs:restriction&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/xs:simpleType&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xs:element&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class="caps"&gt;XSD&lt;/span&gt; is awesome. The more detailed it is, the fewer dumb tests you need to do. Services can use &lt;span class="caps"&gt;XSD&lt;/span&gt; to automatically validate requests and respond with a proper error. Therefore, you don&amp;rsquo;t need to check all those equivalence classes and boundaries (as long as &lt;span class="caps"&gt;XSD&lt;/span&gt; is detailed and correct and this server-side validation is turned on). So, the first thing you should do for &lt;span class="caps"&gt;SOAP&lt;/span&gt; testing is to test its documentation, which is &lt;span class="caps"&gt;XSD&lt;/span&gt;. That way I found tons of issues like wrong restriction or accidental Cyrillic symbols in element&amp;nbsp;definitions.&lt;/p&gt;
&lt;p&gt;More info about &lt;span class="caps"&gt;XSD&lt;/span&gt; you can get on &lt;a class="external" href="https://www.w3schools.com/xml/schema_intro.asp"&gt;w3schools&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;WSDL&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="external" href="https://www.w3schools.com/xml/xml_wsdl.asp"&gt;&lt;span class="caps"&gt;WSDL&lt;/span&gt;&lt;/a&gt; is used for describing web services. &lt;span class="caps"&gt;WSDL&lt;/span&gt;-documents contain information about service location and available methods (operations); every operation has descriptions of request and response parameters. Sometimes &lt;span class="caps"&gt;XSD&lt;/span&gt; can be embedded inside &lt;span class="caps"&gt;WSDL&lt;/span&gt;, but that&amp;rsquo;s not always the case. &lt;span class="caps"&gt;WSDL&lt;/span&gt;-document is a bit of &lt;em&gt;magic.&lt;/em&gt; You can generate it from classes implementing the server and then use it to generate classes for a client. So don&amp;rsquo;t forget to check that &lt;span class="caps"&gt;WSDL&lt;/span&gt;-document is accurate and accessible to&amp;nbsp;users.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt; has two versions: 1.1 or 1.2. Novice tester might not bother about differences between them. Just make sure you know which version is used in your system (and sometimes it could be both). &lt;span class="caps"&gt;SOAP&lt;/span&gt; describes message formats and details for handling particular messages. For example, some header elements can be used in the services where messages are transferred between several intermediates before reaching a&amp;nbsp;destination.&lt;/p&gt;
&lt;p&gt;Here is a request example of operation &lt;code&gt;checkText&lt;/code&gt; from Yandex Speller &lt;span class="caps"&gt;API&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;soapenv:Envelope&lt;/span&gt; &lt;span class="na"&gt;xmlns:soapenv=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:spel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://speller.yandex.net/services/spellservice&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;soapenv:Header/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;soapenv:Body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;spel:CheckTextRequest&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;spel:text&amp;gt;&lt;/span&gt;mistace&lt;span class="nt"&gt;&amp;lt;/spel:text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/spel:CheckTextRequest&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/soapenv:Body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/soapenv:Envelope&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And&amp;nbsp;response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;soap:Envelope&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:soap=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.xmlsoap.org/soap/envelope/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;soap:Body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;CheckTextResponse&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://speller.yandex.net/services/spellservice&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;SpellResult&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;error&lt;/span&gt; &lt;span class="na"&gt;code=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;pos=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;row=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;col=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;len=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;word&amp;gt;&lt;/span&gt;mistace&lt;span class="nt"&gt;&amp;lt;/word&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;s&amp;gt;&lt;/span&gt;mistake&lt;span class="nt"&gt;&amp;lt;/s&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/error&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/SpellResult&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/CheckTextResponse&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/soap:Body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/soap:Envelope&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Read details about &lt;span class="caps"&gt;SOAP&lt;/span&gt; on &lt;a class="external" href="https://www.w3schools.com/xml/xml_soap.asp"&gt;w3schools&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt;&amp;nbsp;Extensions&lt;/h3&gt;
&lt;p&gt;Occasionally you&amp;rsquo;ll bump into &lt;span class="caps"&gt;SOAP&lt;/span&gt; extensions with names like &lt;code&gt;WS-&lt;/code&gt;. One of the most common is &lt;a class="external" href="https://en.wikipedia.org/wiki/WS-Security"&gt;&lt;span class="caps"&gt;WS&lt;/span&gt;-Security&lt;/a&gt; which is used for encryption and digital signatures. Often it&amp;rsquo;s combined with &lt;span class="caps"&gt;WS&lt;/span&gt;-Policy for managing service access&amp;nbsp;rights.&lt;/p&gt;
&lt;p&gt;Example of &lt;span class="caps"&gt;WS&lt;/span&gt;-Security&amp;nbsp;usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;wsse:UsernameToken&lt;/span&gt; &lt;span class="na"&gt;wsu:Id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uuid_faf0159a-6b13-4139-a6da-cb7b4100c10c&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;wsse:Username&amp;gt;&lt;/span&gt;Alice&lt;span class="nt"&gt;&amp;lt;/wsse:Username&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;wsse:Password&lt;/span&gt; &lt;span class="na"&gt;Type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;6S3P2EWNP3lQf+9VC3emNoT57oQ=&lt;span class="nt"&gt;&amp;lt;/wsse:Password&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;wsse:Nonce&lt;/span&gt; &lt;span class="na"&gt;EncodingType=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;YF6j8V/CAqi+1nRsGLRbuZhi&lt;span class="nt"&gt;&amp;lt;/wsse:Nonce&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;wsu:Created&amp;gt;&lt;/span&gt;2008-04-28T10:02:11Z&lt;span class="nt"&gt;&amp;lt;/wsu:Created&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/wsse:UsernameToken&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Extension can be complex and intimidating. You can skip learning about them in details if your service does not have&amp;nbsp;them.&lt;/p&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt; is a serious business: all this theory and standards. And XMLs tend to be &lt;em&gt;huge&lt;/em&gt;. You &lt;em&gt;can,&lt;/em&gt; but you &lt;em&gt;don&amp;rsquo;t want&lt;/em&gt; to use tools like notepad and cURL for daily work. But don&amp;rsquo;t worry, there are tools to make life easier with &lt;span class="caps"&gt;SOAP&lt;/span&gt;.  &lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;&amp;amp;&lt;span class="caps"&gt;XSD&lt;/span&gt;&amp;nbsp;Editors&lt;/h3&gt;
&lt;p&gt;As I said before, you need to start testing with documentation. For that you can use special editors. Two most common are &lt;a class="external" href="https://www.oxygenxml.com/"&gt;Oxygen&lt;/a&gt; (cross-platform) and &lt;a class="external" href="https://www.altova.com/"&gt;Altova&lt;/a&gt; (Windows-only); both are not free. These are feature-heavy applications used by&amp;nbsp;analysts.&lt;/p&gt;
&lt;p&gt;I routinely use three features: &lt;span class="caps"&gt;XSD&lt;/span&gt; visualization, &lt;span class="caps"&gt;XML&lt;/span&gt; generation, and &lt;span class="caps"&gt;XML&lt;/span&gt;&amp;nbsp;validation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;XSD&lt;/span&gt; visualization&lt;/strong&gt; is helpful to easily spot schema elements, attributes, and restrictions. For example, &lt;code&gt;CheckTextRequest&lt;/code&gt; has a required &lt;code&gt;text&lt;/code&gt; element, whereas all three attributes are optional. In addition, attribute &lt;code&gt;option&lt;/code&gt; has a default value &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="XSD visualization in Oxygen" src="https://www.aviskase.com/articles/2019/09/15/soap-testing-101/oxygen.png"&gt;&lt;/p&gt;
&lt;p&gt;Visualization is handy when there are lots of types and restrictions. If you need only this feature and you don&amp;rsquo;t want to buy apps, you can check
&lt;a class="external" href="http://stackoverflow.com/questions/2486758/how-to-visualize-an-xml-schema"&gt;free alternatives&lt;/a&gt; like&amp;nbsp;JDeveloper.&lt;/p&gt;
&lt;p&gt;You can use &lt;strong&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; generation&lt;/strong&gt; to quickly create examples of messages based on supplied &lt;span class="caps"&gt;XSD&lt;/span&gt;. I use is for exploration and experimentation on possible XMLs and checking how restrictions are&amp;nbsp;applied.&lt;/p&gt;
&lt;p&gt;After generating messages, you can perform &lt;strong&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; validation&lt;/strong&gt; on them. Together these two features allow you to find issues with a service even when it&amp;rsquo;s not yet&amp;nbsp;implemented.&lt;/p&gt;
&lt;h3&gt;Testing with&amp;nbsp;SoapUI&lt;/h3&gt;
&lt;p&gt;Testing &lt;span class="caps"&gt;SOAP&lt;/span&gt; services almost always means using &lt;a class="external" href="https://www.soapui.org/"&gt;SoapUI&lt;/a&gt;. You can read about it in &lt;a class="external" href="https://www.guru99.com/webservice-testing-beginner-guide.html"&gt;this tutorial&lt;/a&gt; or &lt;a class="external" href="https://www.soapui.org/getting-started.html"&gt;the official documentation&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve come up with eight possible levels of SoapUI&amp;nbsp;mastery.&lt;/p&gt;
&lt;h4&gt;Level 1: Sending&amp;nbsp;Requests&lt;/h4&gt;
&lt;p&gt;Learn how to create a project based on &lt;span class="caps"&gt;WSDL&lt;/span&gt;. SoapUI can generate all requests for you; all you need to do is to check their correctness and click a &amp;ldquo;Send&amp;rdquo; button. After getting used to send valid requests you&amp;rsquo;ll need to start creating invalid ones to get expected error&amp;nbsp;messages.&lt;/p&gt;
&lt;h4&gt;Level 2: Using &amp;ldquo;Test Suites&amp;rdquo; and &amp;ldquo;Test&amp;nbsp;Cases&amp;rdquo;&lt;/h4&gt;
&lt;p&gt;Start writing mini-autotests. Tests suites and test cases allow creating automation scenarios, prepare test data, and automatically assert responses. At first you can use them simply for organization. For example, if you filed an issue, you&amp;rsquo;d want to quickly check its fix and for that you can have a separate test suite with requests specific to each&amp;nbsp;issue.&lt;/p&gt;
&lt;h4&gt;Level 3: Writing&amp;nbsp;Assertions&lt;/h4&gt;
&lt;p&gt;After using cases for some time, you&amp;rsquo;ll want to make them automatically asserted to mark valid responses as green and invalid ones as red. SoapUI has lots of assertion types, but the simplest ones are &lt;code&gt;Contains&lt;/code&gt; and &lt;code&gt;Not Contains&lt;/code&gt; which you can use to check existence of some string in the response. These assertions also support regular&amp;nbsp;expressions.&lt;/p&gt;
&lt;h4&gt;Level 4: Using XPath and/or XQuery in&amp;nbsp;Assertions&lt;/h4&gt;
&lt;p&gt;&lt;a class="external" href="https://www.w3schools.com/xml/xpath_intro.asp"&gt;XPath&lt;/a&gt; is a familiar thing for those who work on &lt;span class="caps"&gt;UI&lt;/span&gt; automation with Selenium.  In short, XPath is used to search for elements inside &lt;span class="caps"&gt;XML&lt;/span&gt;-document. &lt;a class="external" href="https://www.w3schools.com/xml/xquery_intro.asp"&gt;XQuery&lt;/a&gt; is a similar technology which can use XPath &amp;ldquo;inside&amp;rdquo;; this language is way more powerful and &lt;span class="caps"&gt;SQL&lt;/span&gt;-like. Both can be used in assertions and will make checks more robust and&amp;nbsp;precise.&lt;/p&gt;
&lt;h4&gt;Level 5: Writing Complex Checks with Special&amp;nbsp;Steps&lt;/h4&gt;
&lt;p&gt;Test cases can contain several requests and other special steps, which can form a user flow (for example, a scenario &amp;ldquo;create entity → export entity&amp;rdquo;). Some of those steps&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Properties&lt;/code&gt; and &lt;code&gt;Property Transfer&lt;/code&gt; (help to reuse data and transfer it  between&amp;nbsp;requests)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDBC Request&lt;/code&gt; (used for getting data from&amp;nbsp;databases)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Conditional Goto&lt;/code&gt; (allows to create conditions and&amp;nbsp;loops)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Run TestCase&lt;/code&gt; (help to reuse common test&amp;nbsp;cases)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Level 6: Using Groovy&amp;nbsp;Scripts&lt;/h4&gt;
&lt;p&gt;SoapUI supports writing scripts in Groovy language. The simplest idea is to generate data embedding Groovy via &lt;code&gt;${=}&lt;/code&gt; inside a request body. For&amp;nbsp;example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Insert current date and time: &lt;code&gt;${=new Date().format("yyyy-MM-dd'T'HH:mm:ss")}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Insert a random &lt;span class="caps"&gt;GUID&lt;/span&gt;: &lt;code&gt;${=java.util.UUID.randomUUID()}&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More complex scripts can be used in separate steps and assertions.  At some point you&amp;rsquo;ll notice you tend to write everything inside script step instead of steps from level&amp;nbsp;5.&lt;/p&gt;
&lt;h4&gt;Level 7: Using&amp;nbsp;MockServices&lt;/h4&gt;
&lt;p&gt;SoapUI can generate mock objects based on &lt;span class="caps"&gt;WSDL&lt;/span&gt;. It&amp;rsquo;s a crude service simulation which you can use to write and debug test cases before they are actually available for testing. Also, you can use them in place of temporarily down&amp;nbsp;services.&lt;/p&gt;
&lt;h4&gt;Level 8:&amp;nbsp;God-Mode&lt;/h4&gt;
&lt;p&gt;You recognize differences between free and pro versions of SoapUI. You use SoapUI as a library from code. You use plugins and run test cases via &lt;span class="caps"&gt;CLI&lt;/span&gt; and/or &lt;span class="caps"&gt;CI&lt;/span&gt;. Your tests cases are elegant and easy to support. You know all the angles! I envy&amp;nbsp;you.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Or not. Presently I don&amp;rsquo;t use any &lt;span class="caps"&gt;GUI&lt;/span&gt; tools for &lt;span class="caps"&gt;API&lt;/span&gt; testing except for exploratory&amp;nbsp;sessions.  &lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Testing with&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;At some point you&amp;rsquo;ll have a feeling that it&amp;rsquo;s more efficient to use programming languages for writing tests. That&amp;rsquo;s fine. SoapUI is a &lt;span class="caps"&gt;GUI&lt;/span&gt; application and has its drawbacks; some of them are resolved with pro version, while others require huge and brittle scripting&amp;nbsp;hacks. &lt;/p&gt;
&lt;p&gt;There are tons of libraries for working with &lt;span class="caps"&gt;SOAP&lt;/span&gt; in any language. For example, there are &lt;a class="external" href="http://axis.apache.org/axis2/java/core/"&gt;Axis2&lt;/a&gt; for Java (good examples are in the articles at &lt;a class="external" href="https://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html"&gt;&lt;span class="caps"&gt;IBM&lt;/span&gt; developerWorks&lt;/a&gt;), &lt;a class="external" href="https://bitbucket.org/jurko/suds/"&gt;suds&lt;/a&gt; or &lt;a class="external" href="http://docs.python-zeep.org/en/latest/"&gt;zeep&lt;/a&gt; for Python, or &lt;a class="external" href="https://github.com/jwagenleitner/groovy-wslite"&gt;groovy-wslite&lt;/a&gt; for&amp;nbsp;Groovy.&lt;/p&gt;
&lt;p&gt;Here is an example of request made to YandexSpeller &lt;span class="caps"&gt;API&lt;/span&gt; using&amp;nbsp;groovy-wslite:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wslite.soap.*&lt;/span&gt;
&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SOAPClient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://speller.yandex.net/services/spellservice?WSDL&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;SOAPAction:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://speller.yandex.net/services/spellservice/checkText&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CheckTextRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lang&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xmlns&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://speller.yandex.net/services/spellservice&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mistace&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mistake&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CheckTextResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SpellResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CheckTextResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SpellResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nd"&gt;@code.text&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As far as I know there are no high-level test frameworks for &lt;span class="caps"&gt;SOAP&lt;/span&gt; (similar to Rest-assured), but there is an interesting framework called &lt;a class="external" href="https://github.com/intuit/karate"&gt;karate&lt;/a&gt; where you can describe test cases for &lt;span class="caps"&gt;SOAP&lt;/span&gt; and &lt;span class="caps"&gt;REST&lt;/span&gt; in Cucumber / Gherkin&amp;nbsp;style.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t do any Groovy programming anymore, so no idea how groovy-wslite fares. In fact, I don&amp;rsquo;t do &lt;span class="caps"&gt;SOAP&lt;/span&gt; testing now, so my knowledge about libraries can be&amp;nbsp;outdated.&lt;/p&gt;
&lt;p&gt;Plus, I avoid anything cucumber-ish&amp;nbsp;=) &lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;I doubt anyone will go and test &lt;span class="caps"&gt;SOAP&lt;/span&gt; services in their free time just of curiosity. It&amp;rsquo;s a heavy protocol used in serious corporate systems. But its heaviness is a good news for testing: all technologies are standardized and there is a vast ecosystem around&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;So, here is a promised checklist. If you are only starting to test &lt;span class="caps"&gt;SOAP&lt;/span&gt; services, you need to learn and be able to&amp;nbsp;use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;XSD&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;WSDL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;&amp;amp;&lt;span class="caps"&gt;XSD&lt;/span&gt; editors for &lt;span class="caps"&gt;XSD&lt;/span&gt;&amp;nbsp;visualization&lt;/li&gt;
&lt;li&gt;SoapUI level&amp;nbsp;1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, just standards and being able to send requests, nothing more. That&amp;rsquo;s it. Of course, you&amp;rsquo;ll unavoidably learn more with time, but don&amp;rsquo;t deep dive right away or your head will explode&amp;nbsp;=)&lt;/p&gt;</content><category term="Testing"></category><category term="api"></category></entry><entry><title>Using Google Apps Scripts for Productivity Improvements</title><link href="https://www.aviskase.com/articles/2019/09/08/using-google-apps-scripts-for-productivity-improvements/" rel="alternate"></link><published>2019-09-08T00:00:00-04:00</published><updated>2019-09-08T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-08:/articles/2019/09/08/using-google-apps-scripts-for-productivity-improvements/</id><summary type="html">&lt;p&gt;Google Apps Scripts are probably the most useful automation tools I&amp;rsquo;ve used. They can be used as &amp;ldquo;excel macros&amp;rdquo; for Sheets, form processing, and much more. Here I want to share three small scripts I made to improve productivity and task&amp;nbsp;management.&lt;/p&gt;
&lt;h2&gt;Mark All Emails as&amp;nbsp;Read&lt;/h2&gt;
&lt;p&gt;If you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Google Apps Scripts are probably the most useful automation tools I&amp;rsquo;ve used. They can be used as &amp;ldquo;excel macros&amp;rdquo; for Sheets, form processing, and much more. Here I want to share three small scripts I made to improve productivity and task&amp;nbsp;management.&lt;/p&gt;
&lt;h2&gt;Mark All Emails as&amp;nbsp;Read&lt;/h2&gt;
&lt;p&gt;If you ever got bothered by all archived and still unread emails in Gmail, this script can help you. It is based on &lt;a class="external" href="https://critter.blog/2013/03/09/marking-gmail-read-with-apps-script/"&gt;the script by Mike Crittenden&lt;/a&gt;. &lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/634dba0b10f5cd0bad3f41709ed3e41c.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;function markArchivedAsRead() {
  var threads = GmailApp.search('label:unread -label:{inbox, Unsnoozed}');
  for (var i=0; i&lt;threads.length; i++)
  {
    var messages = threads[i].getMessages();
    var markUnread = 1;
    for (var j=0; j&lt;messages.length; j++)
    {
      if (messages[j].isInInbox())
        markUnread = 0;
    }
    if (markUnread)
      threads[i].markRead();
  }
};&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;I don&amp;rsquo;t really need it right now, because I have a filter which marks &lt;em&gt;all&lt;/em&gt; incoming emails as read right&amp;nbsp;away:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Matches: larger:1
Do this: Mark as read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But it was effective for cleaning&amp;nbsp;up.&lt;/p&gt;
&lt;h2&gt;Tasks Recurring Randomly for Amazing&amp;nbsp;Marvin&lt;/h2&gt;
&lt;p&gt;I use Amazing Marvin for task&amp;amp;project management and currently it doesn&amp;rsquo;t support randomly recurring items. In fact, no app I&amp;rsquo;ve tried supports that. It&amp;rsquo;s a shame, because there could be several use cases for that: &amp;ldquo;spontaneous&amp;rdquo; cleaning&amp;amp;organizing, fun activities, ideas&amp;nbsp;review.&lt;/p&gt;
&lt;p&gt;If you are able to import tasks (for example, via email), you can check this script. The most important thing is a &lt;code&gt;TASKS&lt;/code&gt; list. Each item should have &lt;code&gt;range_start&lt;/code&gt; and &lt;code&gt;range_end&lt;/code&gt;. For example, &lt;code&gt;range_start = 2&lt;/code&gt; and &lt;code&gt;range_end = 9&lt;/code&gt; mean that task will be created in ranges from two to nine days after last created date. E.g. if the last time task with this &lt;code&gt;id&lt;/code&gt; was created on September 10, next task will be created sometime between September 12 and September&amp;nbsp;19. &lt;/p&gt;
&lt;p&gt;Script ensures the task will be created at some point during this range, just make sure it&amp;rsquo;s triggered to run&amp;nbsp;daily.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/c986a50fd0d2a24f98302201fcdc9fd7.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;// Trigger for this script should be run DAILY

var TARGET_EMAIL = '&lt;AMAZING MARVIN IMPORT EMAIL&gt;'; 

var MILLIS_PER_DAY = 1000 * 60 * 60 * 24;

var TASKS = [
  { // Task will be created in ranges from 5 to 10 after last created date. E.g. if last created = May 10, next task will be created between May 15 and May 20 
    id: '&lt;TASK ID&gt;',
    range_start: 5,
    range_end: 10,
    subject: '&lt;TASK NAME&gt;',
    body: '&lt;TASK NOTE&gt;'
  }
];

function getNow() {
  return new Date(date_to_str(new Date()));
}

function date_to_str(date) {
  var timeZone = Session.getScriptTimeZone();
  return Utilities.formatDate(date, timeZone, 'MMMM dd, yyyy 12:00:00 Z');
}



function createTask(task, props) {
  var last_run = props.getProperty(task['id']);
  var now = getNow();
  
  if(!last_run) {
    Logger.log('First run for task with id = %s ', task['id']);
    var offset = Math.floor((task['range_start'] + task['range_end']) / 2);
    last_run = new Date(now - offset * MILLIS_PER_DAY);
    Logger.log('Set last run to = %s', date_to_str(last_run));
    props.setProperty(task['id'], date_to_str(last_run));
  } else {
    last_run = new Date(last_run);
  }
  var range_start = new Date(last_run.getTime() + task['range_start'] * MILLIS_PER_DAY);
  var range_end = new Date(last_run.getTime() + task['range_end'] * MILLIS_PER_DAY);
  var should_be_created = now &gt;= range_end || (now &gt;= range_start &amp;&amp; Math.random() &gt;= 0.5)
  if(should_be_created) { 
    Logger.log('Task with id = %s was created', task['id']);
    GmailApp.sendEmail(TARGET_EMAIL, task['subject'], task['body']);
    props.setProperty(task['id'], date_to_str(now))
  }
}


function run() {
  var props = PropertiesService.getScriptProperties();

  TASKS.forEach(function(task) {
    createTask(task, props);
  });
}&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;h2&gt;Create a Task When New Package Release Is Available on&amp;nbsp;PyPI&lt;/h2&gt;
&lt;p&gt;I have a weird project which can start only after a particular release of one python package. It&amp;rsquo;s not very urgent, so no hurry, but I don&amp;rsquo;t want to check for releases&amp;nbsp;manually. &lt;/p&gt;
&lt;p&gt;This script checks &lt;span class="caps"&gt;RSS&lt;/span&gt; for the package on &lt;a class="external" href="https://libraries.io/"&gt;libraries.io&lt;/a&gt; and if there is a new version available, it will send email to &lt;span class="caps"&gt;AM&lt;/span&gt; to create a&amp;nbsp;task.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/079fda60adaa0c74e37c84089e4bb1ae.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;var TARGET_EMAIL = '&lt;AMAZING_MARVIN_IMPORT_EMAIL&gt;'; 
var LIBRARY_NAME = '&lt;SOME_LIBRARY&gt;'
var URL_LIBRARIES_IO = 'https://libraries.io/pypi/LIBRARY_NAME/versions.atom'
var CATEGORY_OR_PROJECT = '&lt;CATEGORY OR PROJECT IN AMAZING MARVIN&gt;'

function parseXml() {
  var props = PropertiesService.getScriptProperties();
  var xml = UrlFetchApp.fetch(URL_LIBRARIES_IO).getContentText();
  var document = XmlService.parse(xml);
  var root = document.getRootElement();
  var atom = XmlService.getNamespace('http://www.w3.org/2005/Atom');

  var entries = document.getRootElement().getChildren('entry', atom);
  for (var i = 0; i &lt; entries.length; i++) {
    var title = entries[i].getChild('title', atom).getText();
    var prop_title = props.getProperty(title);
    if(!prop_title) {
      Logger.log('New version found %s', title);
      var link = entries[i].getChild('link', atom).getAttribute('href').getValue();
      props.setProperty(title, '1')
      sendEmail(title, link);
    }
  }
}

function sendEmail(title, link) {
  var subject = Utilities.formatString('New version [%s %s](%s)  #"%s" +today', LIBRARY_NAME, title, link, CATEGORY_OR_PROJECT);
  GmailApp.sendEmail(TARGET_EMAIL, subject, '');
}&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;I didn&amp;rsquo;t go into details about how to setup these scripts, so if you have any questions, feel free to&amp;nbsp;comment.&lt;/p&gt;</content><category term="Productivity"></category><category term="practical"></category></entry><entry><title>Stereotype Rant</title><link href="https://www.aviskase.com/articles/2019/09/04/stereotype-rant/" rel="alternate"></link><published>2019-09-04T00:00:00-04:00</published><updated>2019-09-04T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-04:/articles/2019/09/04/stereotype-rant/</id><summary type="html">&lt;p&gt;We live in the world of memes and funny pictures. Nothing wrong with that. Some companies started posting humorous content too, and, again, that&amp;rsquo;s totally fine: I myself prefer these to dry corporate pitches. But it&amp;rsquo;s a real shame when you see a post like this from a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We live in the world of memes and funny pictures. Nothing wrong with that. Some companies started posting humorous content too, and, again, that&amp;rsquo;s totally fine: I myself prefer these to dry corporate pitches. But it&amp;rsquo;s a real shame when you see a post like this from a test&amp;nbsp;agency: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What makes you feel more&amp;nbsp;powerful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Money&lt;/li&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Finding bugs in other people&amp;rsquo;s&amp;nbsp;code&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;It would be dishonest to say I would never find this joke amusing. I did. Probably first half a year of being a tester, less or more. And I still hear that &amp;ldquo;achievement unlocked ding&amp;rdquo; in my head when I find some peculiar or very critical&amp;nbsp;issue. &lt;/p&gt;
&lt;p&gt;But I most certainly don&amp;rsquo;t feel &lt;em&gt;powerful.&lt;/em&gt; Experience with software development comes with a grain of salt and a certain sadness. Each bug you discover&amp;nbsp;means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there are even more unknown problems lurking&amp;nbsp;somewhere&lt;/li&gt;
&lt;li&gt;you have to bother about code correctness instead of thinking about the&amp;nbsp;value&lt;/li&gt;
&lt;li&gt;processes are leaky and if I&amp;rsquo;m not in position to have any impact on them I&amp;rsquo;d probably feel &lt;em&gt;powerless&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, sorry, but no, that post won&amp;rsquo;t receive a &amp;ldquo;like&amp;rdquo; from me. And I&amp;rsquo;m quite angry and sad seeing such posts coming from test agency, company that shouldn&amp;rsquo;t be promoting stereotypes about testers as those guys who are happy to &amp;ldquo;break stuff&amp;rdquo; and are always &amp;ldquo;at war with devs.&amp;rdquo; C&amp;rsquo;mon! In the case of this particular company, I understand that it&amp;rsquo;s most probably marketing shit which wasn&amp;rsquo;t approved by actual testers working there. But often it happens that we, testers, either don&amp;rsquo;t care or not vocal enough about pointing out these harmful mistakes to juniors and non-dev&amp;nbsp;people.&lt;/p&gt;</content><category term="Testing"></category><category term="thoughts"></category></entry><entry><title>Your API Is Your Public Image</title><link href="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/" rel="alternate"></link><published>2019-09-02T00:00:00-04:00</published><updated>2019-09-02T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-09-02:/articles/2019/09/02/your-api-is-your-public-image/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; this is a translation of &lt;a class="external" href="https://quality-lab.ru/blog/your-api-is-your-public-face/"&gt;the article&lt;/a&gt; written 2 years ago for a corporate blog. I didn&amp;rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &amp;ldquo;official.&amp;rdquo; Also, some examples don&amp;rsquo;t make …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; this is a translation of &lt;a class="external" href="https://quality-lab.ru/blog/your-api-is-your-public-face/"&gt;the article&lt;/a&gt; written 2 years ago for a corporate blog. I didn&amp;rsquo;t do a word-for-word translation because the original article went through an editor, whose style was not that close to mine. Too watered down and &amp;ldquo;official.&amp;rdquo; Also, some examples don&amp;rsquo;t make sense in English. Still, I didn&amp;rsquo;t update it too radically. Bear in mind, at the moment of the writing I was testing &lt;span class="caps"&gt;SOAP&lt;/span&gt; services and Excel-based import/export at big government project, so most of the examples relate to that&amp;nbsp;experience.  &lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Sometimes you&amp;rsquo;ll see a block like that. It will contain my current thoughts on the subject or&amp;nbsp;comments.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;First, what is &lt;span class="caps"&gt;API&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;API&lt;/span&gt; (Application Programming Interface)&lt;/strong&gt; is an interface which helps apps to communicate with each other. Just as a human interacts with apps via buttons and dialogs (user interface, &lt;span class="caps"&gt;UI&lt;/span&gt;), so apps interact via&amp;nbsp;APIs.&lt;/p&gt;
&lt;h2&gt;Types of &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;One way to define &lt;span class="caps"&gt;API&lt;/span&gt; types is whether it&amp;rsquo;s public or private &lt;span class="caps"&gt;API&lt;/span&gt;. &lt;strong&gt;Private&lt;/strong&gt; &lt;span class="caps"&gt;API&lt;/span&gt; is used for interactions inside your system, for&amp;nbsp;example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sync between mobile or desktop app and a&amp;nbsp;server&lt;/li&gt;
&lt;li&gt;app uses server&amp;rsquo;s computational resources (e.g., an image stylization app sends image and selected style to the server, where stylization will be&amp;nbsp;done)&lt;/li&gt;
&lt;li&gt;communications between a web app and&amp;nbsp;server&lt;/li&gt;
&lt;li&gt;communications between&amp;nbsp;micro-services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Primary risks for private APIs are functional and performance problems. Here, customers can only speculate why app works somehow&amp;nbsp;wrong-y.&lt;/p&gt;
&lt;p&gt;With &lt;strong&gt;public&lt;/strong&gt; &lt;span class="caps"&gt;API&lt;/span&gt; communication endpoints go beyond your system boundaries. Either you use someone&amp;rsquo;s &lt;span class="caps"&gt;API&lt;/span&gt; (social networks, maps, etc.) or you provide your &lt;span class="caps"&gt;API&lt;/span&gt; to external&amp;nbsp;developers.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk about public APIs a bit more. For some companies providing APIs is the core business (e.g., payment processing: Stripe, Rebilly), for others it&amp;rsquo;s just a nice to have addition to the main services. Whatever the case, public APIs open a perspective into how your internal development process works. And you won&amp;rsquo;t be able to hide behind fancy &lt;span class="caps"&gt;UI&lt;/span&gt; and eloquent support&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;If you publish public &lt;span class="caps"&gt;API&lt;/span&gt; with bad documentation, versioning mess, and tons of functional issues, make no mistake, external developer can (and maybe should!) assume that all your system is developed is such manner. Will they build their services around &lt;em&gt;such&lt;/em&gt; system and attract new users? Nope. Will they persuade their bosses and friends against using and/or buying your product? Probably. Don&amp;rsquo;t forget that people who are not so tech-y value developers&amp;rsquo; opinions a lot. And of course, those developers could also give your a bad reputation by complaining on social networks or forums. Therefore, before publishing even the tiniest &lt;span class="caps"&gt;API&lt;/span&gt;, you should think about its&amp;nbsp;quality.&lt;/p&gt;
&lt;h2&gt;Four Ways to Fuck up a Public &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;There are different techniques for assessing &lt;span class="caps"&gt;API&lt;/span&gt; quality (for example, &lt;a class="external" href="http://apiux.com/2013/05/29/api-hierarchy-needs/"&gt;hierarchy of needs&lt;/a&gt;). Let&amp;rsquo;s talk about four main ways to be an awful &lt;span class="caps"&gt;API&lt;/span&gt;:&lt;/p&gt;
&lt;h3&gt;Broken&amp;nbsp;Functionality&lt;/h3&gt;
&lt;p&gt;Sounds banal, but a service should work. And it should provide functionality it was created for. On one of my projects, there was an embarrassing situation with an export. We tested &lt;span class="caps"&gt;API&lt;/span&gt; with different objects under various conditions, but only with the small number of objects. All was fine until we found a bug on export with lots of data. The thing is that the key purpose for this service was to provide an ability to do massive exports, therefore, the service didn&amp;rsquo;t fulfill its main reason for&amp;nbsp;existence.&lt;/p&gt;
&lt;p&gt;You need to check available operations in context of other operations. For example, we released an import operation for objects A. It required an id of object B in the request body, but import and export of B was unreleased at the moment. As the result, it was impossible to do import A at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Other possible problem: do you consider a region where &lt;span class="caps"&gt;API&lt;/span&gt; will be used? Obviously, support for Cyrillic is not that important for purely &lt;span class="caps"&gt;US&lt;/span&gt; oriented product. But if you work globally, do not forget to check non-&lt;span class="caps"&gt;ASCII&lt;/span&gt; characters! Even though Unicode seems to be default, I did find bugs like that one: a user uploaded a file with the name &lt;code&gt;Документ_1.pdf&lt;/code&gt;, yet it was saved as &lt;code&gt;_1.pdf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One more example. We had a service for chunked file download which &amp;ldquo;ate&amp;rdquo; last byte of the last chunk. It was highly critical problem because this service was a part of the system where these files were used as supporting documents for legal&amp;nbsp;agreements.&lt;/p&gt;
&lt;h3&gt;Unreliability&lt;/h3&gt;
&lt;p&gt;Service is reliable if it works when it&amp;rsquo;s expected to be working and provides timely feedback in case of any&amp;nbsp;problems. &lt;/p&gt;
&lt;p&gt;Worst performance problems I encountered were with export services. One of them was working perfectly fine until the biggest organization in the system started using it and crashing application servers. Hot-fixes after hot-fixes, optimizations, new version; nothing helped. And we couldn&amp;rsquo;t disable that service or completely rewrite its public &lt;span class="caps"&gt;API&lt;/span&gt; because of contractual&amp;nbsp;obligations.&lt;/p&gt;
&lt;p&gt;So, what if your service experiences problems? How external users will learn about it? Will there be any alert about temporary issues or downtimes? Any resolution time frames? Usually, there is a special web page with answers to these question, with a table like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="API status table" src="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/api_status.png"&gt;&lt;/p&gt;
&lt;p&gt;And beware, this page should not on the same infrastructure as the services it&amp;rsquo;s showing! It would be quite embarrassing if &lt;a class="external" href="https://twitter.com/awscloud/status/836656664635846656"&gt;it goes down at the same time your services go down&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Crappy&amp;nbsp;Usability&lt;/h3&gt;
&lt;p&gt;When we hear the word &amp;ldquo;usability&amp;rdquo;, we usually think about &lt;span class="caps"&gt;GUI&lt;/span&gt;: buttons and dialogs. I think &lt;span class="caps"&gt;GUI&lt;/span&gt; usability is somewhat overrated: even in the ugliest app you can guess your way by trial and error. With &lt;span class="caps"&gt;API&lt;/span&gt; it won&amp;rsquo;t&amp;nbsp;work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No public documentation? Users will never even know that &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;exists.&lt;/li&gt;
&lt;li&gt;Public documentation is there, but there is no info about actual endpoints? Users won&amp;rsquo;t be able to call &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Public documentation is there, but written in such manner that without knowing internal docs you can&amp;rsquo;t understand a thing? Again, users won&amp;rsquo;t be happy at&amp;nbsp;all.&lt;/li&gt;
&lt;li&gt;Spelling mistakes? Not that critical if in text, but can be quite awful in schemes. Real support&amp;nbsp;ticket:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Your developers drink too much and it impairs their accuracy. There is an epic fail in a scheme with the name of the element &lt;code&gt;Pressure&lt;/code&gt;: the first letter is a Cyrillic character and it breaks all client code&amp;nbsp;generation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Cyrillic &lt;code&gt;Р/р&lt;/code&gt;  (pronounced like &amp;ldquo;r&amp;rdquo;) looks exactly like Latin &lt;code&gt;P/p&lt;/code&gt;. &lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Service works fine, but error messages are not that informative? Users won&amp;rsquo;t understand how to fix an error (and probably will open a support ticket, so you&amp;rsquo;ll needlessly spend time resolving non-existing&amp;nbsp;issue).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Unhelpful error message" src="https://www.aviskase.com/articles/2019/09/02/your-api-is-your-public-image/bad_error_message.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You have &lt;span class="caps"&gt;UI&lt;/span&gt; and &lt;span class="caps"&gt;API&lt;/span&gt;? Don&amp;rsquo;t forget to check they correspond to each other. The most common problem is when constraints on &lt;span class="caps"&gt;UI&lt;/span&gt; fields don&amp;rsquo;t match same fields in &lt;span class="caps"&gt;API&lt;/span&gt;: for example, &lt;span class="caps"&gt;UI&lt;/span&gt; can accept maximum 50 characters for the name and &lt;span class="caps"&gt;API&lt;/span&gt; only 20, which leads to errors when trying to export anything created on &lt;span class="caps"&gt;UI&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t forget about versionning (in &lt;span class="caps"&gt;API&lt;/span&gt; and its documentation). The older your services are, more careful you should be with incompatible changes. Documentation should always be up-to-date: sounds obvious, but we had a big fuck up when someone accidentally published documentation for upcoming &lt;span class="caps"&gt;API&lt;/span&gt; version and external developers started trying to use these new features, didn&amp;rsquo;t find them, and bombed support team with &amp;ldquo;nothing works again&amp;rdquo;&amp;nbsp;tickets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Security&amp;nbsp;Holes&lt;/h3&gt;
&lt;p&gt;When you publish &lt;span class="caps"&gt;API&lt;/span&gt; you also increase a potential attack surface for hackers. First of all, think about authorization and authentication processes. Typically, there are special access tokens for &lt;span class="caps"&gt;API&lt;/span&gt; users. Maybe simple developers&amp;rsquo; tokens will be enough for your case, maybe you&amp;rsquo;ll need to use flows like OAuth. In some cases you should sign requests and&amp;nbsp;responses.&lt;/p&gt;
&lt;p&gt;Oftentimes there are several APIs: for example, test &lt;span class="caps"&gt;API&lt;/span&gt; (for internal developers and testers) and open public &lt;span class="caps"&gt;API&lt;/span&gt;. You should make sure that test &lt;span class="caps"&gt;API&lt;/span&gt; is secured enough. There are known cases when web crawlers accidentally found test endpoints and happily showed them in search&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;If you provide access to test &lt;span class="caps"&gt;API&lt;/span&gt; to external developers, you&amp;rsquo;d better treat this &lt;span class="caps"&gt;API&lt;/span&gt; as high security risk. One time I found a stackoverflow question with code snippet containing authorization keys and proper endpoints for our&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;One open source project I used had a different issue. Test &lt;span class="caps"&gt;API&lt;/span&gt; was used by developers to help with testing: add money to the account, change account status to premium, etc. It was hidden and secure&amp;hellip; Until someone released a version with these APIs enabled in production. That&amp;rsquo;s bad&amp;nbsp;:)&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After reading all of these, you&amp;rsquo;d think that public APIs are too risky, challenging, and expensive. Perhaps, it&amp;rsquo;s better not to provide it? Maybe. But global connectivity is a trend. Stable and useful &lt;span class="caps"&gt;API&lt;/span&gt; can facilitate your profits: it can increase your user base via external apps or advertise your workplace to professionals. It&amp;rsquo;s a demanding work, but it pays&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;And even if you don&amp;rsquo;t and won&amp;rsquo;t have public &lt;span class="caps"&gt;API&lt;/span&gt;, think about your private ones. We should care about your own developers, shouldn&amp;rsquo;t&amp;nbsp;we? &lt;/p&gt;</content><category term="Testing"></category><category term="api"></category></entry><entry><title>Revision: Testers in This World</title><link href="https://www.aviskase.com/articles/2019/08/26/revision-testers-in-this-world/" rel="alternate"></link><published>2019-08-26T00:00:00-04:00</published><updated>2019-09-17T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-08-26:/articles/2019/08/26/revision-testers-in-this-world/</id><summary type="html">&lt;p&gt;Recently I&amp;rsquo;ve remembered &lt;a class="internal" href="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/"&gt;my old article&lt;/a&gt; and wondered, how much my thoughts  have changed and how they align to the principles of context-driven and modern testing (and yes, I don&amp;rsquo;t see them as contradicting each&amp;nbsp;other).&lt;/p&gt;
&lt;div class="admonition update"&gt;
&lt;p&gt;Remark is the parentheses is a bit stupid. It was discussed in …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Recently I&amp;rsquo;ve remembered &lt;a class="internal" href="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/"&gt;my old article&lt;/a&gt; and wondered, how much my thoughts  have changed and how they align to the principles of context-driven and modern testing (and yes, I don&amp;rsquo;t see them as contradicting each&amp;nbsp;other).&lt;/p&gt;
&lt;div class="admonition update"&gt;
&lt;p&gt;Remark is the parentheses is a bit stupid. It was discussed in the &lt;a class="external" href="https://www.angryweasel.com/ABTesting/ab-testing-episode-94-modern-testing-meets-context-driven-testing/"&gt;&lt;span class="caps"&gt;AB&lt;/span&gt; Testing episode 94&lt;/a&gt; and at least for Alan and Brent there is no real&amp;nbsp;contradiction.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It looks like there are two main themes in that&amp;nbsp;article.&lt;/p&gt;
&lt;h2&gt;Theme One: Finding a Job as a&amp;nbsp;Tester&lt;/h2&gt;
&lt;p&gt;A bit of a background: when I was writing that piece, I was in depression. That&amp;rsquo;s a different story about development culture and its effect on one&amp;rsquo;s mind, but I&amp;rsquo;ll write about it sometime later. So, depression. And a bit of worrying about getting the first job locally in&amp;nbsp;Canada.&lt;/p&gt;
&lt;p&gt;No wonder that rereading the article now feel like the main takeaway was &amp;ldquo;software development is a shitty business, whatever progress will be made, there will be still more than enough companies to hire testers.&amp;rdquo; And I won&amp;rsquo;t argue &lt;em&gt;the last part.&lt;/em&gt; Modern testing principles are things to strive for, but my experience so far tells me that it&amp;rsquo;s too optimistic to assume that &lt;em&gt;all&lt;/em&gt; companies will end up there. So, there will be enough companies who will lag behind. Ergo, there will be enough positions for &lt;em&gt;any&lt;/em&gt; testers. Even for mindless test case&amp;nbsp;executors. &lt;/p&gt;
&lt;p&gt;Now, the question is, do I &lt;em&gt;want&lt;/em&gt; to work in such companies? &lt;strong&gt;No.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If I would want to continue as a tester-generalist, without specializing in some future-proof niches like pentest or perftest (at least, they seem to be future-proof), a sweet spot would be companies closer on a way to the &amp;ldquo;tester-less&amp;rdquo; transformation, but still needing some help on that way. Will there be enough such companies? Probably, yes. Getting position will be definitely harder but not&amp;nbsp;impossible.&lt;/p&gt;
&lt;h2&gt;Theme Two: Clay&amp;nbsp;Metaphor&lt;/h2&gt;
&lt;p&gt;Nowadays I agree even more with the metaphor I came up with in that article. Yes, we are a clay or a sealing foam. We, testers, should help others in improving quality. That means that our work is immensely context-dependent: different organizations need different &amp;ldquo;holes&amp;rdquo; to&amp;nbsp;seal. &lt;/p&gt;
&lt;p&gt;But we can go on even further with this metaphor: make it&amp;rsquo;s not just a clay, but a sci-fi fancy-shmancy clay which heals holes and scabs when applied. Yup, that means that after some time we won&amp;rsquo;t be needed in this organization; that&amp;rsquo;s fine. You can move to some other position where your experience being adaptable and generalizing could be of assistance. Or you can find other organization and kill testing position there&amp;nbsp;too. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;As a result, while some wording was off, core principles still sound ok to me: adapt, help&amp;amp;heal, move&amp;nbsp;on.&lt;/p&gt;</content><category term="Testing"></category><category term="thoughts"></category></entry><entry><title>Lasha Tumbai or rm -rf RU</title><link href="https://www.aviskase.com/articles/2019/08/08/lasha-tumbai-or-rm-rf-ru/" rel="alternate"></link><published>2019-08-08T23:51:52-04:00</published><updated>2019-08-08T23:51:52-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-08-08:/articles/2019/08/08/lasha-tumbai-or-rm-rf-ru/</id><summary type="html">&lt;p&gt;Just a quick note: I&amp;rsquo;ve switched to Pelican site generator, because ruby-shuby decided not to work. Unfortunately, switching and preserving multi-language support is cumbersome. So, I&amp;rsquo;ve decided to ditch &lt;span class="caps"&gt;RU&lt;/span&gt; version. For what it&amp;rsquo;s worth, I moved to Canada and no longer really interested in trying to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a quick note: I&amp;rsquo;ve switched to Pelican site generator, because ruby-shuby decided not to work. Unfortunately, switching and preserving multi-language support is cumbersome. So, I&amp;rsquo;ve decided to ditch &lt;span class="caps"&gt;RU&lt;/span&gt; version. For what it&amp;rsquo;s worth, I moved to Canada and no longer really interested in trying to &amp;ldquo;promote&amp;rdquo; myself in Russian speaking&amp;nbsp;communities.&lt;/p&gt;
&lt;p&gt;Yeah, yeah, &amp;ldquo;promote&amp;rdquo;, &amp;mdash; written by a person who hasn&amp;rsquo;t write &lt;em&gt;anything&lt;/em&gt; for ages.&amp;nbsp;Right.&lt;/p&gt;
&lt;p&gt;Whoever read this blog in Russian, sorry. And, actually, I know that there were more traffic from &lt;span class="caps"&gt;CIS&lt;/span&gt; than from any other region &amp;gt;&amp;lt; But, two languages makes it too complicated and procrastinating to write in consistent manner &lt;em&gt;(hysterical&amp;nbsp;laugh).&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Зыс ис зе&amp;nbsp;энд.&lt;/p&gt;</content><category term="Other"></category><category term="writing"></category></entry><entry><title>Amazing Marvin for Task Management</title><link href="https://www.aviskase.com/articles/2019/07/30/amazing-marvin-for-task-management/" rel="alternate"></link><published>2019-07-30T00:00:00-04:00</published><updated>2019-07-30T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2019-07-30:/articles/2019/07/30/amazing-marvin-for-task-management/</id><summary type="html">&lt;p&gt;I&amp;rsquo;m an infrequent blogger, so how weird it is that my last post was about &lt;span class="caps"&gt;RTM&lt;/span&gt;? I was a loyal &lt;span class="caps"&gt;RTM&lt;/span&gt; user for quite a time&amp;hellip; Well, I have a new love now. His name is &lt;a class="external" href="https://www.amazingmarvin.com/"&gt;Marvin&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Marvin is still young, yet powerful. He has some problems and rough …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;rsquo;m an infrequent blogger, so how weird it is that my last post was about &lt;span class="caps"&gt;RTM&lt;/span&gt;? I was a loyal &lt;span class="caps"&gt;RTM&lt;/span&gt; user for quite a time&amp;hellip; Well, I have a new love now. His name is &lt;a class="external" href="https://www.amazingmarvin.com/"&gt;Marvin&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Marvin is still young, yet powerful. He has some problems and rough corners, but development couple (yes, just 2 persons!) is the most responsive and creative force I&amp;rsquo;ve seen. I&amp;rsquo;m still learning and tweaking my system there, but I want to describe the first working iteration to be able to improve and compare&amp;nbsp;later.&lt;/p&gt;
&lt;h2&gt;Enabled&amp;nbsp;Strategies&lt;/h2&gt;
&lt;p&gt;Strategies are like extensions: add more to have more&amp;nbsp;abilities.&lt;/p&gt;
&lt;h2&gt;Essential&lt;/h2&gt;
&lt;p&gt;Because these are essential, I&amp;rsquo;ll explain their usage&amp;nbsp;later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Category Context (big square, also beneath title, show full&amp;nbsp;path)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task&amp;nbsp;Notes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Labels&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Timers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backburner (no&amp;nbsp;setup)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Planning&amp;nbsp;Ahead&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smart&amp;nbsp;Lists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom&amp;nbsp;Sidebar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Top Mini&amp;nbsp;List&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom&amp;nbsp;Sections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;End Dates (show end dates below the&amp;nbsp;task)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start&amp;nbsp;Dates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work Session&amp;nbsp;Scheduler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Saved Items&amp;nbsp;(Templates)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smart List Day&amp;nbsp;Alerts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auto-schedule Due Tasks (cutoff = 1&amp;nbsp;day)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Staleness Warning (period = 40&amp;nbsp;days)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Email to&amp;nbsp;Marvin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zapier&amp;nbsp;Integration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review&amp;nbsp;Date&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weekly&amp;nbsp;Review&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Extras&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eat that Frog (just 2 frog levels) &amp;mdash; nice to have, but I don&amp;rsquo;t use it as intended (I tend to assign a frog to the bad tasks, but I don&amp;rsquo;t do them&amp;nbsp;first)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task Reminders (create automatically) &amp;mdash; very important feature, but less powerful than in &lt;span class="caps"&gt;RTM&lt;/span&gt; for now (cannot create multiple reminders). Though, I have a feeling that with proper review system I actually don&amp;rsquo;t need reminders that much&amp;nbsp;now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Duration Estimates &amp;mdash; I&amp;rsquo;m experimenting with having estimates for all tasks, but so far don&amp;rsquo;t feel it increases&amp;nbsp;productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time Tracking (show &amp;gt; in title) &amp;mdash; goes hand in hand with duration estimates, feels needed but not&amp;nbsp;essential&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beat The Clock &amp;mdash; same as time tracking, still experimenting with&amp;nbsp;it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project Focus Picker &amp;mdash; just started to use it; at least it works as an &amp;ldquo;eye  bugger&amp;rdquo; to push me to work on&amp;nbsp;project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Suggested Task &amp;mdash; never used it really, but something about it feels good&amp;nbsp;&amp;gt;&amp;lt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Wall &amp;mdash; using it occasionally, would like to have block division by&amp;nbsp;section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Day Progress Bar &amp;mdash; I don&amp;rsquo;t know why I enabled&amp;nbsp;it &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Procrastination Count (default) &amp;mdash; important but not&amp;nbsp;essential&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Missing Next Steps Warning &amp;mdash; important, but not very used much at the&amp;nbsp;moment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Day Note (with archive) &amp;mdash; nice to have, but I&amp;rsquo;m not very good at keeping a habit to write (as can be guessed by this blog updates&amp;nbsp;frequency)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calendar, Calendar Sync, All-Day Items, Top Mini List &amp;mdash; I&amp;rsquo;ll have a whole calendar workflow moved to &lt;span class="caps"&gt;AM&lt;/span&gt; as soon as these will work with Google Calendar and Outlook. Until then, I have to go to&amp;nbsp;calendars.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dashboard &amp;mdash; I like it, but not sure that I need&amp;nbsp;it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reward Tasks &amp;mdash; awesome feature which I&amp;rsquo;ve never used. Dunno&amp;nbsp;why. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Planning and Scheduling&amp;nbsp;Cycle&lt;/h2&gt;
&lt;p&gt;My &lt;span class="caps"&gt;PS&lt;/span&gt; cycle has three&amp;nbsp;phases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Monthly&amp;nbsp;planning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weekly&amp;nbsp;planning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Daily&amp;nbsp;scheduling&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice difference between planning and scheduling? This is because &lt;span class="caps"&gt;AM&lt;/span&gt; has a bit head-scratching at first, but really powerful distinction between these processes. In short, &lt;em&gt;planning&lt;/em&gt; is about assigning &lt;em&gt;start date&lt;/em&gt; and &lt;em&gt;end date&lt;/em&gt; (&amp;ldquo;soft deadline&amp;rdquo;) and &lt;em&gt;scheduling&lt;/em&gt; is about assigning a &lt;em&gt;do date&lt;/em&gt; (&amp;ldquo;when should I do this task&amp;rdquo;). Also, there can be a &lt;em&gt;due date&lt;/em&gt;, it&amp;rsquo;s not quite clear is it planning or scheduling category. I think both, because I use &lt;strong&gt;Auto-schedule Due Tasks&lt;/strong&gt; strategy. For example, if something is due tomorrow, this task will have a do date =&amp;nbsp;today.&lt;/p&gt;
&lt;h3&gt;Monthly&amp;nbsp;Planning&lt;/h3&gt;
&lt;p&gt;I have a recurring task &lt;em&gt;Plan tasks for the next month&lt;/em&gt;, which is setup to run monthly on the 31&lt;sup&gt;st&lt;/sup&gt; day. To complete this task I go to &lt;strong&gt;Planning &amp;gt; Monthly&lt;/strong&gt; and plan tasks &lt;strong&gt;only&lt;/strong&gt; for the next month while working from &lt;em&gt;Master List&lt;/em&gt;. I don&amp;rsquo;t want to overplan too much into the future.  What can be changed is maybe I should work from some smart list, but so far I don&amp;rsquo;t have too many tasks in &lt;span class="caps"&gt;ML&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Weekly&amp;nbsp;Planning&lt;/h3&gt;
&lt;p&gt;This is a &lt;strong&gt;Weekly Review&lt;/strong&gt; strategy with checklist scheduled to be done on Sundays. Checklist is a combination of weekly planning and everyday review&amp;nbsp;stuff.&lt;/p&gt;
&lt;h4&gt;Reformulate Task Names Left in Today&amp;nbsp;Pool&lt;/h4&gt;
&lt;p&gt;Done on: Daily&amp;nbsp;view&lt;/p&gt;
&lt;p&gt;This is a part from Jedi techniques, which goal is to rename tasks you didn&amp;rsquo;t complete for some reason. That way the next day they will look &amp;ldquo;fresher&amp;rdquo; or more inviting to&amp;nbsp;you.&lt;/p&gt;
&lt;h4&gt;Review Calendars for 2 Weeks Ahead: Add Tasks If&amp;nbsp;Needed&lt;/h4&gt;
&lt;p&gt;Done on: external sites, tasks are added to&amp;nbsp;inbox&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;birthdays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;special all day events like&amp;nbsp;holidays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;work&amp;nbsp;meetings&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, it&amp;rsquo;s something that is not really actionable, but has a day and duration. This is what I want to do in &lt;span class="caps"&gt;AM&lt;/span&gt; in the future, when calendar sync works&amp;nbsp;better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Smart list&lt;/strong&gt; with all calendar events in the next 2 weeks (to use for weekly&amp;nbsp;planning)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Top Mini List&lt;/strong&gt; strategy showing upcoming birthdays in the next 3&amp;nbsp;days&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Depending on how &lt;span class="caps"&gt;AM&lt;/span&gt; will show calendar events (probably as tasks which have to be completed, which is a bit unnecessary for me), maybe all of them should be shown in &lt;strong&gt;Top Mini&amp;nbsp;List&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Right now what I use is a &lt;strong&gt;Custom Sidebar&lt;/strong&gt; with links to my google and outlook&amp;nbsp;calendars.&lt;/p&gt;
&lt;h4&gt;Reflect on Completed Week: Do I Need to Do&amp;nbsp;More?&lt;/h4&gt;
&lt;p&gt;Done on: Archive, tasks are added to&amp;nbsp;inbox&lt;/p&gt;
&lt;p&gt;Go to &lt;strong&gt;Archive&lt;/strong&gt; and check what was done this week. It&amp;rsquo;s a bit cumbersome, because it shows tasks per month and not per week. In &lt;span class="caps"&gt;RTM&lt;/span&gt; I&amp;rsquo;ve used a smart list for that, but &lt;span class="caps"&gt;AM&lt;/span&gt; does not support searching completed tasks&amp;nbsp;(yet).&lt;/p&gt;
&lt;p&gt;Other way is to click through daily views, but for me it&amp;rsquo;s too many&amp;nbsp;clicks)&lt;/p&gt;
&lt;h4&gt;Review Start Dates for Backburner Tasks&amp;nbsp;(Smartlist)&lt;/h4&gt;
&lt;p&gt;Done one: Master List,  work from&amp;nbsp;smartlist&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Smartlist&lt;/strong&gt;: &lt;code&gt;any start date, on backburner&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I use backburner only for tasks which are &lt;strong&gt;dependent&lt;/strong&gt; on others or with &lt;strong&gt;start date&lt;/strong&gt; in the future. I try to be very strict with start dates and set them only if it really makes sense, for example: getting a vaccine boost shot in Dec 2028 has a start date in Sept 2028, because I don&amp;rsquo;t want this task to pollute my planning all these years. Another use for start dates is for sub-project, like 3-day long learning session, which is part of a project without start date (because I want to do some preparatory tasks before session&amp;nbsp;starts). &lt;/p&gt;
&lt;p&gt;So, in order to keep backburner in check, I review it once in week. Now that I think about it, maybe I should have an alert about tasks which does not have start date and are not dependent, but are in backburner&amp;hellip;? But more on alerts later&amp;nbsp;=)&lt;/p&gt;
&lt;h4&gt;Review All Projects: Add New Tasks If Needed&amp;nbsp;(Smartlist)&lt;/h4&gt;
&lt;p&gt;Done on: Master List, work from&amp;nbsp;smartlist&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Smartlist&lt;/strong&gt;:&amp;nbsp;Projects&lt;/p&gt;
&lt;p&gt;I had to create a smart list to show all projects, because I wanted to see backburner&amp;rsquo;s&amp;nbsp;too.&lt;/p&gt;
&lt;h4&gt;Recall This Day: Write down Everything Missed (Triggers/&amp;nbsp;Backwards-Day-Recall)&lt;/h4&gt;
&lt;p&gt;Done on: &lt;strong&gt;Sidebar&lt;/strong&gt;, tasks added to&amp;nbsp;inbox&lt;/p&gt;
&lt;p&gt;Two links in&amp;nbsp;Sidebar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;link to mind map containing&amp;nbsp;triggers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link to timer set for&amp;nbsp;20m&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Triggers are things which can be used to recall what was forgotten. For example, one of the subtrees in my mindmap contains all types of utilities or all kinds of cleaning which could be&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;Backwards day recall is a technique also used to recall things. You sit down and try to remember today in detail in backwards: from now to the&amp;nbsp;morning.&lt;/p&gt;
&lt;h4&gt;Empty Inboxes: Paper, GMail, Outlook, Joplin, &lt;span class="caps"&gt;AM&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;Categorize everything and clean up all inboxes I can have. First go with paper notes, then emails (gmail + outlook), then note taking application (for now it&amp;rsquo;s Joplin), and finally &lt;span class="caps"&gt;AM&lt;/span&gt; category &lt;em&gt;Inbox&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you see something that should be planned for this month, set it right&amp;nbsp;away.&lt;/p&gt;
&lt;h4&gt;Plan Tasks for the Next Week (Selecting from This&amp;nbsp;Month)&lt;/h4&gt;
&lt;p&gt;Done on: &lt;strong&gt;Planning &amp;gt; Weekly&lt;/strong&gt;, working from &lt;em&gt;This month&lt;/em&gt;&amp;nbsp;list&lt;/p&gt;
&lt;p&gt;Because everything was planned for &lt;em&gt;this month&lt;/em&gt;, I can just bring relevant tasks to next&amp;nbsp;week.&lt;/p&gt;
&lt;h4&gt;Schedule Tasks for Monday by Checking Next Week&amp;nbsp;List&lt;/h4&gt;
&lt;p&gt;Done on: Daily view for tomorrow, working from &lt;em&gt;This week&lt;/em&gt;&amp;nbsp;list&lt;/p&gt;
&lt;h3&gt;Daily&amp;nbsp;Scheduling&lt;/h3&gt;
&lt;p&gt;Because there is no &amp;ldquo;Daily review&amp;rdquo; strategy yet, I have a recurring task for that. It repeats every Wed and Fri, just because I&amp;rsquo;m still getting accustomed to always do it. When I&amp;rsquo;m ready, it will be repeated every day except for Sunday, where weekly review is&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;Checklist is a subset of weekly&amp;nbsp;review:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reformulate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reflect on Completed&amp;nbsp;Today&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;recall this&amp;nbsp;day&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;empty&amp;nbsp;inboxes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;schedule tasks for the next&amp;nbsp;day&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Extras&lt;/h2&gt;
&lt;h3&gt;Categories&lt;/h3&gt;
&lt;p&gt;Main:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inbox&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Household &amp;mdash; tasks related to house or&amp;nbsp;family&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hobbies  &amp;mdash; anything related to my hobbies, learning, and&amp;nbsp;reading&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reputation &amp;mdash; quite new for me, this is for tasks related to my &lt;em&gt;external image&lt;/em&gt;. Participating in open source projects, buying birthday gifts, writing blog, answering some emails. Sometimes there is no clear distinction between hobbies and this category, so it&amp;rsquo;s&amp;nbsp;fluid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Health&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Productivity &amp;mdash; tasks like everyday review or cleaning up overflown inboxes. I suppose calendar sync will go there&amp;nbsp;too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Sections&lt;/h3&gt;
&lt;p&gt;I use &lt;strong&gt;Custom Sections&lt;/strong&gt;&amp;nbsp;strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Morning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work &amp;mdash; linked to smartlist which finds all tasks/projects &lt;code&gt;in #Work&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outside &amp;mdash; linked to smartlist which finds all tasks/projects which &lt;code&gt;has @outside&lt;/code&gt; label&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evening&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bonus&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Morning and Evening tasks are essentials, while Bonus ones are nice to do. Outside tasks are for stuff where I need to go somewhere, like shopping errands. I&amp;rsquo;m still not hard set on these categories, except for Work, this one will definitely&amp;nbsp;stay.&lt;/p&gt;
&lt;h3&gt;Alerts&lt;/h3&gt;
&lt;p&gt;I use &lt;strong&gt;Smart List Day Alerts&lt;/strong&gt; strategy for finding and fixing potential planning&amp;nbsp;problems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New items pulled from backburner &amp;mdash; reminder to check items with &lt;code&gt;*new&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stale &amp;mdash; review items with &lt;code&gt;*stale&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To review (waiting or pinged) &amp;mdash; some tasks are ready to&amp;nbsp;review)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This week unestimated &amp;mdash; add estimation for all tasks, smartlist: &lt;code&gt;Tasks, no time estimate, &amp;amp;thisWeek scheduleDate today == ||&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Review&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Review date&lt;/strong&gt; strategy is not the best name for my usage. I use it for tasks which are not done by&amp;nbsp;me. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tag &lt;em&gt;waiting&lt;/em&gt; (3 day) &amp;mdash; for long waiting&amp;nbsp;tasks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tag &lt;em&gt;ping&lt;/em&gt; (1 day) &amp;mdash; reminds me ask someone everyday if s/he finished the&amp;nbsp;task&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Occasional&amp;nbsp;Tasks&lt;/h3&gt;
&lt;p&gt;I was not able to setup this correctly in &lt;span class="caps"&gt;AM&lt;/span&gt; yet, so I&amp;rsquo;m using some hacks around it. Basically, these are tasks which I want to do every 15-40 days, without specifying exact day. One of the tasks is &lt;em&gt;Productivity system review&lt;/em&gt;. It has a note with questions which I ask while going through all my tasks and&amp;nbsp;projects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Is it really mine? Maybe&amp;nbsp;delegate?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is there any real profit from this&amp;nbsp;task?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maybe it&amp;rsquo;s possible to do some other task so that this one becomes&amp;nbsp;obsolete?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is there any easier way to do&amp;nbsp;it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do I really still need to do&amp;nbsp;it?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Goal is to remove or reformulate&amp;nbsp;tasks.&lt;/p&gt;
&lt;h2&gt;Ending&amp;nbsp;Thoughts&lt;/h2&gt;
&lt;p&gt;Of course this is just a small part of &lt;span class="caps"&gt;AM&lt;/span&gt; experience. I like being able to create work sessions for working on projects in pomodorro-style chunks. Templates are awesome and I use them for mindful book reading projects (reading, making notes, transferring them to Joplin). Gamification abilities are cute and I will explore them more, when I&amp;rsquo;ll be more comfortable and less&amp;nbsp;procrastinating.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve noticed that features which were very important to me in &lt;span class="caps"&gt;RTM&lt;/span&gt;, like tagging, are not so needed here. Here you can have categories, sections, do/due/end dates, projects to achieve similar goals. This granularity and specificity are the most awesome aspect of &lt;span class="caps"&gt;AM&lt;/span&gt;!&lt;/p&gt;</content><category term="Productivity"></category><category term="practical"></category></entry><entry><title>Remember The Milk for Task Management</title><link href="https://www.aviskase.com/articles/2018/03/20/remember-the-milk-for-task-management/" rel="alternate"></link><published>2018-03-20T00:00:00-04:00</published><updated>2018-03-20T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2018-03-20:/articles/2018/03/20/remember-the-milk-for-task-management/</id><summary type="html">&lt;p&gt;Today I received a letter from &lt;a class="external" href="https://www.rememberthemilk.com/"&gt;Remember The Milk&lt;/a&gt; that I had won a free year of Pro. That&amp;rsquo;s great, yet I feel a bit sad because somehow everyone talks about every other todo app and not &lt;span class="caps"&gt;RTM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using &lt;span class="caps"&gt;RTM&lt;/span&gt; for several years. First, with free …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I received a letter from &lt;a class="external" href="https://www.rememberthemilk.com/"&gt;Remember The Milk&lt;/a&gt; that I had won a free year of Pro. That&amp;rsquo;s great, yet I feel a bit sad because somehow everyone talks about every other todo app and not &lt;span class="caps"&gt;RTM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using &lt;span class="caps"&gt;RTM&lt;/span&gt; for several years. First, with free account, later with Pro. And it&amp;rsquo;s a &lt;em&gt;second&lt;/em&gt; time I won a Pro :) &lt;span class="caps"&gt;RTM&lt;/span&gt; is great. For me, four killer features&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start dates and due&amp;nbsp;dates&lt;/li&gt;
&lt;li&gt;Very customizable repeat&amp;nbsp;options&lt;/li&gt;
&lt;li&gt;Really smart add syntax (you can input everything as one-liner and all task fields will be&amp;nbsp;populated)&lt;/li&gt;
&lt;li&gt;Smart lists (basically, it&amp;rsquo;s saved searches with operators like &lt;code&gt;tag:&lt;/code&gt; and logic control with &lt;code&gt;AND&lt;/code&gt;/&lt;code&gt;OR&lt;/code&gt;/&lt;code&gt;NOT&lt;/code&gt;/parentheses)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can implement any imaginable task management system with it. I use &lt;a class="external" href="http://blog.rememberthemilk.com/post/172085635648/tips-tricks-tuesday-combining-organization"&gt;a setup based on M.&amp;nbsp;Dorofeev&amp;rsquo;s approach&lt;/a&gt;.  Of course, specialized apps are probably a bit easier if you strictly follow rules of one &amp;ldquo;true&amp;rdquo; system, but with &lt;span class="caps"&gt;RTM&lt;/span&gt; you can do the heck you want any time you want. There is a bizarre development fashion to &amp;ldquo;box&amp;rdquo; users with constraints, to give no options. And for me &lt;span class="caps"&gt;RTM&lt;/span&gt; is a breeze of sane air of&amp;nbsp;freedom. &lt;/p&gt;</content><category term="Productivity"></category><category term="practical"></category></entry><entry><title>Mega Mind Map: Version #2</title><link href="https://www.aviskase.com/articles/2018/03/19/mega-mind-map-version-2/" rel="alternate"></link><published>2018-03-19T00:00:00-04:00</published><updated>2018-03-19T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2018-03-19:/articles/2018/03/19/mega-mind-map-version-2/</id><content type="html">&lt;p&gt;My &lt;a class="external" href="https://github.com/aviskase/mega-mind-map"&gt;not-so-mega mind map&lt;/a&gt; has grown a little bit. I finally added exploratory testing tours and ideas on how to make test cases less rigid, all that great stuff from &amp;ldquo;Exploratory Software Testing&amp;rdquo; by James A.&amp;nbsp;Whittaker.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mega mind map version 2" src="https://www.aviskase.com/articles/2018/03/19/mega-mind-map-version-2/mmm_v2.png"&gt;&lt;/p&gt;</content><category term="Testing"></category><category term="practical"></category></entry><entry><title>Testers in This World</title><link href="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/" rel="alternate"></link><published>2018-01-23T00:00:00-05:00</published><updated>2018-01-23T00:00:00-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2018-01-23:/articles/2018/01/23/testers-in-this-world/</id><summary type="html">&lt;p&gt;Every tester saw those articles: &amp;ldquo;Testing is dead&amp;rdquo;, &amp;ldquo;Manual testing is dead&amp;rdquo;, &amp;ldquo;Testing is not dead&amp;rdquo;, &amp;ldquo;Automation is not testing&amp;rdquo;, &amp;ldquo;Company &lt;span class="caps"&gt;XXX&lt;/span&gt; has no testers and is happy about it&amp;rdquo;, etc. They might get on nerves. I love my craft, but sometimes something is nibbling at the back of my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every tester saw those articles: &amp;ldquo;Testing is dead&amp;rdquo;, &amp;ldquo;Manual testing is dead&amp;rdquo;, &amp;ldquo;Testing is not dead&amp;rdquo;, &amp;ldquo;Automation is not testing&amp;rdquo;, &amp;ldquo;Company &lt;span class="caps"&gt;XXX&lt;/span&gt; has no testers and is happy about it&amp;rdquo;, etc. They might get on nerves. I love my craft, but sometimes something is nibbling at the back of my mind. Something that keeps me wondering: maybe I should move to a different role? So, I unscrambled this &amp;ldquo;something&amp;rdquo; and found an explanation why these thoughts are there and why I won&amp;rsquo;t leave testing&amp;nbsp;=)&lt;/p&gt;
&lt;p&gt;Disclaimer: these thoughts are mine and I don&amp;rsquo;t have a goal to promote or impose them on other people. As a normal human being I do understand that my opinion may change with new experience and knowledge. This article contains a documented reflection on my experience so far. Probably it&amp;rsquo;ll be fun to read in 10-20 years (if I&amp;rsquo;ll still be a tester)&amp;nbsp;xD&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Ideal World of Software&amp;nbsp;Development&lt;/h2&gt;
&lt;p&gt;Imagine an ideal world of software development. Scope is clear. Everything is done on time in relaxed manner without rush. Everybody is motivated to create the best product. Everybody has happy life outside of work. No stress. Users are eager to help too. And all these aren&amp;rsquo;t just for one product, but true for all software in the world. Great, isn&amp;rsquo;t&amp;nbsp;it? &lt;/p&gt;
&lt;p&gt;Now, when I&amp;rsquo;m thinking about this &lt;em&gt;ideal&lt;/em&gt; world, I can&amp;rsquo;t find a place for testers in it. There is just no place for bugs. Developers and analysts have all the time to design and build a product without real bugs. Remember, they don&amp;rsquo;t have just a time, they&amp;rsquo;re also motivated, so they definitively test product. They do it themselves&amp;hellip; so there is no need for a &lt;em&gt;separate&lt;/em&gt; role of a&amp;nbsp;tester.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s visualize this tester-less world as a perfect&amp;nbsp;disk:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ideal world of development" src="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Real World of Software&amp;nbsp;Development&lt;/h2&gt;
&lt;p&gt;But our current world is not ideal. No one has enough time. Overtimes. Burning out. Problems outside work. Toxic environment. No motivation. Some rogue manager keeps adding features out of scope. And bugs, bugs everywhere. This world is distorted, some products are a bit better than others, but no one is&amp;nbsp;perfect.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Real world of development" src="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Testers in the Real World of Software&amp;nbsp;Development&lt;/h2&gt;
&lt;p&gt;And that&amp;rsquo;s where testers are coming. We are like clay, like sealing foam. We patch this not-ideal world. We make it less&amp;nbsp;distorted.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Real world of development with testers" src="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_3.png"&gt;&lt;/p&gt;
&lt;p&gt;All products are distorted in different ways, that&amp;rsquo;s why you can see testers doing all kind of things. Some are just &amp;ldquo;manual monkeys.&amp;rdquo; On a different extreme are those who automate test cases that are written by others. Most are somewhere in between. There are projects where testers have a hat of analytic. Or support. Or both. Or &lt;span class="caps"&gt;PM&lt;/span&gt;. Someone, maybe gurus, don&amp;rsquo;t test at all: they mentor a team to test themselves, control that quality is efficiently insured by&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;Here is a fun fact. That patched version is still a lie. Testers are also not perfect. Thus, our world looks more like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Even more real world of development with testers" src="https://www.aviskase.com/articles/2018/01/23/testers-in-this-world/world_4.png"&gt;&lt;/p&gt;
&lt;p&gt;We can&amp;rsquo;t patch all holes. But we are here to&amp;nbsp;try.&lt;/p&gt;</content><category term="Testing"></category><category term="thoughts"></category></entry><entry><title>2018 and Mega Mind Map</title><link href="https://www.aviskase.com/articles/2018/01/06/2018-and-mega-mind-map/" rel="alternate"></link><published>2018-01-06T00:00:00-05:00</published><updated>2018-01-06T00:00:00-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2018-01-06:/articles/2018/01/06/2018-and-mega-mind-map/</id><summary type="html">&lt;p&gt;Well, it&amp;rsquo;s been a while. I don&amp;rsquo;t want to make so called &amp;ldquo;new year resolutions&amp;rdquo;, but it&amp;rsquo;s better to add a repeating task in the &lt;span class="caps"&gt;RTM&lt;/span&gt; to write something here&amp;nbsp;xD&lt;/p&gt;
&lt;p&gt;2018 started shaky. I left my first real place of work &amp;mdash; Quality Lab &amp;mdash; Alma mater of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, it&amp;rsquo;s been a while. I don&amp;rsquo;t want to make so called &amp;ldquo;new year resolutions&amp;rdquo;, but it&amp;rsquo;s better to add a repeating task in the &lt;span class="caps"&gt;RTM&lt;/span&gt; to write something here&amp;nbsp;xD&lt;/p&gt;
&lt;p&gt;2018 started shaky. I left my first real place of work &amp;mdash; Quality Lab &amp;mdash; Alma mater of testing. This decision was heartbreaking, yet expected. On the bright side, now I have time to condition my brain into the normal mode again: for the last 1.5 year I wasn&amp;rsquo;t productive in studying and&amp;nbsp;reading.&lt;/p&gt;
&lt;p&gt;First step is my mega mind map. God bless &lt;a class="external" href="https://www.freeplane.org/"&gt;Freeplane&lt;/a&gt;, it&amp;rsquo;s awesome. Actually, it was a bit ugly, but now it&amp;rsquo;s looking good ;) So, &lt;span class="caps"&gt;MMM&lt;/span&gt;. It&amp;rsquo;s versioned with git and here is a &lt;a class="external" href="https://github.com/aviskase/mega-mind-map"&gt;repo&lt;/a&gt;. I have an impressive goal of documenting all testing techniques and approaches. Hope, I won&amp;rsquo;t drop it as&amp;nbsp;usual.&lt;/p&gt;
&lt;p&gt;Here is a first&amp;nbsp;iteration: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;ACC&lt;/span&gt; (Attributes / Components /&amp;nbsp;Capabilities)&lt;/li&gt;
&lt;li&gt;Decomposition&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;APV&lt;/span&gt; aka ДПЗ (Actions / Parameters /&amp;nbsp;Values)&lt;/li&gt;
&lt;li&gt;Value&amp;nbsp;analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Mega mind map version 1" src="https://www.aviskase.com/articles/2018/01/06/2018-and-mega-mind-map/mmm_v1.jpg"&gt;&lt;/p&gt;</content><category term="Testing"></category><category term="practical"></category></entry><entry><title>Enabling L2TP/IPSec in Ubuntu</title><link href="https://www.aviskase.com/articles/2017/03/19/enabling-l2tpipsec-in-ubuntu/" rel="alternate"></link><published>2017-03-19T00:00:00-04:00</published><updated>2017-03-19T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2017-03-19:/articles/2017/03/19/enabling-l2tpipsec-in-ubuntu/</id><summary type="html">&lt;p&gt;Linux is like that: you can do anything, but sometimes it&amp;rsquo;s not easy for a common user. As for me, I hate writing config files for &lt;span class="caps"&gt;VPN&lt;/span&gt;, because network-manager is awesome. But sometimes it&amp;rsquo;s not easy to make it&amp;nbsp;work. &lt;/p&gt;
&lt;p&gt;The biggest problem for me is &lt;span class="caps"&gt;LT2PT&lt;/span&gt;/IPSec …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Linux is like that: you can do anything, but sometimes it&amp;rsquo;s not easy for a common user. As for me, I hate writing config files for &lt;span class="caps"&gt;VPN&lt;/span&gt;, because network-manager is awesome. But sometimes it&amp;rsquo;s not easy to make it&amp;nbsp;work. &lt;/p&gt;
&lt;p&gt;The biggest problem for me is &lt;span class="caps"&gt;LT2PT&lt;/span&gt;/IPSec. There is &lt;a class="external" href="http://blog.z-proj.com/enabling-l2tp-over-ipsec-on-ubuntu-16-04/"&gt;an excellent article&lt;/a&gt; on how to enable it using &lt;code&gt;network-manager-l2tp&lt;/code&gt;. But as on-line articles have a tendency to be removed, I want to save these instructions&amp;nbsp;here.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Install the&amp;nbsp;prerequisites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install \  
intltool \  
libtool \  
network-manager-dev \  
libnm-util-dev \  
libnm-glib-dev \  
libnm-glib-vpn-dev \  
libnm-gtk-dev \  
libnm-dev \  
libnma-dev \  
ppp-dev \  
libdbus-glib-1-dev \  
libsecret-1-dev \  
libgtk-3-dev \  
libglib2.0-dev \  
xl2tpd \  
strongswan  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get&amp;nbsp;network-manager-l2tp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/nm-l2tp/network-manager-l2tp.git  
cd network-manager-l2tp  
autoreconf -fi  
intltoolize  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configure the&amp;nbsp;build: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./configure \
  --disable-static --prefix=/usr \
  --sysconfdir=/etc --libdir=/usr/lib/x86_64-linux-gnu \
  --libexecdir=/usr/lib/NetworkManager \
  --localstatedir=/var \
  --with-pppd-plugin-dir=/usr/lib/pppd/2.4.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make  
sudo make install 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remove AppArmor settings for&amp;nbsp;IPSec: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apparmor_parser -R /etc/apparmor.d/usr.lib.ipsec.charon  
sudo apparmor_parser -R /etc/apparmor.d/usr.lib.ipsec.stroke  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Replace x2ltpd with&amp;nbsp;libpcap: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt remove xl2tpd  
sudo apt install libpcap0.8-dev

wget https://github.com/xelerance/xl2tpd/archive/v1.3.6/xl2tpd-1.3.6.tar.gz  
tar xvzf xl2tpd-1.3.6.tar.gz  
cd xl2tpd-1.3.6  
make  
sudo make install  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Restart your machine,&amp;nbsp;profit.&lt;/p&gt;</content><category term="Other"></category><category term="linux"></category><category term="practical"></category></entry><entry><title>Thoughts on “The ‘A’ Word”</title><link href="https://www.aviskase.com/articles/2016/07/30/thoughts-on-the-a-word/" rel="alternate"></link><published>2016-07-30T00:00:00-04:00</published><updated>2016-07-30T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-07-30:/articles/2016/07/30/thoughts-on-the-a-word/</id><summary type="html">&lt;p&gt;Alan Page is known as one of the authors of &amp;ldquo;How We Test Software at Microsoft&amp;rdquo;. But there is another good book and it&amp;rsquo;s called &amp;ldquo;The &amp;lsquo;A&amp;rsquo; Word&amp;rdquo;. You can buy it on &lt;a class="external" href="https://leanpub.com/TheAWord"&gt;LeanPub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The book is about automation in testing, but not how &lt;em&gt;to do&lt;/em&gt; it &amp;mdash; it&amp;rsquo;s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Alan Page is known as one of the authors of &amp;ldquo;How We Test Software at Microsoft&amp;rdquo;. But there is another good book and it&amp;rsquo;s called &amp;ldquo;The &amp;lsquo;A&amp;rsquo; Word&amp;rdquo;. You can buy it on &lt;a class="external" href="https://leanpub.com/TheAWord"&gt;LeanPub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The book is about automation in testing, but not how &lt;em&gt;to do&lt;/em&gt; it &amp;mdash; it&amp;rsquo;s about how &lt;em&gt;to think&lt;/em&gt; about it. It&amp;rsquo;s short, just 58 pages, but very dense with ideas and Alan&amp;rsquo;s&amp;nbsp;opinions.&lt;/p&gt;
&lt;p&gt;As I am not qualified to give an opinion on automation topics (because I don&amp;rsquo;t have much experience with it), I&amp;rsquo;ve just gathered some notes for future referencing. Sections are divided by&amp;nbsp;chapters.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes, testers use programming skills to help their testing. Sometimes, that code automates some application functionality. That&amp;rsquo;s&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Testing: Failing to&amp;nbsp;Succeed&lt;/h3&gt;
&lt;p&gt;There is a very famous concept called &amp;ldquo;Orders of Ignorance&amp;rdquo; introduced by Phillip Glen Armour (&lt;a class="external" href="https://www.researchgate.net/publication/27293624_The_five_orders_of_ignorance"&gt;more here&lt;/a&gt;). Chapter&amp;rsquo;s idea is that mostly tests are done on &lt;span class="caps"&gt;0OI&lt;/span&gt; level, but we should never forget about &lt;span class="caps"&gt;2OI&lt;/span&gt; test. &lt;span class="caps"&gt;0OI&lt;/span&gt; is a lack of ignorance (I know) and &lt;span class="caps"&gt;2OI&lt;/span&gt; is a lack of awareness (I don&amp;rsquo;t know what I don&amp;rsquo;t&amp;nbsp;know).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;0OI&lt;/span&gt; tests are &lt;em&gt;knowledge-proving&lt;/em&gt; tests, while &lt;span class="caps"&gt;2OI&lt;/span&gt; tests are &lt;em&gt;knowledge-acquiring&lt;/em&gt;&amp;nbsp;tests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;The Robots are Taking&amp;nbsp;Over&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Humans fail when they don&amp;rsquo;t use automation to solve problems impossible or impractical for manual&amp;nbsp;efforts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Automation fails when it tries to do or verify something that&amp;rsquo;s more suited for a human&amp;nbsp;evaluation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;To Automate&amp;nbsp;&amp;hellip;?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Good&lt;/em&gt; testers test first &amp;mdash; or at the very least they think of tests&amp;nbsp;first. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Great&lt;/em&gt; testers first think about how they&amp;rsquo;re going to approach a testing problem, then figure out what&amp;rsquo;s suitable for automation, and what&amp;rsquo;s not&amp;nbsp;suitable. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You should automate 100% of the tests that &lt;em&gt;should be&lt;/em&gt;&amp;nbsp;automated&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alan&amp;rsquo;s heuristic when to automate: &amp;ldquo;I&amp;rsquo;m&amp;nbsp;Bored&amp;rdquo;&lt;/p&gt;
&lt;h3&gt;The Coding&amp;nbsp;Tester&lt;/h3&gt;
&lt;p&gt;Summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the role of a coder-tester &lt;em&gt;is not&lt;/em&gt; to automate&amp;nbsp;everything&lt;/li&gt;
&lt;li&gt;testers &lt;em&gt;do not&lt;/em&gt; need to have a computer&amp;nbsp;science&lt;/li&gt;
&lt;li&gt;testers &lt;em&gt;do not&lt;/em&gt; need to be able to&amp;nbsp;program&lt;/li&gt;
&lt;li&gt;programming knowledge &lt;em&gt;does not&lt;/em&gt; destroy &amp;ldquo;a proper tester&amp;nbsp;angle&amp;rdquo;&lt;/li&gt;
&lt;li&gt;background similar to customer&amp;rsquo;s &lt;em&gt;does not&lt;/em&gt; make you a&amp;nbsp;customer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;Shmooey&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;For 95% of all software applications, directly automating the &lt;span class="caps"&gt;GUI&lt;/span&gt; is a waste of&amp;nbsp;time. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record, I typed 99% above first, then chickened&amp;nbsp;out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Design for &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;Automation&lt;/h3&gt;
&lt;p&gt;Alan&amp;rsquo;s main points for disliking &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;automation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s (typically) fragile &amp;mdash; tests tend to break / stop working / work unsuccessfully&amp;nbsp;often&lt;/li&gt;
&lt;li&gt;It rarely lasts through multiple versions of a project (another aspect of&amp;nbsp;fragility)&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s freakin&amp;rsquo; hard to automate &lt;span class="caps"&gt;UI&lt;/span&gt; (and keep track of state, verify,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;Available tools are weak to moderate (this is arguable, depending on what you want to do with the tools &amp;mdash; I&amp;rsquo;m particularly pleased, for example, with what good testers are able to do with selenium and web&amp;nbsp;driver).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I love &lt;span class="caps"&gt;GUI&lt;/span&gt; automation that can automatically explore variations of a &lt;span class="caps"&gt;GUI&lt;/span&gt; based task&amp;nbsp;flow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I like &lt;span class="caps"&gt;GUI&lt;/span&gt; automation is in stress or performance&amp;nbsp;issues.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;It&amp;rsquo;s (probably) a Design&amp;nbsp;Problem&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Record &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Playback automation is a&amp;nbsp;non-starter&lt;/li&gt;
&lt;li&gt;Basic verification that would be hit by anyone walking through the basics of the application isn&amp;rsquo;t worth&amp;nbsp;automation&lt;/li&gt;
&lt;li&gt;Tests that do exactly the same thing every time are not&amp;nbsp;valuable&lt;/li&gt;
&lt;li&gt;Always think&amp;nbsp;forward&lt;/li&gt;
&lt;li&gt;Plan for failure and ensure that all test failures tell you exactly what is&amp;nbsp;wrong&lt;/li&gt;
&lt;li&gt;Tests should be&amp;nbsp;reliable&lt;/li&gt;
&lt;li&gt;There is always a better alternative to Sleep&amp;nbsp;statements&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;UI&lt;/span&gt; is fragile, its testability should&amp;nbsp;designed&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;In the&amp;nbsp;Middle&lt;/h3&gt;
&lt;p&gt;Alan&amp;rsquo;s brainstorming technique: first spend a reasonable amount of time focusing on the extremes &amp;mdash; because often, some great ideas for &amp;ldquo;the middle&amp;rdquo; comes out of that&amp;nbsp;brainstorming. &lt;/p&gt;
&lt;h3&gt;Test Design for&amp;nbsp;Automation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The first step &amp;mdash; and most important &amp;mdash; is to think how you&amp;rsquo;re going to&amp;nbsp;test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;From that initial test design effort, you can deduce what aspects of testing could be accomplished more efficiently with automation (and&amp;nbsp;without).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Orchestrating Test&amp;nbsp;Automation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Designing good tests is one of the hardest tasks in software&amp;nbsp;development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;span class="caps"&gt;LOL&lt;/span&gt; &amp;mdash; &lt;span class="caps"&gt;UR&lt;/span&gt; &lt;span class="caps"&gt;AUTOMASHUN&lt;/span&gt; &lt;span class="caps"&gt;SUCKZ&lt;/span&gt;!&lt;/h3&gt;
&lt;p&gt;Your tests don&amp;rsquo;t&amp;nbsp;suck:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when you treat their code like a production code&lt;ul&gt;
&lt;li&gt;core&amp;nbsp;reviews&lt;/li&gt;
&lt;li&gt;static&amp;nbsp;analysis&lt;/li&gt;
&lt;li&gt;running with the debugger to ensure they are doing what you think they&amp;nbsp;are&lt;/li&gt;
&lt;li&gt;trust: if a test fails, it&amp;rsquo;s a product bug, not a test&amp;nbsp;bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;when they execute&amp;nbsp;automatically&lt;/li&gt;
&lt;li&gt;when failures are handled automatically&lt;ul&gt;
&lt;li&gt;bugs are entered automatically &amp;mdash; including logs, call stacks, screen shots, trace information, and other relevant&amp;nbsp;info&lt;/li&gt;
&lt;li&gt;when bug is fixed, it&amp;rsquo;s checked&amp;nbsp;automatically&lt;/li&gt;
&lt;li&gt;generation of &amp;ldquo;Test Result&amp;nbsp;Report&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Musings on Test&amp;nbsp;Design&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Some tests can only be run via some sort of test&amp;nbsp;automation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Some tests can only be done via human&amp;nbsp;interaction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You can&amp;rsquo;t effectively think about automated testing separately from human&amp;nbsp;testing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In my world, there are no such things as automated testing, exploratory testing, manual testing,&amp;nbsp;etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;There is only&amp;nbsp;testing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Beyond Regression Tests &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Testing with&amp;nbsp;Code&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Useful tests are tests that provide new&amp;nbsp;information. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An automation strategy that only performs regression testing is short-sighted and&amp;nbsp;incomplete.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How to make test&amp;nbsp;useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;model-based&amp;nbsp;testing&lt;/li&gt;
&lt;li&gt;introducing some&amp;nbsp;randomness&lt;/li&gt;
&lt;li&gt;data driven&amp;nbsp;testing&lt;/li&gt;
&lt;li&gt;scaled fault&amp;nbsp;injection &lt;/li&gt;
&lt;li&gt;fuzzing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;More on Test&amp;nbsp;Design&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Test Design ideas are &lt;em&gt;endless.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;To be a &lt;em&gt;good&lt;/em&gt; test designer (and tester), you need a lot of testing ideas, and you need to know how and when to apply&amp;nbsp;them.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Testing"></category><category term="thoughts"></category><category term="book"></category></entry><entry><title>Notes for Course “Intro to Linux”</title><link href="https://www.aviskase.com/articles/2016/07/27/notes-for-course-intro-to-linux/" rel="alternate"></link><published>2016-07-27T00:00:00-04:00</published><updated>2016-07-27T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-07-27:/articles/2016/07/27/notes-for-course-intro-to-linux/</id><summary type="html">&lt;p&gt;If there is a Linux course on a platform, I&amp;rsquo;ll always watch it. Those who know me are aware that I am using some kind of Debian-based distributive full time &amp;mdash; I&amp;rsquo;m not a hardcore fan, but I like it here. One might ask: why am I watching all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If there is a Linux course on a platform, I&amp;rsquo;ll always watch it. Those who know me are aware that I am using some kind of Debian-based distributive full time &amp;mdash; I&amp;rsquo;m not a hardcore fan, but I like it here. One might ask: why am I watching all these courses when they are mostly for beginners? Answer is simple: repetition is the mother of learning, plus there are always some tricks that you forget or can become more interesting with&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;So it happened with &lt;a class="external" href="https://stepic.org/course/Введение-в-Linux-73"&gt;Intro to Linux&lt;/a&gt;(ru) on Russian platform Stepic. First, I&amp;rsquo;ve got month license for any JetBrains &lt;span class="caps"&gt;IDE&lt;/span&gt; by solving some exercises and that&amp;rsquo;s cool. Second, cute guys from Bioinformatics Institute made me adore tmux and almost persuaded to look at vim.&amp;nbsp;Almost.&lt;/p&gt;
&lt;p&gt;And now as usual, some notes to not to forget. If something looks like a magic: read books or watch some&amp;nbsp;course!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Run program in&amp;nbsp;background: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;program &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check if link is&amp;nbsp;available: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget --spider somelink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Download files by links from a text&amp;nbsp;file: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget -i some-textfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using arguments in&amp;nbsp;scripts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$#&lt;/code&gt; &amp;mdash; number of&amp;nbsp;arguments&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$0&lt;/code&gt; &amp;mdash; script&amp;nbsp;name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$1&lt;/code&gt; &amp;mdash; the first&amp;nbsp;argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$2&lt;/code&gt; &amp;mdash; the second&amp;nbsp;argument&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How much space does something&amp;nbsp;occupy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;du [--max-depth &amp;lt;depth&amp;gt; -h] &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create several directories / files at&amp;nbsp;once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir {dir1,dir2,dir3,dir4}
touch {fileA,fileB}.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;tmux &amp;mdash; terminal&amp;nbsp;multiplexor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to commands mode: &lt;span class="keys"&gt;&lt;kbd class="key-control"&gt;Ctrl&lt;/kbd&gt;&lt;span&gt;+&lt;/span&gt;&lt;kbd class="key-b"&gt;B&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Create new window: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-c"&gt;C&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Create vertical split: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-percent"&gt;%&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Create horizontal split: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-double-quote"&gt;"&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Go to window number 1 &amp;hellip; 9: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-1"&gt;1&lt;/kbd&gt;&lt;/span&gt; &amp;hellip; &lt;span class="keys"&gt;&lt;kbd class="key-9"&gt;9&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Go to next window: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-n"&gt;N&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Go to previous window: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-p"&gt;P&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Close window or split: commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-x"&gt;X&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Detach (temporal exit): commands mode and &lt;span class="keys"&gt;&lt;kbd class="key-d"&gt;D&lt;/kbd&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Return to tmux: &lt;code&gt;tmux attach / tmux a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List all running tmux: &lt;code&gt;tmux list-sessions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Other"></category><category term="linux"></category><category term="course"></category><category term="practical"></category></entry><entry><title>Course “Intro to DevOps” by Udacity</title><link href="https://www.aviskase.com/articles/2016/07/17/course-intro-to-devops-by-udacity/" rel="alternate"></link><published>2016-07-17T00:00:00-04:00</published><updated>2016-07-17T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-07-17:/articles/2016/07/17/course-intro-to-devops-by-udacity/</id><summary type="html">&lt;p&gt;I love MOOCs: Coursera, Udacity, Stepic. There are so many courses to watch for entire life. Just now watched a course &lt;a class="external" href="https://www.udacity.com/course/intro-to-devops--ud611"&gt;Intro to DevOps&lt;/a&gt; by&amp;nbsp;Udacity.&lt;/p&gt;
&lt;p&gt;The course is concise and comprehensive. Here are some notes I&amp;rsquo;ve&amp;nbsp;made.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;DevOps&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;DevOps&lt;/em&gt; is the practice of operations and development engineers participating …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love MOOCs: Coursera, Udacity, Stepic. There are so many courses to watch for entire life. Just now watched a course &lt;a class="external" href="https://www.udacity.com/course/intro-to-devops--ud611"&gt;Intro to DevOps&lt;/a&gt; by&amp;nbsp;Udacity.&lt;/p&gt;
&lt;p&gt;The course is concise and comprehensive. Here are some notes I&amp;rsquo;ve&amp;nbsp;made.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;DevOps&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;DevOps&lt;/em&gt; is the practice of operations and development engineers participating together in the entire service life-cycle, from design through the development process to production&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;DevOps is also characterized by operations staff making use many of the same techniques as developers for their systems&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;CommitStrip &amp;mdash; &lt;a class="external" href="http://www.commitstrip.com/en/2015/02/02/is-your-company-ready-for-devops/"&gt;what DevOps is &lt;em&gt;not&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Components that make up DevOps &amp;mdash; &lt;span class="caps"&gt;CAMS&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Communication &amp;mdash; agile communications, lean,&amp;nbsp;respect&lt;/li&gt;
&lt;li&gt;Automation &amp;mdash; deployment, testing,&amp;nbsp;integration&lt;/li&gt;
&lt;li&gt;Measurement &amp;mdash; monitoring, useful logs, biz metrics, usefulness of tools &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;processes&lt;/li&gt;
&lt;li&gt;Sharing &amp;mdash; shared view of goals, problems, and&amp;nbsp;benefits&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you can&amp;rsquo;t measure it, you can&amp;rsquo;t improve&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Solving the Environment&amp;nbsp;Problem&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Golden image&lt;ul&gt;
&lt;li&gt;more work up front &amp;mdash; large install image must be regenerated for any&amp;nbsp;change&lt;/li&gt;
&lt;li&gt;much faster&amp;nbsp;installation/boot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration management&lt;ul&gt;
&lt;li&gt;lighter build process &amp;mdash; integration is done at install/initial boot&amp;nbsp;time&lt;/li&gt;
&lt;li&gt;slower start up&amp;nbsp;process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Combination of 1 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;2&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Monitoring&lt;/h2&gt;
&lt;p&gt;Monitoring data&amp;nbsp;sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;external probing, test&amp;nbsp;queries&lt;/li&gt;
&lt;li&gt;application levels stats (queries per second,&amp;nbsp;latency)&lt;/li&gt;
&lt;li&gt;environment stats (&lt;span class="caps"&gt;JVM&lt;/span&gt; memory&amp;nbsp;profile)&lt;/li&gt;
&lt;li&gt;host/container stats (load average, disk&amp;nbsp;errors)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Monitoring data&amp;nbsp;products:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alerting&lt;/li&gt;
&lt;li&gt;performance&amp;nbsp;analysis&lt;/li&gt;
&lt;li&gt;capacity&amp;nbsp;prediction&lt;/li&gt;
&lt;li&gt;growth&amp;nbsp;measurement&lt;/li&gt;
&lt;li&gt;debugging&amp;nbsp;metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Monitoring systems" src="https://www.aviskase.com/articles/2016/07/17/course-intro-to-devops-by-udacity/monitoring_systems.png"&gt;&lt;/p&gt;
&lt;h2&gt;Additional&amp;nbsp;Resources&lt;/h2&gt;
&lt;h3&gt;Notable&amp;nbsp;Books&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://itrevolution.com/books/phoenix-project-devops-book/"&gt;The Phoenix Project&lt;/a&gt; (by Gene Kim, Kevin Behr, George Spafford) &amp;mdash; a novel about &lt;span class="caps"&gt;IT&lt;/span&gt;, DevOps, and helping your business&amp;nbsp;win&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley-ebook/dp/B003YMNVC0"&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;/a&gt; (by Jez Humble, David Farley) &amp;mdash; the principles and technical practices that enable rapid, incremental delivery of high quality, valuable new functionality to&amp;nbsp;users&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.amazon.com/Lean-Enterprise-Performance-Organizations-Innovate/dp/1449368425"&gt;Lean Enterprise: How High Performance Organizations Innovate at Scale&lt;/a&gt; (by Jez Humble, Joanne Molesky, Barry O&amp;rsquo;Reilly) &amp;mdash; Lean and Agile principles and patterns to help you move fast at scale &amp;mdash; and demonstrates why and how to apply these methodologies throughout your organization, rather than with just one department or&amp;nbsp;team&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://smile.amazon.com/gp/product/B00CBM1WFC"&gt;Building a DevOps Culture&lt;/a&gt; (by Mandi Walls) &amp;mdash; free Kindle book &amp;mdash; DevOps is as much about culture as it is about&amp;nbsp;tools&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notable&amp;nbsp;Presentations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://www.youtube.com/watch?v=o7-IuYS0iSE"&gt;Short history of DevOps&lt;/a&gt; &amp;mdash; video by Damon&amp;nbsp;Edwards&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.youtube.com/watch?v=_DEToXsgrPc"&gt;Chef Style DevOps Kungfu&lt;/a&gt; &amp;mdash; Adam Jacob Keynote &amp;mdash; ChefConf&amp;nbsp;2015&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.youtube.com/watch?v=L1w2_AY82WY"&gt;Jez Humble Keynote&lt;/a&gt; &amp;mdash; ChefConf&amp;nbsp;2015&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://vimeo.com/69079272"&gt;Leading the Horses to Drink&lt;/a&gt; &amp;mdash; support and initiate a DevOps transformation by Damon&amp;nbsp;Edwards&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Additional DevOps Related Blogs and&amp;nbsp;Sites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://www.chef.io/blog/2010/07/16/what-devops-means-to-me/"&gt;What DevOps means to me&lt;/a&gt; &amp;mdash; an explanation of the components that make up &lt;span class="caps"&gt;CAMS&lt;/span&gt; (Culture, Automation, Measurement, Sharing), as well additional thoughts on what DevOps is and is not &amp;mdash; by John&amp;nbsp;Willis&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://dev2ops.org/"&gt;dev2ops&lt;/a&gt; &amp;mdash; delivering change in a DevOps and cloud&amp;nbsp;world&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://theagileadmin.com/"&gt;the agile admin&lt;/a&gt; &amp;mdash; blog on topics of DevOps, agile operations, cloud computing, infrastructure automation, Web security (especially AppSec), transparency, open source, monitoring, Web performance optimization, and&amp;nbsp;more&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://devopschecklist.com/"&gt;The DevOps checklist&lt;/a&gt; &amp;mdash; this checklist is comprised of 48 items you can use to gauge the maturity of your software delivery competency, and form a baseline to measure your future&amp;nbsp;improvements&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.mattstratton.com/"&gt;DevOps &amp;mdash; A Crash Course&lt;/a&gt; by Matt Stratton. A lot of links to good resources on DevOps&amp;nbsp;topics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Additional Resources by&amp;nbsp;Nutanix&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://stevenpoitras.com/the-nutanix-bible/"&gt;The Nutanix Bible&lt;/a&gt; &amp;mdash; brief history of data centers, visualization, webscale architecture and an explanation of Nutanix hyperconverged&amp;nbsp;architecture&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://go.nutanix.com/webscale-101-hyper-converged-infrastructure-guide.html"&gt;Hyperconverged Infrastructure&amp;nbsp;Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://next.nutanix.com/t5/Nutanix-Education-Blog/bg-p/Certifications"&gt;Nutanix Education&amp;nbsp;portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.youtube.com/channel/UCJupSMWQRKQTvkb2CfkW0Eg"&gt;Nutanix Education YouTube&amp;nbsp;channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://next.nutanix.com/"&gt;Nutanix &lt;span class="caps"&gt;NEXT&lt;/span&gt; community&amp;nbsp;site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Popular Monitoring&amp;nbsp;Tools&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://www.nagios.org/"&gt;Nagios&lt;/a&gt; and &lt;a class="external" href="http://www.zabbix.com/"&gt;Zabbix&lt;/a&gt; &amp;mdash; comprehensive solutions for monitoring large infrastructure, but maybe too big and complex for small&amp;nbsp;projects&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://graphite.wikidot.com/"&gt;Graphite&lt;/a&gt; &amp;mdash; open-source database and a graphing solution for storing and displaying monitoring&amp;nbsp;data&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://influxdb.com/"&gt;InfluxDB&lt;/a&gt; &amp;mdash; an open-source distributed time series database for metrics, events, and&amp;nbsp;analytics&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://github.com/etsy/statsd"&gt;StatsD&lt;/a&gt; &amp;mdash; simple daemon for easy stats aggregation, by Etsy. Read about the philosophy behind it in the article by it&amp;rsquo;s creators &amp;mdash; &lt;a class="external" href="https://codeascraft.com/2011/02/15/measure-anything-measure-everything/"&gt;Measure Anything, Measure&amp;nbsp;Everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://grafana.org/"&gt;Grafana&lt;/a&gt; &amp;mdash; metrics dashboard and graph editor for Graphite and&amp;nbsp;InfluxDB&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.pagerduty.com/"&gt;PagerDuty&lt;/a&gt; &amp;mdash; incident resolution life-cycle management platform that integrates with over 100 other systems to streamline the process for large&amp;nbsp;organizations&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.elastic.co/products/logstash"&gt;Logstash&lt;/a&gt; &amp;mdash; log storage and search system, works well with &amp;mdash; &lt;a class="external" href="https://www.elastic.co/products/kibana"&gt;Kibana&lt;/a&gt; graphing and visualization&amp;nbsp;software&lt;/li&gt;
&lt;/ul&gt;</content><category term="Other"></category><category term="devops"></category><category term="course"></category></entry><entry><title>Test Planning: Questions by Google (outline)</title><link href="https://www.aviskase.com/articles/2016/06/06/test-planning-questions-by-google-outline/" rel="alternate"></link><published>2016-06-06T00:00:00-04:00</published><updated>2016-06-06T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-06-06:/articles/2016/06/06/test-planning-questions-by-google-outline/</id><content type="html">&lt;p&gt;Google Testing Blog made all testers happy &lt;a class="external" href="http://googletesting.blogspot.com/2016/06/the-inquiry-method-for-test-planning.html"&gt;one more time&lt;/a&gt;. The article provides a comprehensive list of questions to be asked before writing a test plan (or a test strategy). So I&amp;rsquo;ve made &lt;a class="external" href="https://www.mindomo.com/outline/8d87278fd21f4c1a8f0ab413c2596f1e"&gt;an outline&lt;/a&gt; to&amp;nbsp;share.&lt;/p&gt;</content><category term="Testing"></category><category term="practical"></category></entry><entry><title>Thoughts on “Dear Evil Tester”</title><link href="https://www.aviskase.com/articles/2016/05/09/thoughts-on-dear-evil-tester/" rel="alternate"></link><published>2016-05-09T00:00:00-04:00</published><updated>2016-05-09T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-05-09:/articles/2016/05/09/thoughts-on-dear-evil-tester/</id><summary type="html">&lt;p&gt;Recently I&amp;rsquo;ve read a book &amp;ldquo;Dear Evil Tester&amp;rdquo; by Alan Richardson. The book has three parts: published letters, unpublished,&amp;nbsp;essays. &lt;/p&gt;
&lt;p&gt;The first part is kick-ass. You can just quote a random sentence from it and it will be&amp;nbsp;great. &lt;/p&gt;
&lt;p&gt;For instance, I really want to use this one as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I&amp;rsquo;ve read a book &amp;ldquo;Dear Evil Tester&amp;rdquo; by Alan Richardson. The book has three parts: published letters, unpublished,&amp;nbsp;essays. &lt;/p&gt;
&lt;p&gt;The first part is kick-ass. You can just quote a random sentence from it and it will be&amp;nbsp;great. &lt;/p&gt;
&lt;p&gt;For instance, I really want to use this one as a personal&amp;nbsp;motto:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only principle I&amp;rsquo;m prepared to absolutely commit to, with absolute certainty, is that I can change my&amp;nbsp;mind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this one clearly shows the moment when everything starts flying to&amp;nbsp;hell:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a person has the power to cause the project to fail, then they can say ‘testing is not required’, at the point they make the decision to doom the&amp;nbsp;project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, how often it is when a check is &amp;ldquo;done&amp;rdquo;, then no, not a single step back, there will be no time for restesting and&amp;nbsp;rechecking:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And as we all know, once a ‘Test Case’ is done, it can never be&amp;nbsp;undone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Guru by themselves, so&amp;nbsp;classic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enumerate everything that you do, and only you do, and then define ‘true’ Exploratory Testing as the specific combination of items that you&amp;nbsp;enumerated&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The second part wasn&amp;rsquo;t so interesting. Yep, there are more practical and philosophical ideas, but they weren&amp;rsquo;t &lt;em&gt;evil&lt;/em&gt; enough. It also applies to the third&amp;nbsp;part. &lt;/p&gt;
&lt;p&gt;Nevertheless, it&amp;rsquo;s the book you&amp;rsquo;ll want to reread &amp;mdash; cute devil&amp;rsquo;s doodles and provocative style are awesome. And you can buy it on &lt;a class="external" href="https://leanpub.com/DearEvilTester"&gt;Leanpub&lt;/a&gt;.&lt;/p&gt;</content><category term="Testing"></category><category term="book"></category><category term="thoughts"></category></entry><entry><title>Coverage Metrics</title><link href="https://www.aviskase.com/articles/2016/05/02/coverage-metrics/" rel="alternate"></link><published>2016-05-02T00:00:00-04:00</published><updated>2016-05-02T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-05-02:/articles/2016/05/02/coverage-metrics/</id><summary type="html">&lt;p&gt;There are two strange metrics on the project where I work: how much is tested and how much works. Every time I should update these two numbers my head explodes. I don&amp;rsquo;t like them at&amp;nbsp;all.&lt;/p&gt;
&lt;h2&gt;What means &amp;ldquo;how much is&amp;nbsp;tested&amp;rdquo;?&lt;/h2&gt;
&lt;p&gt;Traditionally we are writing a percentage of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are two strange metrics on the project where I work: how much is tested and how much works. Every time I should update these two numbers my head explodes. I don&amp;rsquo;t like them at&amp;nbsp;all.&lt;/p&gt;
&lt;h2&gt;What means &amp;ldquo;how much is&amp;nbsp;tested&amp;rdquo;?&lt;/h2&gt;
&lt;p&gt;Traditionally we are writing a percentage of completed checks out of all checks in the checklist. I don&amp;rsquo;t like this tradition, because checks are different. Here you should just assert error&amp;rsquo;s text message, and there you should produce this error under some&amp;nbsp;conditions.&lt;/p&gt;
&lt;p&gt;I see this solution. Every check should have corresponding number like a story point. Let&amp;rsquo;s call it a test point. To check text there is 1 tp, and to reproduce an error &amp;mdash; 3 tp. That way the whole checklist costs 4 tp. When we are going through the checklist, a tester should write how much is tested for every check. For example, text is asserted &amp;mdash; 1 pt. But reproducing is done only for several scenarios, so only 2 tp. In total, we completed 3 out of 4 test&amp;nbsp;points.&lt;/p&gt;
&lt;h2&gt;What means &amp;ldquo;how much&amp;nbsp;works&amp;rdquo;?&lt;/h2&gt;
&lt;p&gt;Based on what are other testers are doing, it is a number of &amp;ldquo;green&amp;rdquo; (or passed) checks out of all&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;Consider this situation: test some kind of import. Test session is started, and voila, there no &amp;ldquo;Import&amp;rdquo; button. That&amp;rsquo;s a blocker and no more checks could be done. What we are writing for &amp;ldquo;how much works&amp;rdquo;? Zero. A developer fixes the button. Checks are flying, everything is perfect, we are writing 100% (a&amp;nbsp;miracle).&lt;/p&gt;
&lt;p&gt;Here is a question: is it correct that we put zero after the first session? After all, it was only a button, everything else was working already. I think it&amp;rsquo;s correct. But we should rename this metric, because it shows not how much &lt;em&gt;works&lt;/em&gt;, but how much is &lt;em&gt;available&lt;/em&gt; to a user and to what&amp;nbsp;extent.&lt;/p&gt;
&lt;h2&gt;And what is in&amp;nbsp;result?&lt;/h2&gt;
&lt;p&gt;Checklists are measured in test points, availability metric is renamed. Now watch carefully. We are throwing away percentages. After all, all checklists are different. Why should we use percentages, when they can&amp;rsquo;t show reality. 20% of a small task with 10 tp &amp;mdash; not bad, 80% of a task with 1000 tp &amp;mdash; can ruin a release. And strictly speaking this method is using not ratio, but interval scale. You &lt;a class="external" href="https://en.wikipedia.org/wiki/Level_of_measurement"&gt;can&amp;rsquo;t multiply and divide&lt;/a&gt; in this scale, therefore, can&amp;rsquo;t calculate&amp;nbsp;percentage.&lt;/p&gt;
&lt;h2&gt;Guru&amp;nbsp;talks&lt;/h2&gt;
&lt;p&gt;Michael Bolton writes a lot about choosing right scales and using them properly. Recently there was &lt;a class="external" href="http://www.developsense.com/blog/2016/04/is-there-a-simple-coverage-metric/"&gt;yet another article&lt;/a&gt;. His positions is that in testing even interval scale is too much, nominal and ordinal are more correct. There is an excellent example in that article, so I just leave it&amp;nbsp;here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="⚪️" class="emoji" height="20px" src="https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/26aa.png" title=":white_circle:" width="20px"&gt; Level 0: we know nothing at all about this area of the&amp;nbsp;product.&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="😶" class="emoji" height="20px" src="https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f636.png" title=":no_mouth:" width="20px"&gt; Level 1: we have done a very cursory evaluation of this area. Smoke- or sanity-level; we&amp;rsquo;ve visited this feature and had a brief look at it, but we don&amp;rsquo;t really know very much about it; we haven&amp;rsquo;t probed it in any real&amp;nbsp;depth.&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="😐" class="emoji" height="20px" src="https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f610.png" title=":neutral_face:" width="20px"&gt; Level 2: we&amp;rsquo;ve had a reasonable look at this area, although we haven&amp;rsquo;t gone all the way deep. We&amp;rsquo;ve examined the common, the core, the critical, the happy paths, the handling of everyday errors or exceptions. We&amp;rsquo;ve pretty familiar with this area. We&amp;rsquo;ve done the kind of testing that would expose some significant bugs, if they were&amp;nbsp;there.&lt;/li&gt;
&lt;li&gt;&lt;img align="absmiddle" alt="😎" class="emoji" height="20px" src="https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/1f60e.png" title=":sunglasses:" width="20px"&gt; Level 3: we&amp;rsquo;ve really kicked this area harshly and hard. We&amp;rsquo;ve looked at unusual and complex conditions or states. We&amp;rsquo;ve probed deeply for subtle or hidden bugs. We&amp;rsquo;ve exposed the product to the extreme, the exceptional, the rare, the improbable. We&amp;rsquo;ve looked for bugs that are deep in the corners or hidden in the dark. If there were a serious bug, we&amp;rsquo;re pretty sure we would have found it by&amp;nbsp;now.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Testing"></category><category term="thoughts"></category></entry><entry><title>Testing Knowledge Transfer (outline)</title><link href="https://www.aviskase.com/articles/2016/04/24/testing-knowledge-transfer-outline/" rel="alternate"></link><published>2016-04-24T00:00:00-04:00</published><updated>2016-04-24T00:00:00-04:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-04-24:/articles/2016/04/24/testing-knowledge-transfer-outline/</id><content type="html">&lt;p&gt;There is &lt;a class="external" href="http://positiveflower.blogspot.in/2016/04/blog-post.html"&gt;an excellent blog post&lt;/a&gt; (ru) by  Elena Poplouhina with the list of what not to forget to tell about testing to project newcomers. So I&amp;rsquo;ve made an English translation with some correction. Here it is &lt;a class="external" href="https://www.mindomo.com/outline/ec7abbf581494a82a86539ca68e0ab5e"&gt;as an outline&lt;/a&gt;.&lt;/p&gt;</content><category term="Testing"></category><category term="thoughts"></category></entry><entry><title>List of Articles and Videos on API and Web Services Testing</title><link href="https://www.aviskase.com/articles/2016/01/09/list-of-articles-and-videos-on-api-and-web-services-testing/" rel="alternate"></link><published>2016-01-09T00:00:00-05:00</published><updated>2016-01-09T00:00:00-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2016-01-09:/articles/2016/01/09/list-of-articles-and-videos-on-api-and-web-services-testing/</id><summary type="html">&lt;p&gt;There was a great list on now  discontinued site &lt;code&gt;qahelp.net&lt;/code&gt;. I managed to save it through yandex cache (even google cache and web archive couldn&amp;rsquo;t&amp;nbsp;help).&lt;/p&gt;
&lt;h2&gt;Difference Between &lt;span class="caps"&gt;API&lt;/span&gt; and Web&amp;nbsp;Services&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://stackoverflow.com/questions/808421/api-vs-webservice"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; vs Web Service&lt;/a&gt;, &lt;a class="external" href="http://programmers.stackexchange.com/questions/38691/difference-between-web-api-and-web-service"&gt;Difference between web &lt;span class="caps"&gt;API&lt;/span&gt; and web service&lt;/a&gt;, &lt;a class="external" href="http://www.differencebetween.net/technology/internet/difference-between-api-and-web-service/#ixzz3l5QC4tYj"&gt;Difference between &lt;span class="caps"&gt;API&lt;/span&gt; and web …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;There was a great list on now  discontinued site &lt;code&gt;qahelp.net&lt;/code&gt;. I managed to save it through yandex cache (even google cache and web archive couldn&amp;rsquo;t&amp;nbsp;help).&lt;/p&gt;
&lt;h2&gt;Difference Between &lt;span class="caps"&gt;API&lt;/span&gt; and Web&amp;nbsp;Services&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://stackoverflow.com/questions/808421/api-vs-webservice"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; vs Web Service&lt;/a&gt;, &lt;a class="external" href="http://programmers.stackexchange.com/questions/38691/difference-between-web-api-and-web-service"&gt;Difference between web &lt;span class="caps"&gt;API&lt;/span&gt; and web service&lt;/a&gt;, &lt;a class="external" href="http://www.differencebetween.net/technology/internet/difference-between-api-and-web-service/#ixzz3l5QC4tYj"&gt;Difference between &lt;span class="caps"&gt;API&lt;/span&gt; and web&amp;nbsp;service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://readwrite.com/2013/09/19/api-defined/"&gt;What APIs Are And Why They’re Important&lt;/a&gt; &amp;mdash; Brian&amp;nbsp;Proffitt&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html#N10144"&gt;What are web services&lt;/a&gt; (section) &amp;mdash; Nicholas&amp;nbsp;Chase&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.cl.cam.ac.uk/~ib249/teaching/Lecture1.handout.pdf"&gt;Introduction to Web Services&lt;/a&gt; (&lt;span class="caps"&gt;PDF&lt;/span&gt;) &amp;mdash; Ioannis G.&amp;nbsp;Baltopoulos&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SOAP&lt;/span&gt; and &lt;span class="caps"&gt;REST&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://www.ibm.com/developerworks/webservices/tutorials/ws-understand-web-services1/ws-understand-web-services1.html#N10278"&gt;Understanding &lt;span class="caps"&gt;SOAP&lt;/span&gt;&lt;/a&gt; (section) &amp;mdash; Nicholas&amp;nbsp;Chase&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.restapitutorial.com/lessons/whatisrest.html"&gt;What is &lt;span class="caps"&gt;REST&lt;/span&gt;?&lt;/a&gt; (video) &amp;mdash; Todd&amp;nbsp;Fredrich&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/apis/understanding-soap-and-rest-basics/"&gt;Understanding &lt;span class="caps"&gt;SOAP&lt;/span&gt; and &lt;span class="caps"&gt;REST&lt;/span&gt; Basics And Differences&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.infoq.com/articles/webber-rest-workflow/"&gt;How to &lt;span class="caps"&gt;GET&lt;/span&gt; a cup of coffee&lt;/a&gt; &amp;mdash; Jim Webber, Savas Parastatidis &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Ian&amp;nbsp;Robinson&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;API&lt;/span&gt; and Web Services&amp;nbsp;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="https://blog.udemy.com/api-testing/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Testing: Why it matters and how to do it&lt;/a&gt; &amp;mdash; Michael&amp;nbsp;Churchman&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://testingisbelieving.blogspot.co.uk/2013/11/johnny-mnemonic-iceovermad.html"&gt;Johnny mnemonic &amp;mdash; &lt;span class="caps"&gt;ICEOVERMAD&lt;/span&gt;&lt;/a&gt; &amp;mdash; Ash&amp;nbsp;Winter&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.soapui.org/testing-dojo/welcome-to-the-dojo/overview.html"&gt;The &lt;span class="caps"&gt;API&lt;/span&gt; Testing Dojo&lt;/a&gt; &amp;mdash; Smart&amp;nbsp;Bear&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://qxf2.com/blog/api-testing-ui-tools-postman"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Testing: &lt;span class="caps"&gt;UI&lt;/span&gt; Tools&lt;/a&gt; &amp;mdash; Avinash&amp;nbsp;Shetty&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://qxf2.com/blog/api-testing-developer-tools"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Testing: Developer Tools&lt;/a&gt; &amp;mdash; Avinash&amp;nbsp;Shetty&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://weekendtesting.com/?p=3898"&gt;&lt;span class="caps"&gt;WTEU&lt;/span&gt;-53 &amp;mdash; An introduction to &lt;span class="caps"&gt;API&lt;/span&gt; Testing&lt;/a&gt; &amp;mdash; Amy&amp;nbsp;Phillips&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.eviltester.com/2015/01/some-api-testing-basic-introductory.html"&gt;Some &lt;span class="caps"&gt;API&lt;/span&gt; Testing Basic Introductory Notes and Tools&lt;/a&gt; &amp;mdash; Alan&amp;nbsp;Richardson&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deep Dive into &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.octo.com/en/design-a-rest-api/"&gt;How to design a &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; &amp;mdash; Antoine Chantalou, Jérémy Buisson, Mohamed Kissa, Florent Jaby, Nicolas Laurent, Augustin Grimprel, Benoit&amp;nbsp;Lafontaine&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://toddfredrich.com/commoditization-of-the-user-interface.html"&gt;The commoditization of the user interface&lt;/a&gt; &amp;mdash; Todd&amp;nbsp;Friedrich&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://toddfredrich.com/restexpress-api-application-layers.html"&gt;&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; application layers&lt;/a&gt; &amp;mdash; Todd&amp;nbsp;Friedrich&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling"&gt;&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; design: Resource modeling&lt;/a&gt; &amp;mdash; Prakash&amp;nbsp;Subramaniam&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://martinfowler.com/articles/richardsonMaturityModel.html"&gt;Richardson maturity model&lt;/a&gt; &amp;mdash; Martin&amp;nbsp;Fowler&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;API&lt;/span&gt; Security&amp;nbsp;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-1-of-3/"&gt;How to Hack an &lt;span class="caps"&gt;API&lt;/span&gt; and Get Away with It (Part 1 of 3)&lt;/a&gt; &amp;mdash; Ole&amp;nbsp;Lensmar&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-2-of-3/"&gt;How to Hack an &lt;span class="caps"&gt;API&lt;/span&gt; and Get Away with It (Part 2 of 3)&lt;/a&gt; &amp;mdash; Ole&amp;nbsp;Lensmar&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/readyapi/api-security-testing-how-to-hack-an-api-and-get-away-with-it-part-3-of-3/"&gt;How to Hack an &lt;span class="caps"&gt;API&lt;/span&gt; and Get Away with It (Part 3 of 3)&lt;/a&gt; &amp;mdash; Ole&amp;nbsp;Lensmar&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://weekendtesting.com/?p=4033"&gt;&lt;span class="caps"&gt;WTEU&lt;/span&gt;-56 &amp;mdash; Security testing for APIs&lt;/a&gt; &amp;mdash; Dan&amp;nbsp;Billing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Service&amp;nbsp;Virtualization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://smartbear.com/all-resources/articles/what-is-service-virtualization"&gt;What is service virtualization&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/readyapi/hardening-your-application-against-api-failures-with-api-virtualization/"&gt;Hardening Your Application Against &lt;span class="caps"&gt;API&lt;/span&gt; Failures with &lt;span class="caps"&gt;API&lt;/span&gt; Virtualization&lt;/a&gt; &amp;mdash; Lorinda&amp;nbsp;Brandon&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.stickyminds.com/article/4-ways-boost-your-test-process-service-virtualization"&gt;4 Ways to Boost Your Test Process with Service Virtualization&lt;/a&gt; &amp;mdash; Bas&amp;nbsp;Dijkstra&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Introduction to&amp;nbsp;Microservices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://martinfowler.com/articles/microservices.html"&gt;Microservices&lt;/a&gt; &amp;mdash; Martin&amp;nbsp;Fowler&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://www.nginx.com/blog/introduction-to-microservices/"&gt;Introduction to microservices&lt;/a&gt; &amp;mdash; Chris&amp;nbsp;Richardson&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/microservices/delving-into-the-microservices-architecture/"&gt;Delving into the Microservices Architecture&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://blog.yourkarma.com/building-microservices-at-karma"&gt;How we build microservices at Karma&lt;/a&gt; &amp;mdash; Stefan&amp;nbsp;Borsje&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.javaworld.com/article/2863409/soa/why-2015-will-be-the-year-of-microservices.html"&gt;Why 2015 will be the year of microservices&lt;/a&gt; &amp;mdash; Eric&amp;nbsp;Knorr&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Microservices&amp;nbsp;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="external" href="http://martinfowler.com/articles/microservice-testing/"&gt;Testing Strategies in a Microservice Architecture&lt;/a&gt; &amp;mdash; Toby Clemson et&amp;nbsp;al.&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/apm/performance-issue-considerations-for-microservices-apis/"&gt;Performance Issue Considerations for Microservices APIs&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.xebialabs.com/2014/12/31/8-questions-need-ask-microservices-containers-docker-2015/"&gt;8 Questions You Need to Ask About Microservices, Containers &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Docker in 2015&lt;/a&gt; &amp;mdash; Andrew&amp;nbsp;Phillips&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.infoq.com/presentations/integration-tests-scam"&gt;Integration tests are a scam&lt;/a&gt; &amp;mdash; &lt;span class="caps"&gt;JB&lt;/span&gt;&amp;nbsp;Rainsberger&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="https://prezi.com/09emobpvigo2/throw-away-your-integration-tests/"&gt;Throw away your integration tests&lt;/a&gt; (slides) &amp;mdash; Beth&amp;nbsp;Skurrie&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;More on &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="http://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/" data-proofer-ignore&gt;What is &lt;span class="caps"&gt;API&lt;/span&gt; management &amp;mdash; A Brief Primer&lt;/a&gt; &amp;mdash; Navdeep Sidhu&lt;/del&gt; &lt;em&gt;Upd. resource is no more&amp;nbsp;available&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://www.infoq.com/research/api-management"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; management platform capabilities&lt;/a&gt; &amp;mdash; Jeevak&amp;nbsp;Kasarkod&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/iot-2/the-api-is-the-invisible-hand-behind-the-internet-of-things"&gt;The &lt;span class="caps"&gt;API&lt;/span&gt; is the Invisible Hand Behind the Internet of Things&lt;/a&gt; &amp;mdash; Jennifer&amp;nbsp;Riggins&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/apis/hypermedia-apis/working-with-hypermedia-apis"&gt;Working with Hypermedia APIs&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;li&gt;&lt;a class="external" href="http://blog.smartbear.com/iot-2/testing-challenges-associated-with-machine-learning-apis"&gt;Testing Challenges Associated with Machine Learning APIs&lt;/a&gt; &amp;mdash; John&amp;nbsp;Mueller&lt;/li&gt;
&lt;/ul&gt;</content><category term="Testing"></category><category term="api"></category></entry><entry><title>How to Watch SWF in Linux</title><link href="https://www.aviskase.com/articles/2015/12/23/how-to-watch-swf-in-linux/" rel="alternate"></link><published>2015-12-23T00:00:00-05:00</published><updated>2015-12-23T00:00:00-05:00</updated><author><name>Yuliya Bagriy</name></author><id>tag:www.aviskase.com,2015-12-23:/articles/2015/12/23/how-to-watch-swf-in-linux/</id><summary type="html">&lt;p&gt;Sometimes people use Jing to record videos for bug reports. This pest is saving them as &lt;span class="caps"&gt;SWF&lt;/span&gt; file. So, here is a simple note on how to open these videos in&amp;nbsp;Linux.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s really easy. Firefox can open them (of course, if Shockwave plugin is present). Just download that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes people use Jing to record videos for bug reports. This pest is saving them as &lt;span class="caps"&gt;SWF&lt;/span&gt; file. So, here is a simple note on how to open these videos in&amp;nbsp;Linux.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s really easy. Firefox can open them (of course, if Shockwave plugin is present). Just download that nasty video and open it in &lt;span class="caps"&gt;FF&lt;/span&gt;, all&amp;rsquo;s&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;But there is a catch. I don&amp;rsquo;t know how it&amp;rsquo;s on Windows, but for Linux you should edit mime types. In order to do that you should create a file &lt;code&gt;~/.mime.types&lt;/code&gt; with this&amp;nbsp;content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;application/x-shockwave-flash  swf swfl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s all! This way is the easiest, because it works only for the owner of the home directory, where the file was&amp;nbsp;created.&lt;/p&gt;
&lt;p&gt;But if you want, you can make this setting global. But be careful, because everything will be reset after an upgrade. You should open the&amp;nbsp;file: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo nano /usr/share/mime/packages/freedesktop.org.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and replace this&amp;nbsp;string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;mime-type type=&amp;quot;application/vnd.adobe.flash.movie&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;mime-type type=&amp;quot;application/x-shockwave-flash&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then&amp;nbsp;execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo update-mime-database /usr/share/mime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Other"></category><category term="linux"></category><category term="practical"></category></entry></feed>